{
  "api/Bunit.ClipboardEventDispatchExtensions.html": {
    "href": "api/Bunit.ClipboardEventDispatchExtensions.html",
    "title": "Class ClipboardEventDispatchExtensions | bUnit",
    "keywords": "Class ClipboardEventDispatchExtensions Clipboard event dispatch helper extension methods. Inheritance System.Object ClipboardEventDispatchExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.dll Syntax public static class ClipboardEventDispatchExtensions Methods | Improve this Doc View Source BeforeCopy(IElement) Raises the @onbeforecopy event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void BeforeCopy(this IElement element) Parameters Type Name Description IElement element The element to raise the event on. | Improve this Doc View Source BeforeCopyAsync(IElement) Raises the @onbeforecopy event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static Task BeforeCopyAsync(this IElement element) Parameters Type Name Description IElement element The element to raise the event on. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source BeforeCut(IElement) Raises the @onbeforecut event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void BeforeCut(this IElement element) Parameters Type Name Description IElement element The element to raise the event on. | Improve this Doc View Source BeforeCutAsync(IElement) Raises the @onbeforecut event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static Task BeforeCutAsync(this IElement element) Parameters Type Name Description IElement element The element to raise the event on. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source BeforePaste(IElement) Raises the @onbeforepaste event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void BeforePaste(this IElement element) Parameters Type Name Description IElement element The element to raise the event on. | Improve this Doc View Source BeforePasteAsync(IElement) Raises the @onbeforepaste event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static Task BeforePasteAsync(this IElement element) Parameters Type Name Description IElement element The element to raise the event on. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source Copy(IElement, ClipboardEventArgs) Raises the @oncopy event on element , passing the provided eventArgs to the event handler. Declaration public static void Copy(this IElement element, ClipboardEventArgs eventArgs) Parameters Type Name Description IElement element The element to raise the event on. ClipboardEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source Copy(IElement, String) Raises the @oncopy event on element , passing the provided properties to the event handler via a object. Declaration public static void Copy(this IElement element, string type = null) Parameters Type Name Description IElement element The element to raise the event on. System.String type The type of the event. | Improve this Doc View Source CopyAsync(IElement, ClipboardEventArgs) Raises the @oncopy event on element , passing the provided eventArgs to the event handler. Declaration public static Task CopyAsync(this IElement element, ClipboardEventArgs eventArgs) Parameters Type Name Description IElement element ClipboardEventArgs eventArgs Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source Cut(IElement, ClipboardEventArgs) Raises the @oncut event on element , passing the provided eventArgs to the event handler. Declaration public static void Cut(this IElement element, ClipboardEventArgs eventArgs) Parameters Type Name Description IElement element The element to raise the event on. ClipboardEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source Cut(IElement, String) Raises the @oncut event on element , passing the provided properties to the event handler via a object. Declaration public static void Cut(this IElement element, string type = null) Parameters Type Name Description IElement element The element to raise the event on. System.String type The type of the event. | Improve this Doc View Source CutAsync(IElement, ClipboardEventArgs) Raises the @oncut event on element , passing the provided eventArgs to the event handler. Declaration public static Task CutAsync(this IElement element, ClipboardEventArgs eventArgs) Parameters Type Name Description IElement element ClipboardEventArgs eventArgs Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source Paste(IElement, ClipboardEventArgs) Raises the @onpaste event on element , passing the provided eventArgs to the event handler. Declaration public static void Paste(this IElement element, ClipboardEventArgs eventArgs) Parameters Type Name Description IElement element The element to raise the event on. ClipboardEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source Paste(IElement, String) Raises the @onpaste event on element , passing the provided properties to the event handler via a object. Declaration public static void Paste(this IElement element, string type = null) Parameters Type Name Description IElement element The element to raise the event on. System.String type The type of the event. | Improve this Doc View Source PasteAsync(IElement, ClipboardEventArgs) Raises the @onpaste event on element , passing the provided eventArgs to the event handler. Declaration public static Task PasteAsync(this IElement element, ClipboardEventArgs eventArgs) Parameters Type Name Description IElement element ClipboardEventArgs eventArgs Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done."
  },
  "api/Bunit.CollectionAssertExtensions.html": {
    "href": "api/Bunit.CollectionAssertExtensions.html",
    "title": "Class CollectionAssertExtensions | bUnit",
    "keywords": "Class CollectionAssertExtensions Collection test assertions Inheritance System.Object CollectionAssertExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.dll Syntax public static class CollectionAssertExtensions Methods | Improve this Doc View Source ShouldAllBe<T>(IEnumerable<T>, Action<T, Int32>[]) Verifies that a collection contains exactly a given number of elements, which meet the criteria provided by the element inspectors. Declaration public static void ShouldAllBe<T>(this IEnumerable<T> collection, params Action<T, int>[] elementInspectors) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> collection The collection to be inspected System.Action <T, System.Int32 >[] elementInspectors The element inspectors, which inspect each element and its index in the collection in turn. The total number of element inspectors must exactly match the number of elements in the collection. Type Parameters Name Description T | Improve this Doc View Source ShouldAllBe<T>(IEnumerable<T>, Action<T>[]) Verifies that a collection contains exactly a given number of elements, which meet the criteria provided by the element inspectors. Declaration public static void ShouldAllBe<T>(this IEnumerable<T> collection, params Action<T>[] elementInspectors) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> collection The collection to be inspected System.Action <T>[] elementInspectors The element inspectors, which inspect each element in turn. The total number of element inspectors must exactly match the number of elements in the collection. Type Parameters Name Description T"
  },
  "api/Bunit.CompareToExtensions.html": {
    "href": "api/Bunit.CompareToExtensions.html",
    "title": "Class CompareToExtensions | bUnit",
    "keywords": "Class CompareToExtensions Extension methods that allows different rendered fragments to be compared to others or strings. Inheritance System.Object CompareToExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.dll Syntax public static class CompareToExtensions Methods | Improve this Doc View Source CompareTo(IRenderedFragment, IRenderedFragment) Compare the rendered markup in the actual IRenderedFragment to the rendered markup in the expected IRenderedFragment Declaration public static IReadOnlyList<IDiff> CompareTo(this IRenderedFragment actual, IRenderedFragment expected) Parameters Type Name Description IRenderedFragment actual Source of rendered markup to check. IRenderedFragment expected Source of rendered markup to compare with. Returns Type Description System.Collections.Generic.IReadOnlyList < IDiff > Any differences found. | Improve this Doc View Source CompareTo(IRenderedFragment, String) Compare the rendered markup in the actual IRenderedFragment with that in the expected markup string. Declaration public static IReadOnlyList<IDiff> CompareTo(this IRenderedFragment actual, string expected) Parameters Type Name Description IRenderedFragment actual Source of rendered markup to check. System.String expected Markup to compare with. Returns Type Description System.Collections.Generic.IReadOnlyList < IDiff > Any differences found. | Improve this Doc View Source CompareTo(INode, INodeList) Compares an actual with an expected . Declaration public static IReadOnlyList<IDiff> CompareTo(this INode actual, INodeList expected) Parameters Type Name Description INode actual The node to check. INodeList expected The node list to compare with Returns Type Description System.Collections.Generic.IReadOnlyList < IDiff > Any differences found. | Improve this Doc View Source CompareTo(INodeList, INode) Compares an actual with an expected . Declaration public static IReadOnlyList<IDiff> CompareTo(this INodeList actual, INode expected) Parameters Type Name Description INodeList actual The node list to check. INode expected The node to compare with Returns Type Description System.Collections.Generic.IReadOnlyList < IDiff > Any differences found. | Improve this Doc View Source CompareTo(INodeList, INodeList) Compares an actual with an expected . Declaration public static IReadOnlyList<IDiff> CompareTo(this INodeList actual, INodeList expected) Parameters Type Name Description INodeList actual The node list to check. INodeList expected The node list to compare with Returns Type Description System.Collections.Generic.IReadOnlyList < IDiff > Any differences found."
  },
  "api/Bunit.ComponentChangeEventSubscriber.html": {
    "href": "api/Bunit.ComponentChangeEventSubscriber.html",
    "title": "Class ComponentChangeEventSubscriber | bUnit",
    "keywords": "Class ComponentChangeEventSubscriber Represents a subscriber to RenderEvent s, published by the TestRenderer . Inheritance System.Object ConcurrentRenderEventSubscriber ComponentChangeEventSubscriber Implements System.IObserver < RenderEvent > Inherited Members ConcurrentRenderEventSubscriber.RenderCount ConcurrentRenderEventSubscriber.IsCompleted ConcurrentRenderEventSubscriber.LatestRenderEvent ConcurrentRenderEventSubscriber.Unsubscribe() ConcurrentRenderEventSubscriber.OnCompleted() ConcurrentRenderEventSubscriber.OnError(Exception) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.dll Syntax public sealed class ComponentChangeEventSubscriber : ConcurrentRenderEventSubscriber, IObserver<RenderEvent> Constructors | Improve this Doc View Source ComponentChangeEventSubscriber(IRenderedFragment, Action<RenderEvent>, Action) Creates an instance of the ComponentChangeEventSubscriber . Declaration public ComponentChangeEventSubscriber(IRenderedFragment testTarget, Action<RenderEvent> onChange = null, Action onCompleted = null) Parameters Type Name Description IRenderedFragment testTarget System.Action < RenderEvent > onChange System.Action onCompleted Methods | Improve this Doc View Source OnNext(RenderEvent) Declaration public override void OnNext(RenderEvent value) Parameters Type Name Description RenderEvent value Overrides ConcurrentRenderEventSubscriber.OnNext(RenderEvent) Implements System.IObserver<T> Extension Methods JsRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.ComponentNotFoundException.html": {
    "href": "api/Bunit.ComponentNotFoundException.html",
    "title": "Class ComponentNotFoundException | bUnit",
    "keywords": "Class ComponentNotFoundException Represents an exception that is thrown when a search for a component in a IRenderedFragment did not succeed. Inheritance System.Object System.Exception ComponentNotFoundException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Bunit Assembly : Bunit.dll Syntax public class ComponentNotFoundException : Exception, ISerializable Constructors | Improve this Doc View Source ComponentNotFoundException(Type) Creates an instance of the ComponentNotFoundException type. Declaration public ComponentNotFoundException(Type componentType) Parameters Type Name Description System.Type componentType The type of component that was not found. Implements System.Runtime.Serialization.ISerializable Extension Methods JsRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.ComponentParameter.html": {
    "href": "api/Bunit.ComponentParameter.html",
    "title": "Struct ComponentParameter | bUnit",
    "keywords": "Struct ComponentParameter Represents a single parameter supplied to an component under test. Implements System.IEquatable < ComponentParameter > Inherited Members System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Bunit Assembly : Bunit.dll Syntax public struct ComponentParameter : IEquatable<ComponentParameter> Properties | Improve this Doc View Source IsCascadingValue Gets a value to indicate whether the parameter is for use by a . Declaration public bool IsCascadingValue { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Name Gets the name of the parameter. Can be null if the parameter is for an unnamed cascading value. Declaration public string Name { get; } Property Value Type Description System.String | Improve this Doc View Source Value Gets the value being supplied to the component. Declaration public object Value { get; } Property Value Type Description System.Object Methods | Improve this Doc View Source CreateCascadingValue(String, Object) Create a Cascading Value parameter for a component under test. Declaration public static ComponentParameter CreateCascadingValue(string name, object value) Parameters Type Name Description System.String name A optional name for the cascading value System.Object value The cascading value Returns Type Description ComponentParameter | Improve this Doc View Source CreateParameter(String, Object) Create a parameter for a component under test. Declaration public static ComponentParameter CreateParameter(string name, object value) Parameters Type Name Description System.String name Name of the parameter to pass to the component System.Object value Value or null to pass the component Returns Type Description ComponentParameter | Improve this Doc View Source Equals(ComponentParameter) Declaration public bool Equals(ComponentParameter other) Parameters Type Name Description ComponentParameter other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(ComponentParameter, ComponentParameter) Declaration public static bool operator ==(ComponentParameter left, ComponentParameter right) Parameters Type Name Description ComponentParameter left ComponentParameter right Returns Type Description System.Boolean | Improve this Doc View Source Implicit((String name, Object value, Boolean isCascadingValue) to ComponentParameter) Create a parameter or cascading value for a component under test. Declaration public static implicit operator ComponentParameter((string name, object value, bool isCascadingValue) input) Parameters Type Name Description System.ValueTuple < System.String , System.Object , System.Boolean > input A name/value/isCascadingValue triple for the parameter Returns Type Description ComponentParameter | Improve this Doc View Source Implicit((String name, Object value) to ComponentParameter) Create a parameter for a component under test. Declaration public static implicit operator ComponentParameter((string name, object value) input) Parameters Type Name Description System.ValueTuple < System.String , System.Object > input A name/value pair for the parameter Returns Type Description ComponentParameter | Improve this Doc View Source Inequality(ComponentParameter, ComponentParameter) Declaration public static bool operator !=(ComponentParameter left, ComponentParameter right) Parameters Type Name Description ComponentParameter left ComponentParameter right Returns Type Description System.Boolean Implements System.IEquatable<T> Extension Methods JsRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.ComponentTestFixture.html": {
    "href": "api/Bunit.ComponentTestFixture.html",
    "title": "Class ComponentTestFixture | bUnit",
    "keywords": "Class ComponentTestFixture Base class for test classes that contains XUnit Razor component tests. Inheritance System.Object TestContext ComponentTestFixture TestComponentBase Implements ITestContext System.IDisposable Inherited Members TestContext.Renderer TestContext.Services TestContext.CreateNodes(String) TestContext.RenderComponent<TComponent>(ComponentParameter[]) TestContext.Dispose(Boolean) TestContext.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.dll Syntax public abstract class ComponentTestFixture : TestContext, ITestContext, IDisposable Methods | Improve this Doc View Source CascadingValue(Object) Creates a cascading value which can be passed to a test contexts render methods. Declaration protected static ComponentParameter CascadingValue(object value) Parameters Type Name Description System.Object value Value of the parameter Returns Type Description ComponentParameter The ComponentParameter . | Improve this Doc View Source CascadingValue(String, Object) Creates a cascading value which can be passed to a test contexts render methods. Declaration protected static ComponentParameter CascadingValue(string name, object value) Parameters Type Name Description System.String name Parameter name System.Object value Value of the parameter Returns Type Description ComponentParameter The ComponentParameter . | Improve this Doc View Source ChildContent(String) Creates a ChildContent with the provided markup as rendered output. Declaration protected static ComponentParameter ChildContent(string markup) Parameters Type Name Description System.String markup Markup to pass to the child content parameter Returns Type Description ComponentParameter The ComponentParameter . | Improve this Doc View Source ChildContent<TComponent>(ComponentParameter[]) Creates a ChildContent which will render a TComponent component with the provided parameters as input. Declaration protected static ComponentParameter ChildContent<TComponent>(params ComponentParameter[] parameters) where TComponent : class, IComponent Parameters Type Name Description ComponentParameter [] parameters Parameters to pass to the TComponent . Returns Type Description ComponentParameter The ComponentParameter . Type Parameters Name Description TComponent The type of the component to render with the | Improve this Doc View Source EventCallback(String, Action) Creates a ComponentParameter with an as parameter value for this TestContext and callback . Declaration protected ComponentParameter EventCallback(string name, Action callback) Parameters Type Name Description System.String name Parameter name. System.Action callback The event callback. Returns Type Description ComponentParameter The ComponentParameter . | Improve this Doc View Source EventCallback(String, Action<Object>) Creates a ComponentParameter with an as parameter value for this TestContext and callback . Declaration protected ComponentParameter EventCallback(string name, Action<object> callback) Parameters Type Name Description System.String name Parameter name. System.Action < System.Object > callback The event callback. Returns Type Description ComponentParameter The ComponentParameter . | Improve this Doc View Source EventCallback(String, Func<Object, Task>) Creates a ComponentParameter with an as parameter value for this TestContext and callback . Declaration protected ComponentParameter EventCallback(string name, Func<object, Task> callback) Parameters Type Name Description System.String name Parameter name. System.Func < System.Object , System.Threading.Tasks.Task > callback The event callback. Returns Type Description ComponentParameter The ComponentParameter . | Improve this Doc View Source EventCallback(String, Func<Task>) Creates a ComponentParameter with an as parameter value for this TestContext and callback . Declaration protected ComponentParameter EventCallback(string name, Func<Task> callback) Parameters Type Name Description System.String name Parameter name. System.Func < System.Threading.Tasks.Task > callback The event callback. Returns Type Description ComponentParameter The ComponentParameter . | Improve this Doc View Source EventCallback<TValue>(String, Action) Creates a ComponentParameter with an as parameter value for this TestContext and callback . Declaration protected ComponentParameter EventCallback<TValue>(string name, Action callback) Parameters Type Name Description System.String name Parameter name. System.Action callback The event callback. Returns Type Description ComponentParameter The ComponentParameter . Type Parameters Name Description TValue | Improve this Doc View Source EventCallback<TValue>(String, Action<TValue>) Creates a ComponentParameter with an as parameter value for this TestContext and callback . Declaration protected ComponentParameter EventCallback<TValue>(string name, Action<TValue> callback) Parameters Type Name Description System.String name Parameter name. System.Action <TValue> callback The event callback. Returns Type Description ComponentParameter The ComponentParameter . Type Parameters Name Description TValue | Improve this Doc View Source EventCallback<TValue>(String, Func<TValue, Task>) Creates a ComponentParameter with an as parameter value for this TestContext and callback . Declaration protected ComponentParameter EventCallback<TValue>(string name, Func<TValue, Task> callback) Parameters Type Name Description System.String name Parameter name. System.Func <TValue, System.Threading.Tasks.Task > callback The event callback. Returns Type Description ComponentParameter The ComponentParameter . Type Parameters Name Description TValue | Improve this Doc View Source EventCallback<TValue>(String, Func<Task>) Creates a ComponentParameter with an as parameter value for this TestContext and callback . Declaration protected ComponentParameter EventCallback<TValue>(string name, Func<Task> callback) Parameters Type Name Description System.String name Parameter name. System.Func < System.Threading.Tasks.Task > callback The event callback. Returns Type Description ComponentParameter The ComponentParameter . Type Parameters Name Description TValue | Improve this Doc View Source Parameter(String, Object) Creates a component parameter which can be passed to a test contexts render methods. Declaration protected static ComponentParameter Parameter(string name, object value) Parameters Type Name Description System.String name Parameter name System.Object value Value or null of the parameter Returns Type Description ComponentParameter The ComponentParameter . | Improve this Doc View Source RenderFragment(String, String) Creates a with the provided markup as rendered output and passes it to the parameter specified in name . Declaration protected static ComponentParameter RenderFragment(string name, string markup) Parameters Type Name Description System.String name Parameter name. System.String markup Markup to pass to the render fragment parameter Returns Type Description ComponentParameter The ComponentParameter . | Improve this Doc View Source RenderFragment<TComponent>(String, ComponentParameter[]) Creates a which will render a TComponent component with the provided parameters as input, and passes it to the parameter specified in name . Declaration protected static ComponentParameter RenderFragment<TComponent>(string name, params ComponentParameter[] parameters) where TComponent : class, IComponent Parameters Type Name Description System.String name Parameter name. ComponentParameter [] parameters Parameters to pass to the TComponent . Returns Type Description ComponentParameter The ComponentParameter . Type Parameters Name Description TComponent The type of the component to render with the | Improve this Doc View Source Template<TValue>(String, RenderFragment<TValue>) Creates a template component parameter which will pass the template to the parameter with the name name . Declaration protected static ComponentParameter Template<TValue>(string name, RenderFragment<TValue> template) Parameters Type Name Description System.String name Parameter name. RenderFragment <TValue> template to pass to the parameter. Returns Type Description ComponentParameter The ComponentParameter . Type Parameters Name Description TValue The value used to build the content. | Improve this Doc View Source Template<TValue>(String, Func<TValue, String>) Creates a template component parameter which will pass the a to the parameter with the name name . The markupFactory will be used to generate the markup inside the template. Declaration protected static ComponentParameter Template<TValue>(string name, Func<TValue, string> markupFactory) Parameters Type Name Description System.String name Parameter name. System.Func <TValue, System.String > markupFactory A markup factory that takes a TValue as input and returns markup/HTML. Returns Type Description ComponentParameter The ComponentParameter . Type Parameters Name Description TValue The value used to build the content. | Improve this Doc View Source WaitForAssertion(Action, Nullable<TimeSpan>) Wait until the provided assertion action passes (i.e. does not throw an assertion exception), or the timeout is reached (default is one second). The assertion is attempted initially, and then each time the renderer in the test context renders. Declaration protected void WaitForAssertion(Action assertion, TimeSpan? timeout = default(TimeSpan? )) Parameters Type Name Description System.Action assertion The verification or assertion to perform. System.Nullable < System.TimeSpan > timeout The maximum time to attempt the verification. Exceptions Type Condition WaitForAssertionFailedException Thrown if the timeout has been reached. See the inner exception to see the captured assertion exception. | Improve this Doc View Source WaitForNextRender(Action, Nullable<TimeSpan>) Wait for the next render to happen, or the timeout is reached (default is one second). If a renderTrigger action is provided, it is invoked before the waiting. Declaration [Obsolete(\"Use either the WaitForState or WaitForAssertion method instead. It will make your test more resilient to insignificant changes, as they will wait across multiple renders instead of just one. To make the change, run any render trigger first, then call either WaitForState or WaitForAssertion with the appropriate input. This method will be removed before the 1.0.0 release.\", false)] protected void WaitForNextRender(Action renderTrigger = null, TimeSpan? timeout = default(TimeSpan? )) Parameters Type Name Description System.Action renderTrigger The action that somehow causes one or more components to render. System.Nullable < System.TimeSpan > timeout The maximum time to wait for the next render. If not provided the default is 1 second. During debugging, the timeout is automatically set to infinite. Exceptions Type Condition WaitForRenderFailedException Thrown if no render happens within the specified timeout , or the default of 1 second, if non is specified. | Improve this Doc View Source WaitForState(Func<Boolean>, Nullable<TimeSpan>) Wait until the provided statePredicate action returns true, or the timeout is reached (default is one second). The statePredicate is evaluated initially, and then each time the renderer in the test context renders. Declaration protected void WaitForState(Func<bool> statePredicate, TimeSpan? timeout = default(TimeSpan? )) Parameters Type Name Description System.Func < System.Boolean > statePredicate The predicate to invoke after each render, which returns true when the desired state has been reached. System.Nullable < System.TimeSpan > timeout The maximum time to wait for the desired state. Exceptions Type Condition WaitForStateFailedException Thrown if the statePredicate throw an exception during invocation, or if the timeout has been reached. See the inner exception for details. Implements ITestContext System.IDisposable Extension Methods RenderWaitingHelperExtensions.WaitForNextRender(ITestContext, Action, Nullable<TimeSpan>) RenderWaitingHelperExtensions.WaitForState(ITestContext, Func<Boolean>, Nullable<TimeSpan>) RenderWaitingHelperExtensions.WaitForAssertion(ITestContext, Action, Nullable<TimeSpan>) JsRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.ComponentUnderTest.html": {
    "href": "api/Bunit.ComponentUnderTest.html",
    "title": "Class ComponentUnderTest | bUnit",
    "keywords": "Class ComponentUnderTest Represents a component that can be added inside a Fixture , where a component under test can be defined as the child content. Inheritance System.Object FragmentBase ComponentUnderTest Inherited Members FragmentBase.ChildContent FragmentBase.Attach(RenderHandle) Namespace : Bunit Assembly : Bunit.dll Syntax public class ComponentUnderTest : FragmentBase Methods | Improve this Doc View Source SetParametersAsync(ParameterView) Declaration public override Task SetParametersAsync(ParameterView parameters) Parameters Type Name Description ParameterView parameters Returns Type Description System.Threading.Tasks.Task Overrides FragmentBase.SetParametersAsync(ParameterView) Extension Methods JsRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.ConcurrentRenderEventSubscriber.html": {
    "href": "api/Bunit.ConcurrentRenderEventSubscriber.html",
    "title": "Class ConcurrentRenderEventSubscriber | bUnit",
    "keywords": "Class ConcurrentRenderEventSubscriber Represents a subscriber to RenderEvent s, published by the TestRenderer . Inheritance System.Object ConcurrentRenderEventSubscriber ComponentChangeEventSubscriber Implements System.IObserver < RenderEvent > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.dll Syntax public class ConcurrentRenderEventSubscriber : IObserver<RenderEvent> Constructors | Improve this Doc View Source ConcurrentRenderEventSubscriber(IObservable<RenderEvent>, Action<RenderEvent>, Action) Creates an instance of the ConcurrentRenderEventSubscriber , and subscribes to the provided observable . Declaration public ConcurrentRenderEventSubscriber(IObservable<RenderEvent> observable, Action<RenderEvent> onRender = null, Action onCompleted = null) Parameters Type Name Description System.IObservable < RenderEvent > observable The observable to observe. System.Action < RenderEvent > onRender A callback to invoke when a RenderEvent is received. System.Action onCompleted A callback to invoke when no more renders will happen. Properties | Improve this Doc View Source IsCompleted Gets whether the TestRenderer is disposed an no more renders will happen. Declaration public bool IsCompleted { get; } Property Value Type Description System.Boolean | Improve this Doc View Source LatestRenderEvent Gets the latests RenderEvent received by the TestRenderer . Declaration public RenderEvent LatestRenderEvent { get; } Property Value Type Description RenderEvent | Improve this Doc View Source RenderCount Gets the number of renders that have occurred since subscribing. Declaration public int RenderCount { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source OnCompleted() Declaration public virtual void OnCompleted() | Improve this Doc View Source OnError(Exception) Declaration public virtual void OnError(Exception exception) Parameters Type Name Description System.Exception exception | Improve this Doc View Source OnNext(RenderEvent) Declaration public virtual void OnNext(RenderEvent value) Parameters Type Name Description RenderEvent value | Improve this Doc View Source Unsubscribe() Unsubscribes from the observable. Declaration public void Unsubscribe() Implements System.IObserver<T> Extension Methods JsRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.ContainerComponent.html": {
    "href": "api/Bunit.ContainerComponent.html",
    "title": "Class ContainerComponent | bUnit",
    "keywords": "Class ContainerComponent Represents a Razor component that can be used to render and re-render a render fragment into. Inheritance System.Object ContainerComponent Namespace : Bunit Assembly : Bunit.dll Syntax public class ContainerComponent : IComponent Constructors | Improve this Doc View Source ContainerComponent(TestRenderer) Creates a new instance of the ContainerComponent class. Declaration public ContainerComponent(TestRenderer renderer) Parameters Type Name Description TestRenderer renderer Properties | Improve this Doc View Source ComponentId Gets the id of the ContainerComponent after it has been rendered the first time. Declaration public int ComponentId { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Attach(RenderHandle) Declaration public void Attach(RenderHandle renderHandle) Parameters Type Name Description RenderHandle renderHandle | Improve this Doc View Source GetComponent<TComponent>() Gets the first component of type TComponent . If an component is found, its child content is also searched recursively. Declaration public (int Id, TComponent Component) GetComponent<TComponent>() where TComponent : IComponent Returns Type Description System.ValueTuple < System.Int32 , TComponent> Type Parameters Name Description TComponent The type of component to find Exceptions Type Condition ComponentNotFoundException When a component of type TComponent was not found. | Improve this Doc View Source GetComponents<TComponent>() Gets all components of type TComponent . If an component is found, its child content is also searched recursively. Declaration public IReadOnlyList<(int Id, TComponent Component)> GetComponents<TComponent>() where TComponent : IComponent Returns Type Description System.Collections.Generic.IReadOnlyList < System.ValueTuple < System.Int32 , TComponent>> Type Parameters Name Description TComponent The type of component to find | Improve this Doc View Source Render(RenderFragment) Renders a inside the ContainerComponent . Declaration public void Render(RenderFragment renderFragment) Parameters Type Name Description RenderFragment renderFragment The render fragment to render. | Improve this Doc View Source SetParametersAsync(ParameterView) Declaration public Task SetParametersAsync(ParameterView parameters) Parameters Type Name Description ParameterView parameters Returns Type Description System.Threading.Tasks.Task Extension Methods JsRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.DiffAssertExtensions.html": {
    "href": "api/Bunit.DiffAssertExtensions.html",
    "title": "Class DiffAssertExtensions | bUnit",
    "keywords": "Class DiffAssertExtensions A collection of assert extensions and generic assert extensions Inheritance System.Object DiffAssertExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.dll Syntax public static class DiffAssertExtensions Methods | Improve this Doc View Source ShouldHaveChanges(IReadOnlyList<IDiff>, Action<IDiff>[]) Verifies that a collection of s contains exactly a given number of elements, which meet the criteria provided by the inspectors Declaration public static void ShouldHaveChanges(this IReadOnlyList<IDiff> diffs, params Action<IDiff>[] diffInspectors) Parameters Type Name Description System.Collections.Generic.IReadOnlyList < IDiff > diffs The collection to be inspected System.Action < IDiff >[] diffInspectors The inspectors, which inspect each in turn. The total number of inspectors must exactly match the number of s in the collection | Improve this Doc View Source ShouldHaveSingleChange(IReadOnlyList<IDiff>) Verifies that a collection of s contains exactly one . Declaration public static IDiff ShouldHaveSingleChange(this IReadOnlyList<IDiff> diffs) Parameters Type Name Description System.Collections.Generic.IReadOnlyList < IDiff > diffs The collection to be inspected Returns Type Description IDiff The expected single in the collection."
  },
  "api/Bunit.Diffing.BlazorDiffingHelpers.html": {
    "href": "api/Bunit.Diffing.BlazorDiffingHelpers.html",
    "title": "Class BlazorDiffingHelpers | bUnit",
    "keywords": "Class BlazorDiffingHelpers Blazor Dffing Helpers Inheritance System.Object BlazorDiffingHelpers Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit.Diffing Assembly : Bunit.dll Syntax public static class BlazorDiffingHelpers Methods | Improve this Doc View Source BlazorEventHandlerIdAttrFilter(AttributeComparisonSource, FilterDecision) Represents a diffing filter that removes all special Blazor attributes added by the TestRenderer / Bunit.Htmlizer . Declaration public static FilterDecision BlazorEventHandlerIdAttrFilter(in AttributeComparisonSource attrSource, FilterDecision currentDecision) Parameters Type Name Description AttributeComparisonSource attrSource FilterDecision currentDecision Returns Type Description FilterDecision"
  },
  "api/Bunit.Diffing.DiffMarkupFormatter.html": {
    "href": "api/Bunit.Diffing.DiffMarkupFormatter.html",
    "title": "Class DiffMarkupFormatter | bUnit",
    "keywords": "Class DiffMarkupFormatter A markup formatter, that skips any special Blazor attributes added by the TestRenderer / Bunit.Htmlizer . Inheritance System.Object DiffMarkupFormatter Namespace : Bunit.Diffing Assembly : Bunit.dll Syntax public class DiffMarkupFormatter : IMarkupFormatter Methods | Improve this Doc View Source Attribute(IAttr) Declaration public string Attribute(IAttr attribute) Parameters Type Name Description IAttr attribute Returns Type Description System.String | Improve this Doc View Source CloseTag(IElement, Boolean) Declaration public string CloseTag(IElement element, bool selfClosing) Parameters Type Name Description IElement element System.Boolean selfClosing Returns Type Description System.String | Improve this Doc View Source Comment(IComment) Declaration public string Comment(IComment comment) Parameters Type Name Description IComment comment Returns Type Description System.String | Improve this Doc View Source Doctype(IDocumentType) Declaration public string Doctype(IDocumentType doctype) Parameters Type Name Description IDocumentType doctype Returns Type Description System.String | Improve this Doc View Source OpenTag(IElement, Boolean) Declaration public string OpenTag(IElement element, bool selfClosing) Parameters Type Name Description IElement element System.Boolean selfClosing Returns Type Description System.String | Improve this Doc View Source Processing(IProcessingInstruction) Declaration public string Processing(IProcessingInstruction processing) Parameters Type Name Description IProcessingInstruction processing Returns Type Description System.String | Improve this Doc View Source Text(ICharacterData) Declaration public string Text(ICharacterData text) Parameters Type Name Description ICharacterData text Returns Type Description System.String Extension Methods JsRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.Diffing.html": {
    "href": "api/Bunit.Diffing.html",
    "title": "Namespace Bunit.Diffing | bUnit",
    "keywords": "Namespace Bunit.Diffing Classes BlazorDiffingHelpers Blazor Dffing Helpers DiffMarkupFormatter A markup formatter, that skips any special Blazor attributes added by the TestRenderer / Bunit.Htmlizer . HtmlComparer Represents a test HTML comparer, that is configured to work with markup generated by the TestRenderer and Bunit.Htmlizer classes. TestHtmlParser A AngleSharp based HTML Parse that can parse markup strings into a ."
  },
  "api/Bunit.Diffing.HtmlComparer.html": {
    "href": "api/Bunit.Diffing.HtmlComparer.html",
    "title": "Class HtmlComparer | bUnit",
    "keywords": "Class HtmlComparer Represents a test HTML comparer, that is configured to work with markup generated by the TestRenderer and Bunit.Htmlizer classes. Inheritance System.Object HtmlComparer Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit.Diffing Assembly : Bunit.dll Syntax public sealed class HtmlComparer Constructors | Improve this Doc View Source HtmlComparer() Initializes a new instance of the HtmlComparer class. Declaration public HtmlComparer() Methods | Improve this Doc View Source Compare(INode, INode) Compares the controlHtml with the testHtml and returns any differences found. Declaration public IEnumerable<IDiff> Compare(INode controlHtml, INode testHtml) Parameters Type Name Description INode controlHtml INode testHtml Returns Type Description System.Collections.Generic.IEnumerable < IDiff > | Improve this Doc View Source Compare(IEnumerable<INode>, IEnumerable<INode>) Compares the controlHtml with the testHtml and returns any differences found. Declaration public IEnumerable<IDiff> Compare(IEnumerable<INode> controlHtml, IEnumerable<INode> testHtml) Parameters Type Name Description System.Collections.Generic.IEnumerable < INode > controlHtml System.Collections.Generic.IEnumerable < INode > testHtml Returns Type Description System.Collections.Generic.IEnumerable < IDiff > Extension Methods JsRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.Diffing.TestHtmlParser.html": {
    "href": "api/Bunit.Diffing.TestHtmlParser.html",
    "title": "Class TestHtmlParser | bUnit",
    "keywords": "Class TestHtmlParser A AngleSharp based HTML Parse that can parse markup strings into a . Inheritance System.Object TestHtmlParser Implements System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit.Diffing Assembly : Bunit.dll Syntax public sealed class TestHtmlParser : IDisposable Constructors | Improve this Doc View Source TestHtmlParser() Creates an instance of the parser with a AngleSharp context without a TestRenderer registered. Declaration public TestHtmlParser() | Improve this Doc View Source TestHtmlParser(TestRenderer, HtmlComparer) Creates an instance of the parser with a AngleSharp context with the testRenderer and comparer registered. Declaration public TestHtmlParser(TestRenderer testRenderer, HtmlComparer comparer) Parameters Type Name Description TestRenderer testRenderer HtmlComparer comparer Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Parse(String) Parses a markup HTML string using AngleSharps HTML5 parser. Declaration public INodeList Parse(string markup) Parameters Type Name Description System.String markup The markup to parse. Returns Type Description INodeList The . Implements System.IDisposable Extension Methods JsRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.DragEventDispatchExtensions.html": {
    "href": "api/Bunit.DragEventDispatchExtensions.html",
    "title": "Class DragEventDispatchExtensions | bUnit",
    "keywords": "Class DragEventDispatchExtensions Drag event dispatch helper extension methods. Inheritance System.Object DragEventDispatchExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.dll Syntax public static class DragEventDispatchExtensions Methods | Improve this Doc View Source Drag(IElement, DragEventArgs) Raises the @ondrag event on element , passing the provided eventArgs to the event handler. Declaration public static void Drag(this IElement element, DragEventArgs eventArgs) Parameters Type Name Description IElement element The element to raise the event on. DragEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source Drag(IElement, Int64, Double, Double, Double, Double, Int64, Int64, Boolean, Boolean, Boolean, Boolean, String, Nullable<DataTransfer>) Raises the @ondrag event on element , passing the provided properties to the event handler via a object. Declaration public static void Drag(this IElement element, long detail = 0L, double screenX = 0, double screenY = 0, double clientX = 0, double clientY = 0, long button = 0L, long buttons = 0L, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null, DataTransfer? dataTransfer = default(DataTransfer? )) Parameters Type Name Description IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. System.Double screenX The X coordinate of the mouse pointer in global (screen) coordinates. System.Double screenY The Y coordinate of the mouse pointer in global (screen) coordinates. System.Double clientX The X coordinate of the mouse pointer in local (DOM content) coordinates. System.Double clientY The Y coordinate of the mouse pointer in local (DOM content) coordinates. System.Int64 button The button number that was pressed when the mouse event was fired: Left button=0, middle button=1 (if present), right button=2. For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left. System.Int64 buttons The buttons being pressed when the mouse event was fired: Left button=1, Right button=2, Middle (wheel) button=4, 4th button (typically, \"Browser Back\" button)=8, 5th button (typically, \"Browser Forward\" button)=16. If two or more buttons are pressed, returns the logical sum of the values. E.g., if Left button and Right button are pressed, returns 3 (=1 | 2). System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. System.Nullable < DataTransfer > dataTransfer The data that underlies a drag-and-drop operation, known as the drag data store. See . | Improve this Doc View Source DragAsync(IElement, DragEventArgs) Raises the @ondrag event on element , passing the provided eventArgs to the event handler. Declaration public static Task DragAsync(this IElement element, DragEventArgs eventArgs) Parameters Type Name Description IElement element DragEventArgs eventArgs Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source DragEnd(IElement, DragEventArgs) Raises the @ondragend event on element , passing the provided eventArgs to the event handler. Declaration public static void DragEnd(this IElement element, DragEventArgs eventArgs) Parameters Type Name Description IElement element The element to raise the event on. DragEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source DragEnd(IElement, Int64, Double, Double, Double, Double, Int64, Int64, Boolean, Boolean, Boolean, Boolean, String, Nullable<DataTransfer>) Raises the @ondragend event on element , passing the provided properties to the event handler via a object. Declaration public static void DragEnd(this IElement element, long detail = 0L, double screenX = 0, double screenY = 0, double clientX = 0, double clientY = 0, long button = 0L, long buttons = 0L, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null, DataTransfer? dataTransfer = default(DataTransfer? )) Parameters Type Name Description IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. System.Double screenX The X coordinate of the mouse pointer in global (screen) coordinates. System.Double screenY The Y coordinate of the mouse pointer in global (screen) coordinates. System.Double clientX The X coordinate of the mouse pointer in local (DOM content) coordinates. System.Double clientY The Y coordinate of the mouse pointer in local (DOM content) coordinates. System.Int64 button The button number that was pressed when the mouse event was fired: Left button=0, middle button=1 (if present), right button=2. For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left. System.Int64 buttons The buttons being pressed when the mouse event was fired: Left button=1, Right button=2, Middle (wheel) button=4, 4th button (typically, \"Browser Back\" button)=8, 5th button (typically, \"Browser Forward\" button)=16. If two or more buttons are pressed, returns the logical sum of the values. E.g., if Left button and Right button are pressed, returns 3 (=1 | 2). System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. System.Nullable < DataTransfer > dataTransfer The data that underlies a drag-and-drop operation, known as the drag data store. See . | Improve this Doc View Source DragEndAsync(IElement, DragEventArgs) Raises the @ondragend event on element , passing the provided eventArgs to the event handler. Declaration public static Task DragEndAsync(this IElement element, DragEventArgs eventArgs) Parameters Type Name Description IElement element DragEventArgs eventArgs Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source DragEnter(IElement, DragEventArgs) Raises the @ondragenter event on element , passing the provided eventArgs to the event handler. Declaration public static void DragEnter(this IElement element, DragEventArgs eventArgs) Parameters Type Name Description IElement element The element to raise the event on. DragEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source DragEnter(IElement, Int64, Double, Double, Double, Double, Int64, Int64, Boolean, Boolean, Boolean, Boolean, String, Nullable<DataTransfer>) Raises the @ondragenter event on element , passing the provided properties to the event handler via a object. Declaration public static void DragEnter(this IElement element, long detail = 0L, double screenX = 0, double screenY = 0, double clientX = 0, double clientY = 0, long button = 0L, long buttons = 0L, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null, DataTransfer? dataTransfer = default(DataTransfer? )) Parameters Type Name Description IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. System.Double screenX The X coordinate of the mouse pointer in global (screen) coordinates. System.Double screenY The Y coordinate of the mouse pointer in global (screen) coordinates. System.Double clientX The X coordinate of the mouse pointer in local (DOM content) coordinates. System.Double clientY The Y coordinate of the mouse pointer in local (DOM content) coordinates. System.Int64 button The button number that was pressed when the mouse event was fired: Left button=0, middle button=1 (if present), right button=2. For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left. System.Int64 buttons The buttons being pressed when the mouse event was fired: Left button=1, Right button=2, Middle (wheel) button=4, 4th button (typically, \"Browser Back\" button)=8, 5th button (typically, \"Browser Forward\" button)=16. If two or more buttons are pressed, returns the logical sum of the values. E.g., if Left button and Right button are pressed, returns 3 (=1 | 2). System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. System.Nullable < DataTransfer > dataTransfer The data that underlies a drag-and-drop operation, known as the drag data store. See . | Improve this Doc View Source DragEnterAsync(IElement, DragEventArgs) Raises the @ondragenter event on element , passing the provided eventArgs to the event handler. Declaration public static Task DragEnterAsync(this IElement element, DragEventArgs eventArgs) Parameters Type Name Description IElement element DragEventArgs eventArgs Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source DragLeave(IElement, DragEventArgs) Raises the @ondragleave event on element , passing the provided eventArgs to the event handler. Declaration public static void DragLeave(this IElement element, DragEventArgs eventArgs) Parameters Type Name Description IElement element The element to raise the event on. DragEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source DragLeave(IElement, Int64, Double, Double, Double, Double, Int64, Int64, Boolean, Boolean, Boolean, Boolean, String, Nullable<DataTransfer>) Raises the @ondragleave event on element , passing the provided properties to the event handler via a object. Declaration public static void DragLeave(this IElement element, long detail = 0L, double screenX = 0, double screenY = 0, double clientX = 0, double clientY = 0, long button = 0L, long buttons = 0L, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null, DataTransfer? dataTransfer = default(DataTransfer? )) Parameters Type Name Description IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. System.Double screenX The X coordinate of the mouse pointer in global (screen) coordinates. System.Double screenY The Y coordinate of the mouse pointer in global (screen) coordinates. System.Double clientX The X coordinate of the mouse pointer in local (DOM content) coordinates. System.Double clientY The Y coordinate of the mouse pointer in local (DOM content) coordinates. System.Int64 button The button number that was pressed when the mouse event was fired: Left button=0, middle button=1 (if present), right button=2. For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left. System.Int64 buttons The buttons being pressed when the mouse event was fired: Left button=1, Right button=2, Middle (wheel) button=4, 4th button (typically, \"Browser Back\" button)=8, 5th button (typically, \"Browser Forward\" button)=16. If two or more buttons are pressed, returns the logical sum of the values. E.g., if Left button and Right button are pressed, returns 3 (=1 | 2). System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. System.Nullable < DataTransfer > dataTransfer The data that underlies a drag-and-drop operation, known as the drag data store. See . | Improve this Doc View Source DragLeaveAsync(IElement, DragEventArgs) Raises the @ondragleave event on element , passing the provided eventArgs to the event handler. Declaration public static Task DragLeaveAsync(this IElement element, DragEventArgs eventArgs) Parameters Type Name Description IElement element DragEventArgs eventArgs Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source DragOver(IElement, DragEventArgs) Raises the @ondragover event on element , passing the provided eventArgs to the event handler. Declaration public static void DragOver(this IElement element, DragEventArgs eventArgs) Parameters Type Name Description IElement element The element to raise the event on. DragEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source DragOver(IElement, Int64, Double, Double, Double, Double, Int64, Int64, Boolean, Boolean, Boolean, Boolean, String, Nullable<DataTransfer>) Raises the @ondragover event on element , passing the provided properties to the event handler via a object. Declaration public static void DragOver(this IElement element, long detail = 0L, double screenX = 0, double screenY = 0, double clientX = 0, double clientY = 0, long button = 0L, long buttons = 0L, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null, DataTransfer? dataTransfer = default(DataTransfer? )) Parameters Type Name Description IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. System.Double screenX The X coordinate of the mouse pointer in global (screen) coordinates. System.Double screenY The Y coordinate of the mouse pointer in global (screen) coordinates. System.Double clientX The X coordinate of the mouse pointer in local (DOM content) coordinates. System.Double clientY The Y coordinate of the mouse pointer in local (DOM content) coordinates. System.Int64 button The button number that was pressed when the mouse event was fired: Left button=0, middle button=1 (if present), right button=2. For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left. System.Int64 buttons The buttons being pressed when the mouse event was fired: Left button=1, Right button=2, Middle (wheel) button=4, 4th button (typically, \"Browser Back\" button)=8, 5th button (typically, \"Browser Forward\" button)=16. If two or more buttons are pressed, returns the logical sum of the values. E.g., if Left button and Right button are pressed, returns 3 (=1 | 2). System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. System.Nullable < DataTransfer > dataTransfer The data that underlies a drag-and-drop operation, known as the drag data store. See . | Improve this Doc View Source DragOverAsync(IElement, DragEventArgs) Raises the @ondragover event on element , passing the provided eventArgs to the event handler. Declaration public static Task DragOverAsync(this IElement element, DragEventArgs eventArgs) Parameters Type Name Description IElement element DragEventArgs eventArgs Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source DragStart(IElement, DragEventArgs) Raises the @ondragstart event on element , passing the provided eventArgs to the event handler. Declaration public static void DragStart(this IElement element, DragEventArgs eventArgs) Parameters Type Name Description IElement element The element to raise the event on. DragEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source DragStart(IElement, Int64, Double, Double, Double, Double, Int64, Int64, Boolean, Boolean, Boolean, Boolean, String, Nullable<DataTransfer>) Raises the @ondragstart event on element , passing the provided properties to the event handler via a object. Declaration public static void DragStart(this IElement element, long detail = 0L, double screenX = 0, double screenY = 0, double clientX = 0, double clientY = 0, long button = 0L, long buttons = 0L, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null, DataTransfer? dataTransfer = default(DataTransfer? )) Parameters Type Name Description IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. System.Double screenX The X coordinate of the mouse pointer in global (screen) coordinates. System.Double screenY The Y coordinate of the mouse pointer in global (screen) coordinates. System.Double clientX The X coordinate of the mouse pointer in local (DOM content) coordinates. System.Double clientY The Y coordinate of the mouse pointer in local (DOM content) coordinates. System.Int64 button The button number that was pressed when the mouse event was fired: Left button=0, middle button=1 (if present), right button=2. For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left. System.Int64 buttons The buttons being pressed when the mouse event was fired: Left button=1, Right button=2, Middle (wheel) button=4, 4th button (typically, \"Browser Back\" button)=8, 5th button (typically, \"Browser Forward\" button)=16. If two or more buttons are pressed, returns the logical sum of the values. E.g., if Left button and Right button are pressed, returns 3 (=1 | 2). System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. System.Nullable < DataTransfer > dataTransfer The data that underlies a drag-and-drop operation, known as the drag data store. See . | Improve this Doc View Source DragStartAsync(IElement, DragEventArgs) Raises the @ondragstart event on element , passing the provided eventArgs to the event handler. Declaration public static Task DragStartAsync(this IElement element, DragEventArgs eventArgs) Parameters Type Name Description IElement element DragEventArgs eventArgs Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source Drop(IElement, DragEventArgs) Raises the @ondrop event on element , passing the provided eventArgs to the event handler. Declaration public static void Drop(this IElement element, DragEventArgs eventArgs) Parameters Type Name Description IElement element The element to raise the event on. DragEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source Drop(IElement, Int64, Double, Double, Double, Double, Int64, Int64, Boolean, Boolean, Boolean, Boolean, String, Nullable<DataTransfer>) Raises the @ondrop event on element , passing the provided properties to the event handler via a object. Declaration public static void Drop(this IElement element, long detail = 0L, double screenX = 0, double screenY = 0, double clientX = 0, double clientY = 0, long button = 0L, long buttons = 0L, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null, DataTransfer? dataTransfer = default(DataTransfer? )) Parameters Type Name Description IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. System.Double screenX The X coordinate of the mouse pointer in global (screen) coordinates. System.Double screenY The Y coordinate of the mouse pointer in global (screen) coordinates. System.Double clientX The X coordinate of the mouse pointer in local (DOM content) coordinates. System.Double clientY The Y coordinate of the mouse pointer in local (DOM content) coordinates. System.Int64 button The button number that was pressed when the mouse event was fired: Left button=0, middle button=1 (if present), right button=2. For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left. System.Int64 buttons The buttons being pressed when the mouse event was fired: Left button=1, Right button=2, Middle (wheel) button=4, 4th button (typically, \"Browser Back\" button)=8, 5th button (typically, \"Browser Forward\" button)=16. If two or more buttons are pressed, returns the logical sum of the values. E.g., if Left button and Right button are pressed, returns 3 (=1 | 2). System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. System.Nullable < DataTransfer > dataTransfer The data that underlies a drag-and-drop operation, known as the drag data store. See . | Improve this Doc View Source DropAsync(IElement, DragEventArgs) Raises the @ondrop event on element , passing the provided eventArgs to the event handler. Declaration public static Task DropAsync(this IElement element, DragEventArgs eventArgs) Parameters Type Name Description IElement element DragEventArgs eventArgs Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done."
  },
  "api/Bunit.ElementNotFoundException.html": {
    "href": "api/Bunit.ElementNotFoundException.html",
    "title": "Class ElementNotFoundException | bUnit",
    "keywords": "Class ElementNotFoundException Represents a failure to find an element in the searched target using a css selector. Inheritance System.Object System.Exception ElementNotFoundException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Bunit Assembly : Bunit.dll Syntax public class ElementNotFoundException : Exception, ISerializable Constructors | Improve this Doc View Source ElementNotFoundException() Declaration public ElementNotFoundException() | Improve this Doc View Source ElementNotFoundException(String) Declaration public ElementNotFoundException(string cssSelector) Parameters Type Name Description System.String cssSelector | Improve this Doc View Source ElementNotFoundException(String, Exception) Declaration public ElementNotFoundException(string message, Exception innerException) Parameters Type Name Description System.String message System.Exception innerException Properties | Improve this Doc View Source CssSelector The css selector used to search with. Declaration public string CssSelector { get; } Property Value Type Description System.String Implements System.Runtime.Serialization.ISerializable Extension Methods JsRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.ElementRemovedException.html": {
    "href": "api/Bunit.ElementRemovedException.html",
    "title": "Class ElementRemovedException | bUnit",
    "keywords": "Class ElementRemovedException Represents an exception that is thrown when a wrapped element is no longer available in the DOM tree. Inheritance System.Object System.Exception ElementRemovedException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Bunit Assembly : Bunit.dll Syntax public class ElementRemovedException : Exception, ISerializable Constructors | Improve this Doc View Source ElementRemovedException() Declaration public ElementRemovedException() Implements System.Runtime.Serialization.ISerializable Extension Methods JsRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.ExpectedOutput.html": {
    "href": "api/Bunit.ExpectedOutput.html",
    "title": "Class ExpectedOutput | bUnit",
    "keywords": "Class ExpectedOutput Represents the expected output in a snapshot test ( SnapshotTest ). Inheritance System.Object FragmentBase ExpectedOutput Inherited Members FragmentBase.ChildContent FragmentBase.Attach(RenderHandle) FragmentBase.SetParametersAsync(ParameterView) Namespace : Bunit Assembly : Bunit.dll Syntax public class ExpectedOutput : FragmentBase Extension Methods JsRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.Extensions.Xunit.html": {
    "href": "api/Bunit.Extensions.Xunit.html",
    "title": "Namespace Bunit.Extensions.Xunit | bUnit",
    "keywords": "Namespace Bunit.Extensions.Xunit Classes XunitLogger Represents a that will write logs to the provided . XunitLoggerFactory Represents a xUnit logger factory XunitLoggerProvider Represents an for logging to XunitLogger ."
  },
  "api/Bunit.Extensions.Xunit.XunitLogger.html": {
    "href": "api/Bunit.Extensions.Xunit.XunitLogger.html",
    "title": "Class XunitLogger | bUnit",
    "keywords": "Class XunitLogger Represents a that will write logs to the provided . Inheritance System.Object XunitLogger Namespace : Bunit.Extensions.Xunit Assembly : Bunit.dll Syntax public class XunitLogger : ILogger Constructors | Improve this Doc View Source XunitLogger(ITestOutputHelper, String, LogLevel) Declaration public XunitLogger(ITestOutputHelper output, string name, LogLevel minimumLogLevel) Parameters Type Name Description ITestOutputHelper output System.String name LogLevel minimumLogLevel Methods | Improve this Doc View Source BeginScope<TState>(TState) Declaration public IDisposable BeginScope<TState>(TState state) Parameters Type Name Description TState state Returns Type Description System.IDisposable Type Parameters Name Description TState | Improve this Doc View Source IsEnabled(LogLevel) Declaration public bool IsEnabled(LogLevel logLevel) Parameters Type Name Description LogLevel logLevel Returns Type Description System.Boolean | Improve this Doc View Source Log<TState>(LogLevel, EventId, TState, Exception, Func<TState, Exception, String>) Declaration public void Log<TState>(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func<TState, Exception, string> formatter) Parameters Type Name Description LogLevel logLevel EventId eventId TState state System.Exception exception System.Func <TState, System.Exception , System.String > formatter Type Parameters Name Description TState Extension Methods JsRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.Extensions.Xunit.XunitLoggerFactory.html": {
    "href": "api/Bunit.Extensions.Xunit.XunitLoggerFactory.html",
    "title": "Class XunitLoggerFactory | bUnit",
    "keywords": "Class XunitLoggerFactory Represents a xUnit logger factory Inheritance System.Object XunitLoggerFactory Namespace : Bunit.Extensions.Xunit Assembly : Bunit.dll Syntax public class XunitLoggerFactory : LoggerFactory Constructors | Improve this Doc View Source XunitLoggerFactory(XunitLoggerProvider) Declaration public XunitLoggerFactory(XunitLoggerProvider xunitLoggerProvider) Parameters Type Name Description XunitLoggerProvider xunitLoggerProvider Extension Methods JsRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.Extensions.Xunit.XunitLoggerProvider.html": {
    "href": "api/Bunit.Extensions.Xunit.XunitLoggerProvider.html",
    "title": "Class XunitLoggerProvider | bUnit",
    "keywords": "Class XunitLoggerProvider Represents an for logging to XunitLogger . Inheritance System.Object XunitLoggerProvider Namespace : Bunit.Extensions.Xunit Assembly : Bunit.dll Syntax public sealed class XunitLoggerProvider : ILoggerProvider Constructors | Improve this Doc View Source XunitLoggerProvider(ITestOutputHelper, LogLevel) Creates an instance of the XunitLoggerProvider . Declaration public XunitLoggerProvider(ITestOutputHelper output, LogLevel minimumLogLevel = null) Parameters Type Name Description ITestOutputHelper output LogLevel minimumLogLevel Methods | Improve this Doc View Source CreateLogger(String) Declaration public ILogger CreateLogger(string categoryName) Parameters Type Name Description System.String categoryName Returns Type Description ILogger | Improve this Doc View Source Dispose() Declaration public void Dispose() Extension Methods JsRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.Fixture.html": {
    "href": "api/Bunit.Fixture.html",
    "title": "Class Fixture | bUnit",
    "keywords": "Class Fixture Represents a single fixture in a Razor based test. Used to define the ComponentUnderTest and any Fragment 's you might need during testing, and assert against them in the Test methods. Inheritance System.Object FragmentBase Fixture Inherited Members FragmentBase.ChildContent FragmentBase.Attach(RenderHandle) FragmentBase.SetParametersAsync(ParameterView) Namespace : Bunit Assembly : Bunit.dll Syntax public class Fixture : FragmentBase Properties | Improve this Doc View Source Description A description or name for the test that will be displayed if the test fails. Declaration public string Description { get; set; } Property Value Type Description System.String | Improve this Doc View Source Setup Gets or sets the setup action to perform before the Test action, TestAsync action and Tests and TestsAsync actions are invoked. Declaration public Action Setup { get; set; } Property Value Type Description System.Action | Improve this Doc View Source SetupAsync Gets or sets the asynchronous setup action to perform before the Test action, TestAsync action and Tests and TestsAsync actions are invoked. Declaration public Func<Task> SetupAsync { get; set; } Property Value Type Description System.Func < System.Threading.Tasks.Task > | Improve this Doc View Source Test Gets or sets the first test action to invoke, after the Setup action has executed (if provided). Use this to assert against the ComponentUnderTest and Fragment 's defined in the Fixture . Declaration public Action Test { get; set; } Property Value Type Description System.Action | Improve this Doc View Source TestAsync Gets or sets the first test action to invoke, after the SetupAsync action has executed (if provided). Use this to assert against the ComponentUnderTest and Fragment 's defined in the Fixture . Declaration public Func<Task> TestAsync { get; set; } Property Value Type Description System.Func < System.Threading.Tasks.Task > | Improve this Doc View Source Tests Gets or sets the test actions to invoke, one at the time, in the order they are placed into the collection, after the Setup action and the Test action has executed (if provided). Use this to assert against the ComponentUnderTest and Fragment 's defined in the Fixture . Declaration public IReadOnlyCollection<Action> Tests { get; set; } Property Value Type Description System.Collections.Generic.IReadOnlyCollection < System.Action > | Improve this Doc View Source TestsAsync Gets or sets the test actions to invoke, one at the time, in the order they are placed into the collection, after the SetupAsync action and the TestAsync action has executed (if provided). Use this to assert against the ComponentUnderTest and Fragment 's defined in the Fixture . Declaration public IReadOnlyCollection<Func<Task>> TestsAsync { get; set; } Property Value Type Description System.Collections.Generic.IReadOnlyCollection < System.Func < System.Threading.Tasks.Task >> Extension Methods JsRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.FocusEventDispatchExtensions.html": {
    "href": "api/Bunit.FocusEventDispatchExtensions.html",
    "title": "Class FocusEventDispatchExtensions | bUnit",
    "keywords": "Class FocusEventDispatchExtensions Focus event dispatch helper extension methods. Inheritance System.Object FocusEventDispatchExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.dll Syntax public static class FocusEventDispatchExtensions Methods | Improve this Doc View Source Blur(IElement, FocusEventArgs) Raises the @onblur event on element , passing the provided event arguments to the event handler. Declaration public static void Blur(this IElement element, FocusEventArgs eventArgs) Parameters Type Name Description IElement element The element to raise the event on. FocusEventArgs eventArgs The event arguments to passs the event handler. | Improve this Doc View Source Blur(IElement, String) Raises the @onblur event on element , passing the provided properties to the event handler via a object Declaration public static void Blur(this IElement element, string type = null) Parameters Type Name Description IElement element The element to raise the event on. System.String type The type of the event. | Improve this Doc View Source BlurAsync(IElement, FocusEventArgs) Raises the @onblur event on element , passing the provided event arguments to the event handler. Declaration public static Task BlurAsync(this IElement element, FocusEventArgs eventArgs) Parameters Type Name Description IElement element The element to raise the event on. FocusEventArgs eventArgs The event arguments to passs the event handler. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source Focus(IElement, FocusEventArgs) Raises the @onfocus event on element , passing the provided event arguments to the event handler. Declaration public static void Focus(this IElement element, FocusEventArgs eventArgs) Parameters Type Name Description IElement element The element to raise the event on. FocusEventArgs eventArgs The event arguments to passs the event handler. | Improve this Doc View Source Focus(IElement, String) Raises the @onfocus event on element , passing the provided properties to the event handler via a object Declaration public static void Focus(this IElement element, string type = null) Parameters Type Name Description IElement element The element to raise the event on. System.String type The type of the event. | Improve this Doc View Source FocusAsync(IElement, FocusEventArgs) Raises the @onfocus event on element , passing the provided event arguments to the event handler. Declaration public static Task FocusAsync(this IElement element, FocusEventArgs eventArgs) Parameters Type Name Description IElement element The element to raise the event on. FocusEventArgs eventArgs The event arguments to passs the event handler. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source FocusIn(IElement, FocusEventArgs) Raises the @onfocusin event on element , passing the provided event arguments to the event handler. Declaration public static void FocusIn(this IElement element, FocusEventArgs eventArgs) Parameters Type Name Description IElement element The element to raise the event on. FocusEventArgs eventArgs The event arguments to passs the event handler. | Improve this Doc View Source FocusIn(IElement, String) Raises the @onfocusin event on element , passing the provided properties to the event handler via a object Declaration public static void FocusIn(this IElement element, string type = null) Parameters Type Name Description IElement element The element to raise the event on. System.String type The type of the event. | Improve this Doc View Source FocusInAsync(IElement, FocusEventArgs) Raises the @onfocusin event on element , passing the provided event arguments to the event handler. Declaration public static Task FocusInAsync(this IElement element, FocusEventArgs eventArgs) Parameters Type Name Description IElement element The element to raise the event on. FocusEventArgs eventArgs The event arguments to passs the event handler. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source FocusOut(IElement, FocusEventArgs) Raises the @onfocusout event on element , passing the provided event arguments to the event handler. Declaration public static void FocusOut(this IElement element, FocusEventArgs eventArgs) Parameters Type Name Description IElement element The element to raise the event on. FocusEventArgs eventArgs The event arguments to passs the event handler. | Improve this Doc View Source FocusOut(IElement, String) Raises the @onfocusout event on element , passing the provided properties to the event handler via a object Declaration public static void FocusOut(this IElement element, string type = null) Parameters Type Name Description IElement element The element to raise the event on. System.String type The type of the event. | Improve this Doc View Source FocusOutAsync(IElement, FocusEventArgs) Raises the @onfocusout event on element , passing the provided event arguments to the event handler. Declaration public static Task FocusOutAsync(this IElement element, FocusEventArgs eventArgs) Parameters Type Name Description IElement element The element to raise the event on. FocusEventArgs eventArgs The event arguments to passs the event handler. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done."
  },
  "api/Bunit.Fragment.html": {
    "href": "api/Bunit.Fragment.html",
    "title": "Class Fragment | bUnit",
    "keywords": "Class Fragment Represents a component that can be added inside a Fixture , whose content can be accessed in Razor-based test. Inheritance System.Object FragmentBase Fragment Inherited Members FragmentBase.ChildContent FragmentBase.Attach(RenderHandle) FragmentBase.SetParametersAsync(ParameterView) Namespace : Bunit Assembly : Bunit.dll Syntax public class Fragment : FragmentBase Properties | Improve this Doc View Source Id Gets or sets the id of the fragment. The Id can be used to retrieve the fragment from a GetFragment(String) . Declaration public string Id { get; set; } Property Value Type Description System.String Extension Methods JsRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.FragmentBase.html": {
    "href": "api/Bunit.FragmentBase.html",
    "title": "Class FragmentBase | bUnit",
    "keywords": "Class FragmentBase Represents a fragment that can be used in SnapshotTest or Fixture . Inheritance System.Object FragmentBase ComponentUnderTest ExpectedOutput Fixture Fragment SnapshotTest TestInput Namespace : Bunit Assembly : Bunit.dll Syntax public abstract class FragmentBase : IComponent Properties | Improve this Doc View Source ChildContent Gets or sets the child content of the fragment. Declaration public RenderFragment ChildContent { get; set; } Property Value Type Description RenderFragment Methods | Improve this Doc View Source Attach(RenderHandle) Declaration public void Attach(RenderHandle renderHandle) Parameters Type Name Description RenderHandle renderHandle | Improve this Doc View Source SetParametersAsync(ParameterView) Declaration public virtual Task SetParametersAsync(ParameterView parameters) Parameters Type Name Description ParameterView parameters Returns Type Description System.Threading.Tasks.Task Extension Methods JsRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.GeneralEventDispatchExtensions.html": {
    "href": "api/Bunit.GeneralEventDispatchExtensions.html",
    "title": "Class GeneralEventDispatchExtensions | bUnit",
    "keywords": "Class GeneralEventDispatchExtensions General event dispatch helper extension methods. Inheritance System.Object GeneralEventDispatchExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.dll Syntax public static class GeneralEventDispatchExtensions Methods | Improve this Doc View Source Activate(IElement) Raises the @onactivate event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void Activate(this IElement element) Parameters Type Name Description IElement element The element to raise the event on. | Improve this Doc View Source ActivateAsync(IElement) Raises the @onactivate event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static Task ActivateAsync(this IElement element) Parameters Type Name Description IElement element The element to raise the event on. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source BeforeActivate(IElement) Raises the @onbeforeactivate event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void BeforeActivate(this IElement element) Parameters Type Name Description IElement element The element to raise the event on. | Improve this Doc View Source BeforeActivateAsync(IElement) Raises the @onbeforeactivate event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static Task BeforeActivateAsync(this IElement element) Parameters Type Name Description IElement element The element to raise the event on. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source BeforeDeactivate(IElement) Raises the @onbeforedeactivate event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void BeforeDeactivate(this IElement element) Parameters Type Name Description IElement element The element to raise the event on. | Improve this Doc View Source BeforeDeactivateAsync(IElement) Raises the @onbeforedeactivate event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static Task BeforeDeactivateAsync(this IElement element) Parameters Type Name Description IElement element The element to raise the event on. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source Deactivate(IElement) Raises the @ondeactivate event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void Deactivate(this IElement element) Parameters Type Name Description IElement element The element to raise the event on. | Improve this Doc View Source DeactivateAsync(IElement) Raises the @ondeactivate event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static Task DeactivateAsync(this IElement element) Parameters Type Name Description IElement element The element to raise the event on. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source Ended(IElement) Raises the @onended event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void Ended(this IElement element) Parameters Type Name Description IElement element The element to raise the event on. | Improve this Doc View Source EndedAsync(IElement) Raises the @onended event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static Task EndedAsync(this IElement element) Parameters Type Name Description IElement element The element to raise the event on. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source FullscreenChange(IElement) Raises the @onfullscreenchange event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void FullscreenChange(this IElement element) Parameters Type Name Description IElement element The element to raise the event on. | Improve this Doc View Source FullscreenChangeAsync(IElement) Raises the @onfullscreenchange event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static Task FullscreenChangeAsync(this IElement element) Parameters Type Name Description IElement element The element to raise the event on. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source FullscreenError(IElement) Raises the @onfullscreenerror event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void FullscreenError(this IElement element) Parameters Type Name Description IElement element The element to raise the event on. | Improve this Doc View Source FullscreenErrorAsync(IElement) Raises the @onfullscreenerror event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static Task FullscreenErrorAsync(this IElement element) Parameters Type Name Description IElement element The element to raise the event on. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source LoadedData(IElement) Raises the @onloadeddata event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void LoadedData(this IElement element) Parameters Type Name Description IElement element The element to raise the event on. | Improve this Doc View Source LoadedDataAsync(IElement) Raises the @onloadeddata event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static Task LoadedDataAsync(this IElement element) Parameters Type Name Description IElement element The element to raise the event on. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source LoadedMetadata(IElement) Raises the @onloadedmetadata event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void LoadedMetadata(this IElement element) Parameters Type Name Description IElement element The element to raise the event on. | Improve this Doc View Source LoadedMetadataAsync(IElement) Raises the @onloadedmetadata event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static Task LoadedMetadataAsync(this IElement element) Parameters Type Name Description IElement element The element to raise the event on. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source PointerlockChange(IElement) Raises the @onpointerlockchange event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void PointerlockChange(this IElement element) Parameters Type Name Description IElement element The element to raise the event on. | Improve this Doc View Source PointerlockChangeAsync(IElement) Raises the @onpointerlockchange event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static Task PointerlockChangeAsync(this IElement element) Parameters Type Name Description IElement element The element to raise the event on. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source PointerlockError(IElement) Raises the @onpointerlockerror event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void PointerlockError(this IElement element) Parameters Type Name Description IElement element The element to raise the event on. | Improve this Doc View Source PointerlockErrorAsync(IElement) Raises the @onpointerlockerror event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static Task PointerlockErrorAsync(this IElement element) Parameters Type Name Description IElement element The element to raise the event on. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source ReadystateChange(IElement) Raises the @onreadystatechange event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void ReadystateChange(this IElement element) Parameters Type Name Description IElement element The element to raise the event on. | Improve this Doc View Source ReadystateChangeAsync(IElement) Raises the @onreadystatechange event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static Task ReadystateChangeAsync(this IElement element) Parameters Type Name Description IElement element The element to raise the event on. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source Scroll(IElement) Raises the @onscroll event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void Scroll(this IElement element) Parameters Type Name Description IElement element The element to raise the event on. | Improve this Doc View Source ScrollAsync(IElement) Raises the @onscroll event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static Task ScrollAsync(this IElement element) Parameters Type Name Description IElement element The element to raise the event on. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source TriggerEventAsync(IElement, String, EventArgs) Raises the event eventName on the element element passing the eventArgs to the event handler. Declaration public static Task TriggerEventAsync(this IElement element, string eventName, EventArgs eventArgs) Parameters Type Name Description IElement element The element to raise the event on. System.String eventName The name of the event to raise (using on-form, e.g. onclick ). System.EventArgs eventArgs The event arguments to pass to the event handler Returns Type Description System.Threading.Tasks.Task"
  },
  "api/Bunit.html": {
    "href": "api/Bunit.html",
    "title": "Namespace Bunit | bUnit",
    "keywords": "Namespace Bunit Classes ClipboardEventDispatchExtensions Clipboard event dispatch helper extension methods. CollectionAssertExtensions Collection test assertions CompareToExtensions Extension methods that allows different rendered fragments to be compared to others or strings. ComponentChangeEventSubscriber Represents a subscriber to RenderEvent s, published by the TestRenderer . ComponentNotFoundException Represents an exception that is thrown when a search for a component in a IRenderedFragment did not succeed. ComponentTestFixture Base class for test classes that contains XUnit Razor component tests. ComponentUnderTest Represents a component that can be added inside a Fixture , where a component under test can be defined as the child content. ConcurrentRenderEventSubscriber Represents a subscriber to RenderEvent s, published by the TestRenderer . ContainerComponent Represents a Razor component that can be used to render and re-render a render fragment into. DiffAssertExtensions A collection of assert extensions and generic assert extensions DragEventDispatchExtensions Drag event dispatch helper extension methods. ElementNotFoundException Represents a failure to find an element in the searched target using a css selector. ElementRemovedException Represents an exception that is thrown when a wrapped element is no longer available in the DOM tree. ExpectedOutput Represents the expected output in a snapshot test ( SnapshotTest ). Fixture Represents a single fixture in a Razor based test. Used to define the ComponentUnderTest and any Fragment 's you might need during testing, and assert against them in the Test methods. FocusEventDispatchExtensions Focus event dispatch helper extension methods. Fragment Represents a component that can be added inside a Fixture , whose content can be accessed in Razor-based test. FragmentBase Represents a fragment that can be used in SnapshotTest or Fixture . GeneralEventDispatchExtensions General event dispatch helper extension methods. InputEventDispatchExtensions Input event dispatch helper extension methods. KeyboardEventDispatchExtensions Keyboard event dispatch helper extension methods. MarkupMatchesAssertExtensions Assert helpers for comparing markup MediaEventDispatchExtensions Media event dispatch helper extension methods. MouseEventDispatchExtensions Mouse event dispatch helper extension methods. NodePrintExtensions Helper methods for pretty printing markup from and . PointerEventDispatchExtensions Pointer event dispatch helper extension methods. ProgressEventDispatchExtensions Pointer event dispatch helper extension methods. RazorTestContext A razor test context is a factory that makes it possible to create components under tests, either directly or through components declared in razor code. RenderedFragment Represents a rendered fragment. RenderedFragmentBase Represents an abstract IRenderedFragment with base functionality. RenderedFragmentQueryExtensions Helper methods for querying IRenderedFragment . RenderEvent Represents a render event for a IRenderedFragment or generally from the TestRenderer . RenderWaitingHelperExtensions Helper methods dealing with async rendering during testing. ShouldBeAdditionAssertExtensions A set of addition diff assert extensions ShouldBeRemovalAssertExtensions A set of removal diff assert extensions ShouldBeTextChangeAssertExtensions Verification helpers for text SnapshotTest A component used to create snapshot tests. Snapshot tests takes two sets of child components, a TestInput component for declaring the test input, and an ExpectedOutput component for declaring the expected output, the test input should produce. SnapshotTestContext Represents a test context used in snapshot testing. TestComponentBase Base test class/test runner, that runs Fixtures defined in razor files. TestContext A test context is a factory that makes it possible to create components under tests. TestInput Represents the test input in a snapshot test ( SnapshotTest ). TestRenderer A custom Blazor renderer used when testing Blazor components. TestServiceProvider Represents a System.IServiceProvider and as a single type used for test purposes. TouchEventDispatchExtensions Pointer event dispatch helper extension methods. WaitForAssertionFailedException Represents an exception thrown when the awaited assertion does not pass. WaitForRenderFailedException Represents an exception that is thrown when a render does not happen within the specified wait period. WaitForStateFailedException Represents an exception thrown when the state predicate does not pass or if it throws itself. XunitLoggerExtensions Helper method for registering the xUnit test logger. Structs ComponentParameter Represents a single parameter supplied to an component under test. Interfaces IRazorTestContext A razor test context is a factory that makes it possible to create components under tests, either directly or through components declared in razor code. IRefreshableElementCollection<T> Represents a collection, which queries and finds its elements in an IRenderedFragment , based on a CSS selector. The collection can be refreshed either manually or automatically. IRenderedComponent<TComponent> Represents a rendered component-under-test. IRenderedFragment Represents a rendered fragment. ITestContext A test context is a factory that makes it possible to create components under tests."
  },
  "api/Bunit.InputEventDispatchExtensions.html": {
    "href": "api/Bunit.InputEventDispatchExtensions.html",
    "title": "Class InputEventDispatchExtensions | bUnit",
    "keywords": "Class InputEventDispatchExtensions Input event dispatch helper extension methods. Inheritance System.Object InputEventDispatchExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.dll Syntax public static class InputEventDispatchExtensions Methods | Improve this Doc View Source Change(IElement, ChangeEventArgs) Raises the @onchange event on element , passing the provided eventArgs to the event handler. Declaration public static void Change(this IElement element, ChangeEventArgs eventArgs) Parameters Type Name Description IElement element The element to raise the event on. ChangeEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source Change(IElement, Object) Raises the @onchange event on element , passing the provided properties to the event handler via a object Declaration public static void Change(this IElement element, object value) Parameters Type Name Description IElement element The element to raise the event on. System.Object value The new value | Improve this Doc View Source ChangeAsync(IElement, ChangeEventArgs) Raises the @onchange event on element , passing the provided eventArgs to the event handler. Declaration public static Task ChangeAsync(this IElement element, ChangeEventArgs eventArgs) Parameters Type Name Description IElement element The element to raise the event on. ChangeEventArgs eventArgs The event arguments to pass to the event handler. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source Input(IElement) Raises the @oninput event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void Input(this IElement element) Parameters Type Name Description IElement element The element to raise the event on. | Improve this Doc View Source Input(IElement, ChangeEventArgs) Raises the @oninput event on element , passing the provided eventArgs to the event handler. Declaration public static void Input(this IElement element, ChangeEventArgs eventArgs) Parameters Type Name Description IElement element The element to raise the event on. ChangeEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source Input(IElement, String) Raises the @oninput event on element , passing the provided properties to the event handler via a object Declaration public static void Input(this IElement element, string value) Parameters Type Name Description IElement element The element to raise the event on. System.String value The new value | Improve this Doc View Source InputAsync(IElement) Raises the @oninput event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static Task InputAsync(this IElement element) Parameters Type Name Description IElement element The element to raise the event on. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source InputAsync(IElement, ChangeEventArgs) Raises the @oninput event on element , passing the provided eventArgs to the event handler. Declaration public static Task InputAsync(this IElement element, ChangeEventArgs eventArgs) Parameters Type Name Description IElement element The element to raise the event on. ChangeEventArgs eventArgs The event arguments to pass to the event handler. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source Invalid(IElement) Raises the @oninvalid event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void Invalid(this IElement element) Parameters Type Name Description IElement element The element to raise the event on. | Improve this Doc View Source InvalidAsync(IElement) Raises the @oninvalid event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static Task InvalidAsync(this IElement element) Parameters Type Name Description IElement element The element to raise the event on. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source Reset(IElement) Raises the @onreset event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void Reset(this IElement element) Parameters Type Name Description IElement element The element to raise the event on. | Improve this Doc View Source ResetAsync(IElement) Raises the @onreset event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static Task ResetAsync(this IElement element) Parameters Type Name Description IElement element The element to raise the event on. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source Select(IElement) Raises the @onselect event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void Select(this IElement element) Parameters Type Name Description IElement element The element to raise the event on. | Improve this Doc View Source SelectAsync(IElement) Raises the @onselect event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static Task SelectAsync(this IElement element) Parameters Type Name Description IElement element The element to raise the event on. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source SelectionChange(IElement) Raises the @onselectionchange event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void SelectionChange(this IElement element) Parameters Type Name Description IElement element The element to raise the event on. | Improve this Doc View Source SelectionChangeAsync(IElement) Raises the @onselectionchange event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static Task SelectionChangeAsync(this IElement element) Parameters Type Name Description IElement element The element to raise the event on. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source SelectStart(IElement) Raises the @onselectstart event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void SelectStart(this IElement element) Parameters Type Name Description IElement element The element to raise the event on. | Improve this Doc View Source SelectStartAsync(IElement) Raises the @onselectstart event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static Task SelectStartAsync(this IElement element) Parameters Type Name Description IElement element The element to raise the event on. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source Submit(IElement) Raises the @onsubmit event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void Submit(this IElement element) Parameters Type Name Description IElement element The element to raise the event on. | Improve this Doc View Source SubmitAsync(IElement) Raises the @onsubmit event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static Task SubmitAsync(this IElement element) Parameters Type Name Description IElement element The element to raise the event on. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done."
  },
  "api/Bunit.IRazorTestContext.html": {
    "href": "api/Bunit.IRazorTestContext.html",
    "title": "Interface IRazorTestContext | bUnit",
    "keywords": "Interface IRazorTestContext A razor test context is a factory that makes it possible to create components under tests, either directly or through components declared in razor code. Inherited Members ITestContext.Services ITestContext.Renderer ITestContext.CreateNodes(String) ITestContext.RenderComponent<TComponent>(ComponentParameter[]) System.IDisposable.Dispose() Namespace : Bunit Assembly : Bunit.dll Syntax public interface IRazorTestContext : ITestContext, IDisposable Methods | Improve this Doc View Source GetComponentUnderTest() Gets (and renders) the markup/component defined in the <Fixture><ComponentUnderTest>...<ComponentUnderTest/><Fixture/> element. The HTML/component is only rendered the first this method is called. Declaration IRenderedFragment GetComponentUnderTest() Returns Type Description IRenderedFragment A IRenderedFragment | Improve this Doc View Source GetComponentUnderTest<TComponent>() Gets (and renders) the component of type TComponent defined in the <Fixture><ComponentUnderTest>...<ComponentUnderTest/><Fixture/> element. The HTML/component is only rendered the first this method is called. Declaration IRenderedComponent<TComponent> GetComponentUnderTest<TComponent>() where TComponent : class, IComponent Returns Type Description IRenderedComponent <TComponent> A IRenderedComponent<TComponent> Type Parameters Name Description TComponent The type of component to render | Improve this Doc View Source GetFragment(String) Gets (and renders) the markup/component defined in the <Fixture><Fragment id=\" id \" >...<Fragment/><Fixture/> element. If id is null/not provided, the component defined in the first <Fragment/> in the <Fixture/> element is returned. The HTML/component is only rendered the first this method is called. Declaration IRenderedFragment GetFragment(string id = null) Parameters Type Name Description System.String id The id of the fragment where the HTML/component is defined in Razor syntax. Returns Type Description IRenderedFragment A IRenderedFragment | Improve this Doc View Source GetFragment<TComponent>(String) Gets (and renders) the component of type TComponent defined in the <Fixture><Fragment id=\" id \" >...<Fragment/><Fixture/> element. If id is null/not provided, the component defined in the first <Fragment/> in the <Fixture/> element is returned. The HTML/component is only rendered the first this method is called. Declaration IRenderedComponent<TComponent> GetFragment<TComponent>(string id = null) where TComponent : class, IComponent Parameters Type Name Description System.String id The id of the fragment where the component is defined in Razor syntax. Returns Type Description IRenderedComponent <TComponent> A IRenderedComponent<TComponent> Type Parameters Name Description TComponent The type of component to render Extension Methods RenderWaitingHelperExtensions.WaitForNextRender(ITestContext, Action, Nullable<TimeSpan>) RenderWaitingHelperExtensions.WaitForState(ITestContext, Func<Boolean>, Nullable<TimeSpan>) RenderWaitingHelperExtensions.WaitForAssertion(ITestContext, Action, Nullable<TimeSpan>) JsRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.IRefreshableElementCollection-1.html": {
    "href": "api/Bunit.IRefreshableElementCollection-1.html",
    "title": "Interface IRefreshableElementCollection<T> | bUnit",
    "keywords": "Interface IRefreshableElementCollection<T> Represents a collection, which queries and finds its elements in an IRenderedFragment , based on a CSS selector. The collection can be refreshed either manually or automatically. Inherited Members System.Collections.Generic.IReadOnlyList<T>.Item[System.Int32] System.Collections.Generic.IReadOnlyCollection<T>.Count System.Collections.Generic.IEnumerable<T>.GetEnumerator() Namespace : Bunit Assembly : Bunit.dll Syntax public interface IRefreshableElementCollection<T> : IReadOnlyList<T>, IReadOnlyCollection<T>, IEnumerable<T>, IEnumerable where T : IElement Type Parameters Name Description T The type of in the collection. Properties | Improve this Doc View Source EnableAutoRefresh Gets or sets whether the collection automatically refreshes when the IRenderedFragment changes. Declaration bool EnableAutoRefresh { get; set; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Refresh() Trigger a refresh of the elements in the collection, by querying the rendered fragments DOM tree. Declaration void Refresh() Extension Methods CollectionAssertExtensions.ShouldAllBe<T>(IEnumerable<T>, Action<T>[]) CollectionAssertExtensions.ShouldAllBe<T>(IEnumerable<T>, Action<T, Int32>[]) JsRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.IRenderedComponent-1.html": {
    "href": "api/Bunit.IRenderedComponent-1.html",
    "title": "Interface IRenderedComponent<TComponent> | bUnit",
    "keywords": "Interface IRenderedComponent<TComponent> Represents a rendered component-under-test. Inherited Members IRenderedFragment.ComponentId IRenderedFragment.RenderEvents IRenderedFragment.FindComponent<TComponent>() IRenderedFragment.FindComponents<TComponent>() IRenderedFragment.TestContext IRenderedFragment.Markup IRenderedFragment.Nodes IRenderedFragment.GetChangesSinceFirstRender() IRenderedFragment.GetChangesSinceSnapshot() IRenderedFragment.SaveSnapshot() Namespace : Bunit Assembly : Bunit.dll Syntax public interface IRenderedComponent<out TComponent> : IRenderedFragment where TComponent : class, IComponent Type Parameters Name Description TComponent The type of the component under test Properties | Improve this Doc View Source Instance Gets the component under test Declaration TComponent Instance { get; } Property Value Type Description TComponent Methods | Improve this Doc View Source Render() Render the component under test again. Declaration void Render() | Improve this Doc View Source SetParametersAndRender(ComponentParameter[]) Render the component under test again. Declaration void SetParametersAndRender(params ComponentParameter[] parameters) Parameters Type Name Description ComponentParameter [] parameters Parameters to pass to the component upon rendered | Improve this Doc View Source SetParametersAndRender(ParameterView) Render the component under test again. Declaration void SetParametersAndRender(ParameterView parameters) Parameters Type Name Description ParameterView parameters Parameters to pass to the component upon rendered Extension Methods CompareToExtensions.CompareTo(IRenderedFragment, String) CompareToExtensions.CompareTo(IRenderedFragment, IRenderedFragment) MarkupMatchesAssertExtensions.MarkupMatches(IRenderedFragment, String, String) MarkupMatchesAssertExtensions.MarkupMatches(IRenderedFragment, IRenderedFragment, String) RenderedFragmentQueryExtensions.Find(IRenderedFragment, String) RenderedFragmentQueryExtensions.FindAll(IRenderedFragment, String, Boolean) RenderWaitingHelperExtensions.WaitForState(IRenderedFragment, Func<Boolean>, Nullable<TimeSpan>) RenderWaitingHelperExtensions.WaitForAssertion(IRenderedFragment, Action, Nullable<TimeSpan>) JsRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.IRenderedFragment.html": {
    "href": "api/Bunit.IRenderedFragment.html",
    "title": "Interface IRenderedFragment | bUnit",
    "keywords": "Interface IRenderedFragment Represents a rendered fragment. Namespace : Bunit Assembly : Bunit.dll Syntax public interface IRenderedFragment Properties | Improve this Doc View Source ComponentId Gets the id of the rendered component or fragment. Declaration int ComponentId { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Markup Gets the HTML markup from the rendered fragment/component. Declaration string Markup { get; } Property Value Type Description System.String | Improve this Doc View Source Nodes Gets the AngleSharp based on the HTML markup from the rendered fragment/component. Declaration INodeList Nodes { get; } Property Value Type Description INodeList | Improve this Doc View Source RenderEvents Gets an System.IObservable<T> which will provide subscribers with RenderEvent s whenever the IRenderedFragment is rendered. Declaration IObservable<RenderEvent> RenderEvents { get; } Property Value Type Description System.IObservable < RenderEvent > | Improve this Doc View Source TestContext Gets the ITestContext which this rendered fragment belongs to. Declaration ITestContext TestContext { get; } Property Value Type Description ITestContext Methods | Improve this Doc View Source FindComponent<TComponent>() Finds the first component of type TComponent in the render tree of this IRenderedFragment . Declaration IRenderedComponent<TComponent> FindComponent<TComponent>() where TComponent : class, IComponent Returns Type Description IRenderedComponent <TComponent> The IRenderedComponent<TComponent> . Type Parameters Name Description TComponent Type of component to find. Exceptions Type Condition ComponentNotFoundException Thrown if a component of type TComponent was not found in the render tree. | Improve this Doc View Source FindComponents<TComponent>() Finds all components of type TComponent in the render tree of this IRenderedFragment . Declaration IReadOnlyList<IRenderedComponent<TComponent>> FindComponents<TComponent>() where TComponent : class, IComponent Returns Type Description System.Collections.Generic.IReadOnlyList < IRenderedComponent <TComponent>> The IRenderedComponent<TComponent> s Type Parameters Name Description TComponent Type of components to find. | Improve this Doc View Source GetChangesSinceFirstRender() Performs a comparison of the markup produced by the initial rendering of the fragment or component under test with the current rendering of the fragment or component under test. Declaration IReadOnlyList<IDiff> GetChangesSinceFirstRender() Returns Type Description System.Collections.Generic.IReadOnlyList < IDiff > A list of differences found. | Improve this Doc View Source GetChangesSinceSnapshot() Performs a comparison of the markup produced by the rendering of the fragment or component under test at the time the SaveSnapshot() was called with the current rendering of the fragment or component under test. Declaration IReadOnlyList<IDiff> GetChangesSinceSnapshot() Returns Type Description System.Collections.Generic.IReadOnlyList < IDiff > A list of differences found. | Improve this Doc View Source SaveSnapshot() Saves the markup from the current rendering of the fragment or component under test. Use the method GetChangesSinceSnapshot() later to get the difference between the snapshot and the rendered markup at that time. Declaration void SaveSnapshot() Extension Methods CompareToExtensions.CompareTo(IRenderedFragment, String) CompareToExtensions.CompareTo(IRenderedFragment, IRenderedFragment) MarkupMatchesAssertExtensions.MarkupMatches(IRenderedFragment, String, String) MarkupMatchesAssertExtensions.MarkupMatches(IRenderedFragment, IRenderedFragment, String) RenderedFragmentQueryExtensions.Find(IRenderedFragment, String) RenderedFragmentQueryExtensions.FindAll(IRenderedFragment, String, Boolean) RenderWaitingHelperExtensions.WaitForState(IRenderedFragment, Func<Boolean>, Nullable<TimeSpan>) RenderWaitingHelperExtensions.WaitForAssertion(IRenderedFragment, Action, Nullable<TimeSpan>) JsRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.ITestContext.html": {
    "href": "api/Bunit.ITestContext.html",
    "title": "Interface ITestContext | bUnit",
    "keywords": "Interface ITestContext A test context is a factory that makes it possible to create components under tests. Inherited Members System.IDisposable.Dispose() Namespace : Bunit Assembly : Bunit.dll Syntax public interface ITestContext : IDisposable Properties | Improve this Doc View Source Renderer Gets the renderer used to render the components and fragments in this test context. Declaration TestRenderer Renderer { get; } Property Value Type Description TestRenderer | Improve this Doc View Source Services Gets the service collection and service provider that is used when a component is rendered by the test context. Declaration TestServiceProvider Services { get; } Property Value Type Description TestServiceProvider Methods | Improve this Doc View Source CreateNodes(String) Parses a markup HTML string using the AngleSharps HTML5 parser and returns a list of nodes. Declaration INodeList CreateNodes(string markup) Parameters Type Name Description System.String markup The markup to parse. Returns Type Description INodeList The . | Improve this Doc View Source RenderComponent<TComponent>(ComponentParameter[]) Instantiates and performs a first render of a component of type TComponent . Declaration IRenderedComponent<TComponent> RenderComponent<TComponent>(params ComponentParameter[] parameters) where TComponent : class, IComponent Parameters Type Name Description ComponentParameter [] parameters Parameters to pass to the component when it is rendered Returns Type Description IRenderedComponent <TComponent> The rendered TComponent Type Parameters Name Description TComponent Type of the component to render Extension Methods RenderWaitingHelperExtensions.WaitForNextRender(ITestContext, Action, Nullable<TimeSpan>) RenderWaitingHelperExtensions.WaitForState(ITestContext, Func<Boolean>, Nullable<TimeSpan>) RenderWaitingHelperExtensions.WaitForAssertion(ITestContext, Action, Nullable<TimeSpan>) JsRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.KeyboardEventDispatchExtensions.html": {
    "href": "api/Bunit.KeyboardEventDispatchExtensions.html",
    "title": "Class KeyboardEventDispatchExtensions | bUnit",
    "keywords": "Class KeyboardEventDispatchExtensions Keyboard event dispatch helper extension methods. Inheritance System.Object KeyboardEventDispatchExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.dll Syntax public static class KeyboardEventDispatchExtensions Methods | Improve this Doc View Source KeyDown(IElement, KeyboardEventArgs) Raises the @onkeydown event on element , passing the provided eventArgs to the event handler. Declaration public static void KeyDown(this IElement element, KeyboardEventArgs eventArgs) Parameters Type Name Description IElement element The element to raise the event on. KeyboardEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source KeyDown(IElement, String, String, Single, Boolean, Boolean, Boolean, Boolean, Boolean, String) Raises the @onkeydown event on element , passing the provided properties to the event handler via a object Declaration public static void KeyDown(this IElement element, string key, string code = null, float location = 0F, bool repeat = false, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null) Parameters Type Name Description IElement element The element to raise the event on. System.String key The key value of the key represented by the event. If the value has a printed representation, this attribute's value is the same as the char attribute. Otherwise, it's one of the key value strings specified in 'Key values'. If the key can't be identified, this is the string \"Unidentified\" System.String code Holds a string that identifies the physical key being pressed. The value is not affected by the current keyboard layout or modifier state, so a particular key will always return the same value. System.Single location The location of the key on the device. System.Boolean repeat true if a key has been depressed long enough to trigger key repetition, otherwise false. System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type The type of the event. | Improve this Doc View Source KeyDownAsync(IElement, KeyboardEventArgs) Raises the @onkeydown event on element , passing the provided eventArgs to the event handler. Declaration public static Task KeyDownAsync(this IElement element, KeyboardEventArgs eventArgs) Parameters Type Name Description IElement element KeyboardEventArgs eventArgs Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source KeyPress(IElement, KeyboardEventArgs) Raises the @onkeypress event on element , passing the provided eventArgs to the event handler. Declaration public static void KeyPress(this IElement element, KeyboardEventArgs eventArgs) Parameters Type Name Description IElement element The element to raise the event on. KeyboardEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source KeyPress(IElement, String, String, Single, Boolean, Boolean, Boolean, Boolean, Boolean, String) Raises the @onkeypress event on element , passing the provided properties to the event handler via a object Declaration public static void KeyPress(this IElement element, string key, string code = null, float location = 0F, bool repeat = false, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null) Parameters Type Name Description IElement element The element to raise the event on. System.String key The key value of the key represented by the event. If the value has a printed representation, this attribute's value is the same as the char attribute. Otherwise, it's one of the key value strings specified in 'Key values'. If the key can't be identified, this is the string \"Unidentified\" System.String code Holds a string that identifies the physical key being pressed. The value is not affected by the current keyboard layout or modifier state, so a particular key will always return the same value. System.Single location The location of the key on the device. System.Boolean repeat true if a key has been depressed long enough to trigger key repetition, otherwise false. System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type The type of the event. | Improve this Doc View Source KeyPressAsync(IElement, KeyboardEventArgs) Raises the @onkeypress event on element , passing the provided eventArgs to the event handler. Declaration public static Task KeyPressAsync(this IElement element, KeyboardEventArgs eventArgs) Parameters Type Name Description IElement element KeyboardEventArgs eventArgs Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source KeyUp(IElement, KeyboardEventArgs) Raises the @onkeyup event on element , passing the provided eventArgs to the event handler. Declaration public static void KeyUp(this IElement element, KeyboardEventArgs eventArgs) Parameters Type Name Description IElement element The element to raise the event on. KeyboardEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source KeyUp(IElement, String, String, Single, Boolean, Boolean, Boolean, Boolean, Boolean, String) Raises the @onkeyup event on element , passing the provided properties to the event handler via a object Declaration public static void KeyUp(this IElement element, string key, string code = null, float location = 0F, bool repeat = false, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null) Parameters Type Name Description IElement element The element to raise the event on. System.String key The key value of the key represented by the event. If the value has a printed representation, this attribute's value is the same as the char attribute. Otherwise, it's one of the key value strings specified in 'Key values'. If the key can't be identified, this is the string \"Unidentified\" System.String code Holds a string that identifies the physical key being pressed. The value is not affected by the current keyboard layout or modifier state, so a particular key will always return the same value. System.Single location The location of the key on the device. System.Boolean repeat true if a key has been depressed long enough to trigger key repetition, otherwise false. System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type The type of the event. | Improve this Doc View Source KeyUpAsync(IElement, KeyboardEventArgs) Raises the @onkeyup event on element , passing the provided eventArgs to the event handler. Declaration public static Task KeyUpAsync(this IElement element, KeyboardEventArgs eventArgs) Parameters Type Name Description IElement element KeyboardEventArgs eventArgs Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done."
  },
  "api/Bunit.MarkupMatchesAssertExtensions.html": {
    "href": "api/Bunit.MarkupMatchesAssertExtensions.html",
    "title": "Class MarkupMatchesAssertExtensions | bUnit",
    "keywords": "Class MarkupMatchesAssertExtensions Assert helpers for comparing markup Inheritance System.Object MarkupMatchesAssertExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.dll Syntax public static class MarkupMatchesAssertExtensions Methods | Improve this Doc View Source MarkupMatches(IRenderedFragment, IRenderedFragment, String) Verifies that the rendered markup from the actual IRenderedFragment matches the rendered markup from the expected IRenderedFragment , using the HtmlComparer type. Declaration public static void MarkupMatches(this IRenderedFragment actual, IRenderedFragment expected, string userMessage = null) Parameters Type Name Description IRenderedFragment actual The rendered fragment to verify. IRenderedFragment expected The expected rendered fragment. System.String userMessage A custom user message to display in case the verification fails. Exceptions Type Condition HtmlEqualException Thrown when the actual markup does not match the expected markup. | Improve this Doc View Source MarkupMatches(IRenderedFragment, String, String) Verifies that the rendered markup from the actual IRenderedFragment matches the expected markup, using the HtmlComparer type. Declaration public static void MarkupMatches(this IRenderedFragment actual, string expected, string userMessage = null) Parameters Type Name Description IRenderedFragment actual The rendered fragment to verify. System.String expected The expected markup. System.String userMessage A custom user message to display in case the verification fails. Exceptions Type Condition HtmlEqualException Thrown when the actual markup does not match the expected markup. | Improve this Doc View Source MarkupMatches(INode, IRenderedFragment, String) Verifies that the actual matches the rendered markup from the expected IRenderedFragment , using the HtmlComparer type. Declaration public static void MarkupMatches(this INode actual, IRenderedFragment expected, string userMessage = null) Parameters Type Name Description INode actual The node to verify. IRenderedFragment expected The expected rendered fragment. System.String userMessage A custom user message to display in case the verification fails. Exceptions Type Condition HtmlEqualException Thrown when the actual markup does not match the expected markup. | Improve this Doc View Source MarkupMatches(INode, INodeList, String) Verifies that the actual matches the expected , using the HtmlComparer type. Declaration public static void MarkupMatches(this INode actual, INodeList expected, string userMessage = null) Parameters Type Name Description INode actual The node to verify. INodeList expected The expected list of nodes. System.String userMessage A custom user message to display in case the verification fails. Exceptions Type Condition HtmlEqualException Thrown when the actual markup does not match the expected markup. | Improve this Doc View Source MarkupMatches(INode, String, String) Verifies that the actual matches the expected markup, using the HtmlComparer type. Declaration public static void MarkupMatches(this INode actual, string expected, string userMessage = null) Parameters Type Name Description INode actual The node to verify. System.String expected The expected markup. System.String userMessage A custom user message to display in case the verification fails. Exceptions Type Condition HtmlEqualException Thrown when the actual markup does not match the expected markup. | Improve this Doc View Source MarkupMatches(INodeList, IRenderedFragment, String) Verifies that the actual matches the rendered markup from the expected IRenderedFragment , using the HtmlComparer type. Declaration public static void MarkupMatches(this INodeList actual, IRenderedFragment expected, string userMessage = null) Parameters Type Name Description INodeList actual The list of nodes to verify. IRenderedFragment expected The expected rendered fragment. System.String userMessage A custom user message to display in case the verification fails. Exceptions Type Condition HtmlEqualException Thrown when the actual markup does not match the expected markup. | Improve this Doc View Source MarkupMatches(INodeList, INode, String) Verifies that the actual matches the expected , using the HtmlComparer type. Declaration public static void MarkupMatches(this INodeList actual, INode expected, string userMessage = null) Parameters Type Name Description INodeList actual The list of nodes to verify. INode expected The expected node. System.String userMessage A custom user message to display in case the verification fails. Exceptions Type Condition HtmlEqualException Thrown when the actual markup does not match the expected markup. | Improve this Doc View Source MarkupMatches(INodeList, INodeList, String) Verifies that the actual matches the expected , using the HtmlComparer type. Declaration public static void MarkupMatches(this INodeList actual, INodeList expected, string userMessage = null) Parameters Type Name Description INodeList actual The list of nodes to verify. INodeList expected The expected list of nodes. System.String userMessage A custom user message to display in case the verification fails. Exceptions Type Condition HtmlEqualException Thrown when the actual markup does not match the expected markup. | Improve this Doc View Source MarkupMatches(INodeList, String, String) Verifies that the actual matches the expected markup, using the HtmlComparer type. Declaration public static void MarkupMatches(this INodeList actual, string expected, string userMessage = null) Parameters Type Name Description INodeList actual The list of nodes to verify. System.String expected The expected markup. System.String userMessage A custom user message to display in case the verification fails. Exceptions Type Condition HtmlEqualException Thrown when the actual markup does not match the expected markup."
  },
  "api/Bunit.MediaEventDispatchExtensions.html": {
    "href": "api/Bunit.MediaEventDispatchExtensions.html",
    "title": "Class MediaEventDispatchExtensions | bUnit",
    "keywords": "Class MediaEventDispatchExtensions Media event dispatch helper extension methods. Inheritance System.Object MediaEventDispatchExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.dll Syntax public static class MediaEventDispatchExtensions Methods | Improve this Doc View Source CanPlay(IElement) Raises the @oncanplay event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void CanPlay(this IElement element) Parameters Type Name Description IElement element The element to raise the event on. | Improve this Doc View Source CanPlayAsync(IElement) Raises the @oncanplay event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static Task CanPlayAsync(this IElement element) Parameters Type Name Description IElement element The element to raise the event on. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source CanPlayThrough(IElement) Raises the @oncanplaythrough event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void CanPlayThrough(this IElement element) Parameters Type Name Description IElement element The element to raise the event on. | Improve this Doc View Source CanPlayThroughAsync(IElement) Raises the @oncanplaythrough event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static Task CanPlayThroughAsync(this IElement element) Parameters Type Name Description IElement element The element to raise the event on. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source CueChange(IElement) Raises the @oncuechange event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void CueChange(this IElement element) Parameters Type Name Description IElement element The element to raise the event on. | Improve this Doc View Source CueChangeAsync(IElement) Raises the @oncuechange event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static Task CueChangeAsync(this IElement element) Parameters Type Name Description IElement element The element to raise the event on. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source DurationChange(IElement) Raises the @ondurationchange event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void DurationChange(this IElement element) Parameters Type Name Description IElement element The element to raise the event on. | Improve this Doc View Source DurationChangeAsync(IElement) Raises the @ondurationchange event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static Task DurationChangeAsync(this IElement element) Parameters Type Name Description IElement element The element to raise the event on. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source Emptied(IElement) Raises the @onemptied event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void Emptied(this IElement element) Parameters Type Name Description IElement element The element to raise the event on. | Improve this Doc View Source EmptiedAsync(IElement) Raises the @onemptied event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static Task EmptiedAsync(this IElement element) Parameters Type Name Description IElement element The element to raise the event on. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source Pause(IElement) Raises the @onpause event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void Pause(this IElement element) Parameters Type Name Description IElement element The element to raise the event on. | Improve this Doc View Source PauseAsync(IElement) Raises the @onpause event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static Task PauseAsync(this IElement element) Parameters Type Name Description IElement element The element to raise the event on. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source Play(IElement) Raises the @onplay event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void Play(this IElement element) Parameters Type Name Description IElement element The element to raise the event on. | Improve this Doc View Source PlayAsync(IElement) Raises the @onplay event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static Task PlayAsync(this IElement element) Parameters Type Name Description IElement element The element to raise the event on. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source Playing(IElement) Raises the @onplaying event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void Playing(this IElement element) Parameters Type Name Description IElement element The element to raise the event on. | Improve this Doc View Source PlayingAsync(IElement) Raises the @onplaying event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static Task PlayingAsync(this IElement element) Parameters Type Name Description IElement element The element to raise the event on. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source RateChange(IElement) Raises the @onratechange event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void RateChange(this IElement element) Parameters Type Name Description IElement element The element to raise the event on. | Improve this Doc View Source RateChangeAsync(IElement) Raises the @onratechange event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static Task RateChangeAsync(this IElement element) Parameters Type Name Description IElement element The element to raise the event on. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source Seeked(IElement) Raises the @onseeked event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void Seeked(this IElement element) Parameters Type Name Description IElement element The element to raise the event on. | Improve this Doc View Source SeekedAsync(IElement) Raises the @onseeked event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static Task SeekedAsync(this IElement element) Parameters Type Name Description IElement element The element to raise the event on. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source Seeking(IElement) Raises the @onseeking event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void Seeking(this IElement element) Parameters Type Name Description IElement element The element to raise the event on. | Improve this Doc View Source SeekingAsync(IElement) Raises the @onseeking event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static Task SeekingAsync(this IElement element) Parameters Type Name Description IElement element The element to raise the event on. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source Stalled(IElement) Raises the @onstalled event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void Stalled(this IElement element) Parameters Type Name Description IElement element The element to raise the event on. | Improve this Doc View Source StalledAsync(IElement) Raises the @onstalled event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static Task StalledAsync(this IElement element) Parameters Type Name Description IElement element The element to raise the event on. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source Stop(IElement) Raises the @onstop event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void Stop(this IElement element) Parameters Type Name Description IElement element The element to raise the event on. | Improve this Doc View Source StopAsync(IElement) Raises the @onstop event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static Task StopAsync(this IElement element) Parameters Type Name Description IElement element The element to raise the event on. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source Suspend(IElement) Raises the @onsuspend event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void Suspend(this IElement element) Parameters Type Name Description IElement element The element to raise the event on. | Improve this Doc View Source SuspendAsync(IElement) Raises the @onsuspend event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static Task SuspendAsync(this IElement element) Parameters Type Name Description IElement element The element to raise the event on. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source TimeUpdate(IElement) Raises the @ontimeupdate event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void TimeUpdate(this IElement element) Parameters Type Name Description IElement element The element to raise the event on. | Improve this Doc View Source TimeUpdateAsync(IElement) Raises the @ontimeupdate event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static Task TimeUpdateAsync(this IElement element) Parameters Type Name Description IElement element The element to raise the event on. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source VolumeChange(IElement) Raises the @onvolumechange event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void VolumeChange(this IElement element) Parameters Type Name Description IElement element The element to raise the event on. | Improve this Doc View Source VolumeChangeAsync(IElement) Raises the @onvolumechange event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static Task VolumeChangeAsync(this IElement element) Parameters Type Name Description IElement element The element to raise the event on. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source Waiting(IElement) Raises the @onwaiting event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void Waiting(this IElement element) Parameters Type Name Description IElement element The element to raise the event on. | Improve this Doc View Source WaitingAsync(IElement) Raises the @onwaiting event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static Task WaitingAsync(this IElement element) Parameters Type Name Description IElement element The element to raise the event on. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done."
  },
  "api/Bunit.Mocking.JSInterop.html": {
    "href": "api/Bunit.Mocking.JSInterop.html",
    "title": "Namespace Bunit.Mocking.JSInterop | bUnit",
    "keywords": "Namespace Bunit.Mocking.JSInterop Classes JsRuntimeAssertExtensions Assert extensions for JsRuntimeMock JsRuntimePlannedInvocation Represents a planned invocation of a JavaScript function which returns nothing, with specific arguments. JsRuntimePlannedInvocation<TResult> Represents a planned invocation of a JavaScript function with specific arguments. JsRuntimePlannedInvocationBase<TResult> Represents a planned invocation of a JavaScript function with specific arguments. MockJsRuntimeExtensions Helper methods for registering the MockJsRuntime with a TestServiceProvider . MockJsRuntimeInvokeHandler Represents an invoke handler for a mock of a . Structs JsRuntimeInvocation Represents an invocation of JavaScript via the JsRuntime Mock Enums JsRuntimeMockMode The execution mode of the MockJsRuntimeExtensions ."
  },
  "api/Bunit.Mocking.JSInterop.JsRuntimeAssertExtensions.html": {
    "href": "api/Bunit.Mocking.JSInterop.JsRuntimeAssertExtensions.html",
    "title": "Class JsRuntimeAssertExtensions | bUnit",
    "keywords": "Class JsRuntimeAssertExtensions Assert extensions for JsRuntimeMock Inheritance System.Object JsRuntimeAssertExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit.Mocking.JSInterop Assembly : Bunit.dll Syntax public static class JsRuntimeAssertExtensions Methods | Improve this Doc View Source ShouldBeElementReferenceTo(Object, IElement) Verifies that an argument actualArgument passed to an JsRuntime invocation is an to the expectedTargetElement . Declaration public static void ShouldBeElementReferenceTo(this object actualArgument, IElement expectedTargetElement) Parameters Type Name Description System.Object actualArgument object to verify. IElement expectedTargetElement expected targeted element. | Improve this Doc View Source VerifyInvoke(MockJsRuntimeInvokeHandler, String, Int32, String) Verifies that the identifier has been invoked calledTimes times. Declaration public static IReadOnlyList<JsRuntimeInvocation> VerifyInvoke(this MockJsRuntimeInvokeHandler handler, string identifier, int calledTimes, string userMessage = null) Parameters Type Name Description MockJsRuntimeInvokeHandler handler Handler to verify against. System.String identifier Identifier of invocation that should have been invoked. System.Int32 calledTimes The number of times the invocation is expected to have been called. System.String userMessage A custom user message to display if the assertion fails. Returns Type Description System.Collections.Generic.IReadOnlyList < JsRuntimeInvocation > The JsRuntimeInvocation . | Improve this Doc View Source VerifyInvoke(MockJsRuntimeInvokeHandler, String, String) Verifies that the identifier has been invoked one time. Declaration public static JsRuntimeInvocation VerifyInvoke(this MockJsRuntimeInvokeHandler handler, string identifier, string userMessage = null) Parameters Type Name Description MockJsRuntimeInvokeHandler handler Handler to verify against. System.String identifier Identifier of invocation that should have been invoked. System.String userMessage A custom user message to display if the assertion fails. Returns Type Description JsRuntimeInvocation The JsRuntimeInvocation . | Improve this Doc View Source VerifyNotInvoke(MockJsRuntimeInvokeHandler, String, String) Verifies that the identifier was never invoked on the handler . Declaration public static void VerifyNotInvoke(this MockJsRuntimeInvokeHandler handler, string identifier, string userMessage = null) Parameters Type Name Description MockJsRuntimeInvokeHandler handler Handler to verify against. System.String identifier Identifier of invocation that should not have happened. System.String userMessage A custom user message to display if the assertion fails."
  },
  "api/Bunit.Mocking.JSInterop.JsRuntimeInvocation.html": {
    "href": "api/Bunit.Mocking.JSInterop.JsRuntimeInvocation.html",
    "title": "Struct JsRuntimeInvocation | bUnit",
    "keywords": "Struct JsRuntimeInvocation Represents an invocation of JavaScript via the JsRuntime Mock Implements System.IEquatable < JsRuntimeInvocation > Inherited Members System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Bunit.Mocking.JSInterop Assembly : Bunit.dll Syntax public struct JsRuntimeInvocation : IEquatable<JsRuntimeInvocation> Constructors | Improve this Doc View Source JsRuntimeInvocation(String, CancellationToken, Object[]) Creates an instance of the JsRuntimeInvocation . Declaration public JsRuntimeInvocation(string identifier, CancellationToken cancellationToken, object[] args) Parameters Type Name Description System.String identifier System.Threading.CancellationToken cancellationToken System.Object [] args Properties | Improve this Doc View Source Arguments Gets the arguments used in the invocation. Declaration public IReadOnlyList<object> Arguments { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < System.Object > | Improve this Doc View Source CancellationToken Gets the cancellation token used in the invocation. Declaration public CancellationToken CancellationToken { get; } Property Value Type Description System.Threading.CancellationToken | Improve this Doc View Source Identifier Gets the identifier used in the invocation. Declaration public string Identifier { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Equals(JsRuntimeInvocation) Declaration public bool Equals(JsRuntimeInvocation other) Parameters Type Name Description JsRuntimeInvocation other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(JsRuntimeInvocation, JsRuntimeInvocation) Declaration public static bool operator ==(JsRuntimeInvocation left, JsRuntimeInvocation right) Parameters Type Name Description JsRuntimeInvocation left JsRuntimeInvocation right Returns Type Description System.Boolean | Improve this Doc View Source Inequality(JsRuntimeInvocation, JsRuntimeInvocation) Declaration public static bool operator !=(JsRuntimeInvocation left, JsRuntimeInvocation right) Parameters Type Name Description JsRuntimeInvocation left JsRuntimeInvocation right Returns Type Description System.Boolean Implements System.IEquatable<T> Extension Methods JsRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.Mocking.JSInterop.JsRuntimeMockMode.html": {
    "href": "api/Bunit.Mocking.JSInterop.JsRuntimeMockMode.html",
    "title": "Enum JsRuntimeMockMode | bUnit",
    "keywords": "Enum JsRuntimeMockMode The execution mode of the MockJsRuntimeExtensions . Namespace : Bunit.Mocking.JSInterop Assembly : Bunit.dll Syntax public enum JsRuntimeMockMode Fields Name Description Loose Loose configures the MockJsRuntimeExtensions to return default TValue for calls to the mock. Strict Strict configures the MockJsRuntimeExtensions to throw an UnplannedJsInvocationException exception when a call to for has not been setup in the mock. Extension Methods JsRuntimeAssertExtensions.ShouldBeElementReferenceTo(IElement)"
  },
  "api/Bunit.Mocking.JSInterop.JsRuntimePlannedInvocation.html": {
    "href": "api/Bunit.Mocking.JSInterop.JsRuntimePlannedInvocation.html",
    "title": "Class JsRuntimePlannedInvocation | bUnit",
    "keywords": "Class JsRuntimePlannedInvocation Represents a planned invocation of a JavaScript function which returns nothing, with specific arguments. Inheritance System.Object JsRuntimePlannedInvocationBase < System.Object > JsRuntimePlannedInvocation Inherited Members JsRuntimePlannedInvocationBase<Object>.Identifier JsRuntimePlannedInvocationBase<Object>.Invocations JsRuntimePlannedInvocationBase<Object>.SetResultBase(Object) JsRuntimePlannedInvocationBase<Object>.SetException<TException>(TException) JsRuntimePlannedInvocationBase<Object>.SetCanceled() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit.Mocking.JSInterop Assembly : Bunit.dll Syntax public class JsRuntimePlannedInvocation : JsRuntimePlannedInvocationBase<object> Methods | Improve this Doc View Source SetVoidResult() Completes the current awaiting void invocation requests. Declaration public void SetVoidResult() Extension Methods JsRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.Mocking.JSInterop.JsRuntimePlannedInvocation-1.html": {
    "href": "api/Bunit.Mocking.JSInterop.JsRuntimePlannedInvocation-1.html",
    "title": "Class JsRuntimePlannedInvocation<TResult> | bUnit",
    "keywords": "Class JsRuntimePlannedInvocation<TResult> Represents a planned invocation of a JavaScript function with specific arguments. Inheritance System.Object JsRuntimePlannedInvocationBase <TResult> JsRuntimePlannedInvocation<TResult> Inherited Members JsRuntimePlannedInvocationBase<TResult>.Identifier JsRuntimePlannedInvocationBase<TResult>.Invocations JsRuntimePlannedInvocationBase<TResult>.SetResultBase(TResult) JsRuntimePlannedInvocationBase<TResult>.SetException<TException>(TException) JsRuntimePlannedInvocationBase<TResult>.SetCanceled() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit.Mocking.JSInterop Assembly : Bunit.dll Syntax public class JsRuntimePlannedInvocation<TResult> : JsRuntimePlannedInvocationBase<TResult> Type Parameters Name Description TResult Methods | Improve this Doc View Source SetResult(TResult) Sets the TResult result that invocations will receive. Declaration public void SetResult(TResult result) Parameters Type Name Description TResult result Extension Methods JsRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.Mocking.JSInterop.JsRuntimePlannedInvocationBase-1.html": {
    "href": "api/Bunit.Mocking.JSInterop.JsRuntimePlannedInvocationBase-1.html",
    "title": "Class JsRuntimePlannedInvocationBase<TResult> | bUnit",
    "keywords": "Class JsRuntimePlannedInvocationBase<TResult> Represents a planned invocation of a JavaScript function with specific arguments. Inheritance System.Object JsRuntimePlannedInvocationBase<TResult> JsRuntimePlannedInvocation JsRuntimePlannedInvocation <TResult> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit.Mocking.JSInterop Assembly : Bunit.dll Syntax public abstract class JsRuntimePlannedInvocationBase<TResult> Type Parameters Name Description TResult Constructors | Improve this Doc View Source JsRuntimePlannedInvocationBase(String, Func<IReadOnlyList<Object>, Boolean>) Creates an instance of a JsRuntimePlannedInvocationBase<TResult> . Declaration protected JsRuntimePlannedInvocationBase(string identifier, Func<IReadOnlyList<object>, bool> matcher) Parameters Type Name Description System.String identifier System.Func < System.Collections.Generic.IReadOnlyList < System.Object >, System.Boolean > matcher Properties | Improve this Doc View Source Identifier The expected identifier for the function to invoke. Declaration public string Identifier { get; } Property Value Type Description System.String | Improve this Doc View Source Invocations Gets the invocations that this JsRuntimePlannedInvocation<TResult> has matched with. Declaration public IReadOnlyList<JsRuntimeInvocation> Invocations { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < JsRuntimeInvocation > Methods | Improve this Doc View Source SetCanceled() Marks the System.Threading.Tasks.Task`1 that invocations will receive as canceled. Declaration public void SetCanceled() | Improve this Doc View Source SetException<TException>(TException) Sets the TException exception that invocations will receive. Declaration public void SetException<TException>(TException exception) where TException : Exception Parameters Type Name Description TException exception Type Parameters Name Description TException | Improve this Doc View Source SetResultBase(TResult) Sets the TResult result that invocations will receive. Declaration protected void SetResultBase(TResult result) Parameters Type Name Description TResult result Extension Methods JsRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.Mocking.JSInterop.MockJsRuntimeExtensions.html": {
    "href": "api/Bunit.Mocking.JSInterop.MockJsRuntimeExtensions.html",
    "title": "Class MockJsRuntimeExtensions | bUnit",
    "keywords": "Class MockJsRuntimeExtensions Helper methods for registering the MockJsRuntime with a TestServiceProvider . Inheritance System.Object MockJsRuntimeExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit.Mocking.JSInterop Assembly : Bunit.dll Syntax public static class MockJsRuntimeExtensions Methods | Improve this Doc View Source AddMockJsRuntime(TestServiceProvider, JsRuntimeMockMode) Adds the MockJsRuntimeInvokeHandler to the TestServiceProvider . Declaration public static MockJsRuntimeInvokeHandler AddMockJsRuntime(this TestServiceProvider serviceProvider, JsRuntimeMockMode mode = JsRuntimeMockMode.Loose) Parameters Type Name Description TestServiceProvider serviceProvider JsRuntimeMockMode mode Returns Type Description MockJsRuntimeInvokeHandler The added MockJsRuntimeInvokeHandler ."
  },
  "api/Bunit.Mocking.JSInterop.MockJsRuntimeInvokeHandler.html": {
    "href": "api/Bunit.Mocking.JSInterop.MockJsRuntimeInvokeHandler.html",
    "title": "Class MockJsRuntimeInvokeHandler | bUnit",
    "keywords": "Class MockJsRuntimeInvokeHandler Represents an invoke handler for a mock of a . Inheritance System.Object MockJsRuntimeInvokeHandler Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit.Mocking.JSInterop Assembly : Bunit.dll Syntax public class MockJsRuntimeInvokeHandler Constructors | Improve this Doc View Source MockJsRuntimeInvokeHandler(JsRuntimeMockMode) Creates a MockJsRuntimeInvokeHandler . Declaration public MockJsRuntimeInvokeHandler(JsRuntimeMockMode mode = JsRuntimeMockMode.Loose) Parameters Type Name Description JsRuntimeMockMode mode The JsRuntimeMockMode the handler should use. Properties | Improve this Doc View Source Invocations Gets a dictionary of all System.Collections.Generic.List`1 this mock has observed. Declaration public IReadOnlyDictionary<string, List<JsRuntimeInvocation>> Invocations { get; } Property Value Type Description System.Collections.Generic.IReadOnlyDictionary < System.String , System.Collections.Generic.List < JsRuntimeInvocation >> | Improve this Doc View Source Mode Gets whether the mock is running in Loose or Strict . Declaration public JsRuntimeMockMode Mode { get; } Property Value Type Description JsRuntimeMockMode Methods | Improve this Doc View Source Setup<TResult>(String, Func<IReadOnlyList<Object>, Boolean>) Configure a planned JSInterop invocation with the identifier and arguments passing the argumentsMatcher test. Declaration public JsRuntimePlannedInvocation<TResult> Setup<TResult>(string identifier, Func<IReadOnlyList<object>, bool> argumentsMatcher) Parameters Type Name Description System.String identifier The identifier to setup a response for System.Func < System.Collections.Generic.IReadOnlyList < System.Object >, System.Boolean > argumentsMatcher A matcher that is passed arguments received in invocations to identifier . If it returns true the invocation is matched. Returns Type Description JsRuntimePlannedInvocation <TResult> A JsRuntimePlannedInvocation<TResult> . Type Parameters Name Description TResult The result type of the invocation | Improve this Doc View Source Setup<TResult>(String, Object[]) Configure a planned JSInterop invocation with the identifier and arguments . Declaration public JsRuntimePlannedInvocation<TResult> Setup<TResult>(string identifier, params object[] arguments) Parameters Type Name Description System.String identifier The identifier to setup a response for System.Object [] arguments The arguments that an invocation to identifier should match. Returns Type Description JsRuntimePlannedInvocation <TResult> A JsRuntimePlannedInvocation<TResult> . Type Parameters Name Description TResult | Improve this Doc View Source SetupVoid(String, Func<IReadOnlyList<Object>, Boolean>) Configure a planned JSInterop invocation with the identifier and arguments passing the argumentsMatcher test, that should not receive any result. Declaration public JsRuntimePlannedInvocation SetupVoid(string identifier, Func<IReadOnlyList<object>, bool> argumentsMatcher) Parameters Type Name Description System.String identifier The identifier to setup a response for System.Func < System.Collections.Generic.IReadOnlyList < System.Object >, System.Boolean > argumentsMatcher A matcher that is passed arguments received in invocations to identifier . If it returns true the invocation is matched. Returns Type Description JsRuntimePlannedInvocation A JsRuntimePlannedInvocation . | Improve this Doc View Source SetupVoid(String, Object[]) Configure a planned JSInterop invocation with the identifier and arguments , that should not receive any result. Declaration public JsRuntimePlannedInvocation SetupVoid(string identifier, params object[] arguments) Parameters Type Name Description System.String identifier The identifier to setup a response for System.Object [] arguments The arguments that an invocation to identifier should match. Returns Type Description JsRuntimePlannedInvocation A JsRuntimePlannedInvocation . | Improve this Doc View Source ToJsRuntime() Gets the mocked instance. Declaration public IJSRuntime ToJsRuntime() Returns Type Description IJSRuntime Extension Methods JsRuntimeAssertExtensions.VerifyNotInvoke(MockJsRuntimeInvokeHandler, String, String) JsRuntimeAssertExtensions.VerifyInvoke(MockJsRuntimeInvokeHandler, String, String) JsRuntimeAssertExtensions.VerifyInvoke(MockJsRuntimeInvokeHandler, String, Int32, String) JsRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.MouseEventDispatchExtensions.html": {
    "href": "api/Bunit.MouseEventDispatchExtensions.html",
    "title": "Class MouseEventDispatchExtensions | bUnit",
    "keywords": "Class MouseEventDispatchExtensions Mouse event dispatch helper extension methods. Inheritance System.Object MouseEventDispatchExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.dll Syntax public static class MouseEventDispatchExtensions Methods | Improve this Doc View Source Click(IElement, MouseEventArgs) Raises the @onclick event on element , passing the provided eventArgs to the event handler. Declaration public static void Click(this IElement element, MouseEventArgs eventArgs) Parameters Type Name Description IElement element The element to raise the event on. MouseEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source Click(IElement, Int64, Double, Double, Double, Double, Int64, Int64, Boolean, Boolean, Boolean, Boolean, String) Raises the @onclick event on element , passing the provided properties to the event handler via a object Declaration public static void Click(this IElement element, long detail = 0L, double screenX = 0, double screenY = 0, double clientX = 0, double clientY = 0, long button = 0L, long buttons = 0L, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null) Parameters Type Name Description IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. System.Double screenX The X coordinate of the mouse pointer in global (screen) coordinates. System.Double screenY The Y coordinate of the mouse pointer in global (screen) coordinates. System.Double clientX The X coordinate of the mouse pointer in local (DOM content) coordinates. System.Double clientY The Y coordinate of the mouse pointer in local (DOM content) coordinates. System.Int64 button The button number that was pressed when the mouse event was fired: Left button=0, middle button=1 (if present), right button=2. For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left. System.Int64 buttons The buttons being pressed when the mouse event was fired: Left button=1, Right button=2, Middle (wheel) button=4, 4th button (typically, \"Browser Back\" button)=8, 5th button (typically, \"Browser Forward\" button)=16. If two or more buttons are pressed, returns the logical sum of the values. E.g., if Left button and Right button are pressed, returns 3 (=1 | 2). System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. | Improve this Doc View Source ClickAsync(IElement, MouseEventArgs) Raises the @onclick event on element , passing the provided eventArgs to the event handler. Declaration public static Task ClickAsync(this IElement element, MouseEventArgs eventArgs) Parameters Type Name Description IElement element The element to raise the event on. MouseEventArgs eventArgs The event arguments to pass to the event handler. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source ContextMenu(IElement, MouseEventArgs) Raises the @oncontextmenu event on element , passing the provided eventArgs to the event handler. Declaration public static void ContextMenu(this IElement element, MouseEventArgs eventArgs) Parameters Type Name Description IElement element The element to raise the event on. MouseEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source ContextMenu(IElement, Int64, Double, Double, Double, Double, Int64, Int64, Boolean, Boolean, Boolean, Boolean, String) Raises the @oncontextmenu event on element , passing the provided properties to the event handler via a object Declaration public static void ContextMenu(this IElement element, long detail = 0L, double screenX = 0, double screenY = 0, double clientX = 0, double clientY = 0, long button = 0L, long buttons = 0L, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null) Parameters Type Name Description IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. System.Double screenX The X coordinate of the mouse pointer in global (screen) coordinates. System.Double screenY The Y coordinate of the mouse pointer in global (screen) coordinates. System.Double clientX The X coordinate of the mouse pointer in local (DOM content) coordinates. System.Double clientY The Y coordinate of the mouse pointer in local (DOM content) coordinates. System.Int64 button The button number that was pressed when the mouse event was fired: Left button=0, middle button=1 (if present), right button=2. For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left. System.Int64 buttons The buttons being pressed when the mouse event was fired: Left button=1, Right button=2, Middle (wheel) button=4, 4th button (typically, \"Browser Back\" button)=8, 5th button (typically, \"Browser Forward\" button)=16. If two or more buttons are pressed, returns the logical sum of the values. E.g., if Left button and Right button are pressed, returns 3 (=1 | 2). System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. | Improve this Doc View Source ContextMenuAsync(IElement, MouseEventArgs) Raises the @oncontextmenu event on element , passing the provided eventArgs to the event handler. Declaration public static Task ContextMenuAsync(this IElement element, MouseEventArgs eventArgs) Parameters Type Name Description IElement element The element to raise the event on. MouseEventArgs eventArgs The event arguments to pass to the event handler. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source DoubleClick(IElement, MouseEventArgs) Raises the @ondblclick event on element , passing the provided eventArgs to the event handler. Declaration public static void DoubleClick(this IElement element, MouseEventArgs eventArgs) Parameters Type Name Description IElement element The element to raise the event on. MouseEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source DoubleClick(IElement, Int64, Double, Double, Double, Double, Int64, Int64, Boolean, Boolean, Boolean, Boolean, String) Raises the @ondblclick event on element , passing the provided properties to the event handler via a object Declaration public static void DoubleClick(this IElement element, long detail = 0L, double screenX = 0, double screenY = 0, double clientX = 0, double clientY = 0, long button = 0L, long buttons = 0L, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null) Parameters Type Name Description IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. System.Double screenX The X coordinate of the mouse pointer in global (screen) coordinates. System.Double screenY The Y coordinate of the mouse pointer in global (screen) coordinates. System.Double clientX The X coordinate of the mouse pointer in local (DOM content) coordinates. System.Double clientY The Y coordinate of the mouse pointer in local (DOM content) coordinates. System.Int64 button The button number that was pressed when the mouse event was fired: Left button=0, middle button=1 (if present), right button=2. For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left. System.Int64 buttons The buttons being pressed when the mouse event was fired: Left button=1, Right button=2, Middle (wheel) button=4, 4th button (typically, \"Browser Back\" button)=8, 5th button (typically, \"Browser Forward\" button)=16. If two or more buttons are pressed, returns the logical sum of the values. E.g., if Left button and Right button are pressed, returns 3 (=1 | 2). System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. | Improve this Doc View Source DoubleClickAsync(IElement, MouseEventArgs) Raises the @ondblclick event on element , passing the provided eventArgs to the event handler. Declaration public static Task DoubleClickAsync(this IElement element, MouseEventArgs eventArgs) Parameters Type Name Description IElement element The element to raise the event on. MouseEventArgs eventArgs The event arguments to pass to the event handler. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source MouseDown(IElement, MouseEventArgs) Raises the @onmousedown event on element , passing the provided eventArgs to the event handler. Declaration public static void MouseDown(this IElement element, MouseEventArgs eventArgs) Parameters Type Name Description IElement element The element to raise the event on. MouseEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source MouseDown(IElement, Int64, Double, Double, Double, Double, Int64, Int64, Boolean, Boolean, Boolean, Boolean, String) Raises the @onmousedown event on element , passing the provided properties to the event handler via a object Declaration public static void MouseDown(this IElement element, long detail = 0L, double screenX = 0, double screenY = 0, double clientX = 0, double clientY = 0, long button = 0L, long buttons = 0L, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null) Parameters Type Name Description IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. System.Double screenX The X coordinate of the mouse pointer in global (screen) coordinates. System.Double screenY The Y coordinate of the mouse pointer in global (screen) coordinates. System.Double clientX The X coordinate of the mouse pointer in local (DOM content) coordinates. System.Double clientY The Y coordinate of the mouse pointer in local (DOM content) coordinates. System.Int64 button The button number that was pressed when the mouse event was fired: Left button=0, middle button=1 (if present), right button=2. For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left. System.Int64 buttons The buttons being pressed when the mouse event was fired: Left button=1, Right button=2, Middle (wheel) button=4, 4th button (typically, \"Browser Back\" button)=8, 5th button (typically, \"Browser Forward\" button)=16. If two or more buttons are pressed, returns the logical sum of the values. E.g., if Left button and Right button are pressed, returns 3 (=1 | 2). System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. | Improve this Doc View Source MouseDownAsync(IElement, MouseEventArgs) Raises the @onmousedown event on element , passing the provided eventArgs to the event handler. Declaration public static Task MouseDownAsync(this IElement element, MouseEventArgs eventArgs) Parameters Type Name Description IElement element The element to raise the event on. MouseEventArgs eventArgs The event arguments to pass to the event handler. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source MouseMove(IElement, MouseEventArgs) Raises the @onmousemove event on element , passing the provided eventArgs to the event handler. Declaration public static void MouseMove(this IElement element, MouseEventArgs eventArgs) Parameters Type Name Description IElement element The element to raise the event on. MouseEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source MouseMove(IElement, Int64, Double, Double, Double, Double, Int64, Int64, Boolean, Boolean, Boolean, Boolean, String) Raises the @onmousemove event on element , passing the provided properties to the event handler via a object Declaration public static void MouseMove(this IElement element, long detail = 0L, double screenX = 0, double screenY = 0, double clientX = 0, double clientY = 0, long button = 0L, long buttons = 0L, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null) Parameters Type Name Description IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. System.Double screenX The X coordinate of the mouse pointer in global (screen) coordinates. System.Double screenY The Y coordinate of the mouse pointer in global (screen) coordinates. System.Double clientX The X coordinate of the mouse pointer in local (DOM content) coordinates. System.Double clientY The Y coordinate of the mouse pointer in local (DOM content) coordinates. System.Int64 button The button number that was pressed when the mouse event was fired: Left button=0, middle button=1 (if present), right button=2. For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left. System.Int64 buttons The buttons being pressed when the mouse event was fired: Left button=1, Right button=2, Middle (wheel) button=4, 4th button (typically, \"Browser Back\" button)=8, 5th button (typically, \"Browser Forward\" button)=16. If two or more buttons are pressed, returns the logical sum of the values. E.g., if Left button and Right button are pressed, returns 3 (=1 | 2). System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. | Improve this Doc View Source MouseMoveAsync(IElement, MouseEventArgs) Raises the @onmousemove event on element , passing the provided eventArgs to the event handler. Declaration public static Task MouseMoveAsync(this IElement element, MouseEventArgs eventArgs) Parameters Type Name Description IElement element The element to raise the event on. MouseEventArgs eventArgs The event arguments to pass to the event handler. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source MouseOut(IElement, MouseEventArgs) Raises the @onmouseout event on element , passing the provided eventArgs to the event handler. Declaration public static void MouseOut(this IElement element, MouseEventArgs eventArgs) Parameters Type Name Description IElement element The element to raise the event on. MouseEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source MouseOut(IElement, Int64, Double, Double, Double, Double, Int64, Int64, Boolean, Boolean, Boolean, Boolean, String) Raises the @onmouseout event on element , passing the provided properties to the event handler via a object Declaration public static void MouseOut(this IElement element, long detail = 0L, double screenX = 0, double screenY = 0, double clientX = 0, double clientY = 0, long button = 0L, long buttons = 0L, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null) Parameters Type Name Description IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. System.Double screenX The X coordinate of the mouse pointer in global (screen) coordinates. System.Double screenY The Y coordinate of the mouse pointer in global (screen) coordinates. System.Double clientX The X coordinate of the mouse pointer in local (DOM content) coordinates. System.Double clientY The Y coordinate of the mouse pointer in local (DOM content) coordinates. System.Int64 button The button number that was pressed when the mouse event was fired: Left button=0, middle button=1 (if present), right button=2. For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left. System.Int64 buttons The buttons being pressed when the mouse event was fired: Left button=1, Right button=2, Middle (wheel) button=4, 4th button (typically, \"Browser Back\" button)=8, 5th button (typically, \"Browser Forward\" button)=16. If two or more buttons are pressed, returns the logical sum of the values. E.g., if Left button and Right button are pressed, returns 3 (=1 | 2). System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. | Improve this Doc View Source MouseOutAsync(IElement, MouseEventArgs) Raises the @onmouseout event on element , passing the provided eventArgs to the event handler. Declaration public static Task MouseOutAsync(this IElement element, MouseEventArgs eventArgs) Parameters Type Name Description IElement element The element to raise the event on. MouseEventArgs eventArgs The event arguments to pass to the event handler. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source MouseOver(IElement, MouseEventArgs) Raises the @onmouseover event on element , passing the provided eventArgs to the event handler. Declaration public static void MouseOver(this IElement element, MouseEventArgs eventArgs) Parameters Type Name Description IElement element The element to raise the event on. MouseEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source MouseOver(IElement, Int64, Double, Double, Double, Double, Int64, Int64, Boolean, Boolean, Boolean, Boolean, String) Raises the @onmouseover event on element , passing the provided properties to the event handler via a object Declaration public static void MouseOver(this IElement element, long detail = 0L, double screenX = 0, double screenY = 0, double clientX = 0, double clientY = 0, long button = 0L, long buttons = 0L, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null) Parameters Type Name Description IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. System.Double screenX The X coordinate of the mouse pointer in global (screen) coordinates. System.Double screenY The Y coordinate of the mouse pointer in global (screen) coordinates. System.Double clientX The X coordinate of the mouse pointer in local (DOM content) coordinates. System.Double clientY The Y coordinate of the mouse pointer in local (DOM content) coordinates. System.Int64 button The button number that was pressed when the mouse event was fired: Left button=0, middle button=1 (if present), right button=2. For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left. System.Int64 buttons The buttons being pressed when the mouse event was fired: Left button=1, Right button=2, Middle (wheel) button=4, 4th button (typically, \"Browser Back\" button)=8, 5th button (typically, \"Browser Forward\" button)=16. If two or more buttons are pressed, returns the logical sum of the values. E.g., if Left button and Right button are pressed, returns 3 (=1 | 2). System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. | Improve this Doc View Source MouseOverAsync(IElement, MouseEventArgs) Raises the @onmouseover event on element , passing the provided eventArgs to the event handler. Declaration public static Task MouseOverAsync(this IElement element, MouseEventArgs eventArgs) Parameters Type Name Description IElement element The element to raise the event on. MouseEventArgs eventArgs The event arguments to pass to the event handler. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source MouseUp(IElement, MouseEventArgs) Raises the @onmouseup event on element , passing the provided eventArgs to the event handler. Declaration public static void MouseUp(this IElement element, MouseEventArgs eventArgs) Parameters Type Name Description IElement element The element to raise the event on. MouseEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source MouseUp(IElement, Int64, Double, Double, Double, Double, Int64, Int64, Boolean, Boolean, Boolean, Boolean, String) Raises the @onmouseup event on element , passing the provided properties to the event handler via a object Declaration public static void MouseUp(this IElement element, long detail = 0L, double screenX = 0, double screenY = 0, double clientX = 0, double clientY = 0, long button = 0L, long buttons = 0L, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null) Parameters Type Name Description IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. System.Double screenX The X coordinate of the mouse pointer in global (screen) coordinates. System.Double screenY The Y coordinate of the mouse pointer in global (screen) coordinates. System.Double clientX The X coordinate of the mouse pointer in local (DOM content) coordinates. System.Double clientY The Y coordinate of the mouse pointer in local (DOM content) coordinates. System.Int64 button The button number that was pressed when the mouse event was fired: Left button=0, middle button=1 (if present), right button=2. For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left. System.Int64 buttons The buttons being pressed when the mouse event was fired: Left button=1, Right button=2, Middle (wheel) button=4, 4th button (typically, \"Browser Back\" button)=8, 5th button (typically, \"Browser Forward\" button)=16. If two or more buttons are pressed, returns the logical sum of the values. E.g., if Left button and Right button are pressed, returns 3 (=1 | 2). System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. | Improve this Doc View Source MouseUpAsync(IElement, MouseEventArgs) Raises the @onmouseup event on element , passing the provided eventArgs to the event handler. Declaration public static Task MouseUpAsync(this IElement element, MouseEventArgs eventArgs) Parameters Type Name Description IElement element The element to raise the event on. MouseEventArgs eventArgs The event arguments to pass to the event handler. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source MouseWheel(IElement, Int64, Double, Double, Double, Double, Int64, Int64, Boolean, Boolean, Boolean, Boolean, String, Double, Double, Double, Int64) Raises the @onmousewheel event on element , passing the provided properties to the event handler via a object Declaration public static void MouseWheel(this IElement element, long detail = 0L, double screenX = 0, double screenY = 0, double clientX = 0, double clientY = 0, long button = 0L, long buttons = 0L, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null, double deltaX = 0, double deltaY = 0, double deltaZ = 0, long deltaMode = 0L) Parameters Type Name Description IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. System.Double screenX The X coordinate of the mouse pointer in global (screen) coordinates. System.Double screenY The Y coordinate of the mouse pointer in global (screen) coordinates. System.Double clientX The X coordinate of the mouse pointer in local (DOM content) coordinates. System.Double clientY The Y coordinate of the mouse pointer in local (DOM content) coordinates. System.Int64 button The button number that was pressed when the mouse event was fired: Left button=0, middle button=1 (if present), right button=2. For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left. System.Int64 buttons The buttons being pressed when the mouse event was fired: Left button=1, Right button=2, Middle (wheel) button=4, 4th button (typically, \"Browser Back\" button)=8, 5th button (typically, \"Browser Forward\" button)=16. If two or more buttons are pressed, returns the logical sum of the values. E.g., if Left button and Right button are pressed, returns 3 (=1 | 2). System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. System.Double deltaX The horizontal scroll amount. System.Double deltaY The vertical scroll amount. System.Double deltaZ The scroll amount for the z-axis. System.Int64 deltaMode The unit of the delta values scroll amount. | Improve this Doc View Source MouseWheel(IElement, WheelEventArgs) Raises the @onmousewheel event on element , passing the provided eventArgs to the event handler. Declaration public static void MouseWheel(this IElement element, WheelEventArgs eventArgs) Parameters Type Name Description IElement element The element to raise the event on. WheelEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source MouseWheelAsync(IElement, WheelEventArgs) Raises the @onmousewheel event on element , passing the provided eventArgs to the event handler. Declaration public static Task MouseWheelAsync(this IElement element, WheelEventArgs eventArgs) Parameters Type Name Description IElement element The element to raise the event on. WheelEventArgs eventArgs The event arguments to pass to the event handler. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source Wheel(IElement, Int64, Double, Double, Double, Double, Int64, Int64, Boolean, Boolean, Boolean, Boolean, String, Double, Double, Double, Int64) Raises the @onwheel event on element , passing the provided properties to the event handler via a object Declaration public static void Wheel(this IElement element, long detail = 0L, double screenX = 0, double screenY = 0, double clientX = 0, double clientY = 0, long button = 0L, long buttons = 0L, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null, double deltaX = 0, double deltaY = 0, double deltaZ = 0, long deltaMode = 0L) Parameters Type Name Description IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. System.Double screenX The X coordinate of the mouse pointer in global (screen) coordinates. System.Double screenY The Y coordinate of the mouse pointer in global (screen) coordinates. System.Double clientX The X coordinate of the mouse pointer in local (DOM content) coordinates. System.Double clientY The Y coordinate of the mouse pointer in local (DOM content) coordinates. System.Int64 button The button number that was pressed when the mouse event was fired: Left button=0, middle button=1 (if present), right button=2. For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left. System.Int64 buttons The buttons being pressed when the mouse event was fired: Left button=1, Right button=2, Middle (wheel) button=4, 4th button (typically, \"Browser Back\" button)=8, 5th button (typically, \"Browser Forward\" button)=16. If two or more buttons are pressed, returns the logical sum of the values. E.g., if Left button and Right button are pressed, returns 3 (=1 | 2). System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. System.Double deltaX The horizontal scroll amount. System.Double deltaY The vertical scroll amount. System.Double deltaZ The scroll amount for the z-axis. System.Int64 deltaMode The unit of the delta values scroll amount. | Improve this Doc View Source Wheel(IElement, WheelEventArgs) Raises the @onwheel event on element , passing the provided eventArgs to the event handler. Declaration public static void Wheel(this IElement element, WheelEventArgs eventArgs) Parameters Type Name Description IElement element The element to raise the event on. WheelEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source WheelAsync(IElement, WheelEventArgs) Raises the @onwheel event on element , passing the provided eventArgs to the event handler. Declaration public static Task WheelAsync(this IElement element, WheelEventArgs eventArgs) Parameters Type Name Description IElement element The element to raise the event on. WheelEventArgs eventArgs The event arguments to pass to the event handler. Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done."
  },
  "api/Bunit.NodePrintExtensions.html": {
    "href": "api/Bunit.NodePrintExtensions.html",
    "title": "Class NodePrintExtensions | bUnit",
    "keywords": "Class NodePrintExtensions Helper methods for pretty printing markup from and . Inheritance System.Object NodePrintExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.dll Syntax public static class NodePrintExtensions Methods | Improve this Doc View Source ToDiffMarkup(IMarkupFormattable) Uses the DiffMarkupFormatter to generate a HTML markup string from a markupFormattable . The generated HTML markup will NOT include the internal Blazor attributes added to elements. Declaration public static string ToDiffMarkup(this IMarkupFormattable markupFormattable) Parameters Type Name Description IMarkupFormattable markupFormattable Returns Type Description System.String | Improve this Doc View Source ToDiffMarkup(IEnumerable<INode>) Uses the DiffMarkupFormatter to generate a HTML markup string from a System.Collections.Generic.IEnumerable<T> nodes . The generated HTML markup will NOT include the internal Blazor attributes added to elements. Declaration public static string ToDiffMarkup(this IEnumerable<INode> nodes) Parameters Type Name Description System.Collections.Generic.IEnumerable < INode > nodes Returns Type Description System.String | Improve this Doc View Source ToHtml(IEnumerable<INode>, TextWriter, IMarkupFormatter) Writes the serialization of the node guided by the formatter. Declaration public static void ToHtml(this IEnumerable<INode> nodes, TextWriter writer, IMarkupFormatter formatter) Parameters Type Name Description System.Collections.Generic.IEnumerable < INode > nodes The nodes to serialize. System.IO.TextWriter writer The output target of the serialization. IMarkupFormatter formatter The formatter to use. | Improve this Doc View Source ToMarkup(IMarkupFormattable) Uses the to generate a HTML markup from a markupFormattable . Declaration public static string ToMarkup(this IMarkupFormattable markupFormattable) Parameters Type Name Description IMarkupFormattable markupFormattable Returns Type Description System.String | Improve this Doc View Source ToMarkup(IEnumerable<INode>) Uses the to generate a HTML markup string from a System.Collections.Generic.IEnumerable<T> nodes . Declaration public static string ToMarkup(this IEnumerable<INode> nodes) Parameters Type Name Description System.Collections.Generic.IEnumerable < INode > nodes Returns Type Description System.String | Improve this Doc View Source ToMarkupElementOnly(IElement) Converts an into a HTML markup string, with only its tag and attributes included in the output. All child nodes are skipped. Declaration public static string ToMarkupElementOnly(this IElement element) Parameters Type Name Description IElement element Returns Type Description System.String"
  },
  "api/Bunit.PointerEventDispatchExtensions.html": {
    "href": "api/Bunit.PointerEventDispatchExtensions.html",
    "title": "Class PointerEventDispatchExtensions | bUnit",
    "keywords": "Class PointerEventDispatchExtensions Pointer event dispatch helper extension methods. Inheritance System.Object PointerEventDispatchExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.dll Syntax public static class PointerEventDispatchExtensions Methods | Improve this Doc View Source GotPointerCapture(IElement, PointerEventArgs) Raises the @ongotpointercapture event on element , passing the provided eventArgs to the event handler. Declaration public static void GotPointerCapture(this IElement element, PointerEventArgs eventArgs) Parameters Type Name Description IElement element The element to raise the event on. PointerEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source GotPointerCapture(IElement, Int64, Double, Double, Double, Double, Int64, Int64, Boolean, Boolean, Boolean, Boolean, String, Int64, Single, Single, Single, Single, Single, String, Boolean) Raises the @ongotpointercapture event on element , passing the provided properties to the event handler via a object. Declaration public static void GotPointerCapture(this IElement element, long detail = 0L, double screenX = 0, double screenY = 0, double clientX = 0, double clientY = 0, long button = 0L, long buttons = 0L, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null, long pointerId = 0L, float width = 0F, float height = 0F, float pressure = 0F, float tiltX = 0F, float tiltY = 0F, string pointerType = null, bool isPrimary = false) Parameters Type Name Description IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. System.Double screenX The X coordinate of the mouse pointer in global (screen) coordinates. System.Double screenY The Y coordinate of the mouse pointer in global (screen) coordinates. System.Double clientX The X coordinate of the mouse pointer in local (DOM content) coordinates. System.Double clientY The Y coordinate of the mouse pointer in local (DOM content) coordinates. System.Int64 button The button number that was pressed when the mouse event was fired: Left button=0, middle button=1 (if present), right button=2. For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left. System.Int64 buttons The buttons being pressed when the mouse event was fired: Left button=1, Right button=2, Middle (wheel) button=4, 4th button (typically, \"Browser Back\" button)=8, 5th button (typically, \"Browser Forward\" button)=16. If two or more buttons are pressed, returns the logical sum of the values. E.g., if Left button and Right button are pressed, returns 3 (=1 | 2). System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. System.Int64 pointerId A unique identifier for the pointer causing the event. System.Single width The width (magnitude on the X axis), in CSS pixels, of the contact geometry of the pointer. System.Single height The height (magnitude on the Y axis), in CSS pixels, of the contact geometry of the pointer. System.Single pressure The normalized pressure of the pointer input in the range of 0 to 1, where 0 and 1 represent the minimum and maximum pressure the hardware is capable of detecting, respectively. System.Single tiltX The plane angle (in degrees, in the range of -90 to 90) between the Y-Z plane and the plane containing both the transducer (e.g. pen stylus) axis and the Y axis. System.Single tiltY The plane angle (in degrees, in the range of -90 to 90) between the X-Z plane and the plane containing both the transducer (e.g. pen stylus) axis and the X axis. System.String pointerType Indicates the device type that caused the event. Must be one of the strings mouse, pen or touch, or an empty string. System.Boolean isPrimary Indicates if the pointer represents the primary pointer of this pointer type. | Improve this Doc View Source GotPointerCaptureAsync(IElement, PointerEventArgs) Raises the @ongotpointercapture event on element , passing the provided eventArgs to the event handler. Declaration public static Task GotPointerCaptureAsync(this IElement element, PointerEventArgs eventArgs) Parameters Type Name Description IElement element PointerEventArgs eventArgs Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source LostPointerCapture(IElement, PointerEventArgs) Raises the @onlostpointercapture event on element , passing the provided eventArgs to the event handler. Declaration public static void LostPointerCapture(this IElement element, PointerEventArgs eventArgs) Parameters Type Name Description IElement element The element to raise the event on. PointerEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source LostPointerCapture(IElement, Int64, Double, Double, Double, Double, Int64, Int64, Boolean, Boolean, Boolean, Boolean, String, Int64, Single, Single, Single, Single, Single, String, Boolean) Raises the @onlostpointercapture event on element , passing the provided properties to the event handler via a object. Declaration public static void LostPointerCapture(this IElement element, long detail = 0L, double screenX = 0, double screenY = 0, double clientX = 0, double clientY = 0, long button = 0L, long buttons = 0L, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null, long pointerId = 0L, float width = 0F, float height = 0F, float pressure = 0F, float tiltX = 0F, float tiltY = 0F, string pointerType = null, bool isPrimary = false) Parameters Type Name Description IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. System.Double screenX The X coordinate of the mouse pointer in global (screen) coordinates. System.Double screenY The Y coordinate of the mouse pointer in global (screen) coordinates. System.Double clientX The X coordinate of the mouse pointer in local (DOM content) coordinates. System.Double clientY The Y coordinate of the mouse pointer in local (DOM content) coordinates. System.Int64 button The button number that was pressed when the mouse event was fired: Left button=0, middle button=1 (if present), right button=2. For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left. System.Int64 buttons The buttons being pressed when the mouse event was fired: Left button=1, Right button=2, Middle (wheel) button=4, 4th button (typically, \"Browser Back\" button)=8, 5th button (typically, \"Browser Forward\" button)=16. If two or more buttons are pressed, returns the logical sum of the values. E.g., if Left button and Right button are pressed, returns 3 (=1 | 2). System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. System.Int64 pointerId A unique identifier for the pointer causing the event. System.Single width The width (magnitude on the X axis), in CSS pixels, of the contact geometry of the pointer. System.Single height The height (magnitude on the Y axis), in CSS pixels, of the contact geometry of the pointer. System.Single pressure The normalized pressure of the pointer input in the range of 0 to 1, where 0 and 1 represent the minimum and maximum pressure the hardware is capable of detecting, respectively. System.Single tiltX The plane angle (in degrees, in the range of -90 to 90) between the Y-Z plane and the plane containing both the transducer (e.g. pen stylus) axis and the Y axis. System.Single tiltY The plane angle (in degrees, in the range of -90 to 90) between the X-Z plane and the plane containing both the transducer (e.g. pen stylus) axis and the X axis. System.String pointerType Indicates the device type that caused the event. Must be one of the strings mouse, pen or touch, or an empty string. System.Boolean isPrimary Indicates if the pointer represents the primary pointer of this pointer type. | Improve this Doc View Source LostPointerCaptureAsync(IElement, PointerEventArgs) Raises the @onlostpointercapture event on element , passing the provided eventArgs to the event handler. Declaration public static Task LostPointerCaptureAsync(this IElement element, PointerEventArgs eventArgs) Parameters Type Name Description IElement element PointerEventArgs eventArgs Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source PointerDown(IElement, PointerEventArgs) Raises the @onpointerdown event on element , passing the provided eventArgs to the event handler. Declaration public static void PointerDown(this IElement element, PointerEventArgs eventArgs) Parameters Type Name Description IElement element The element to raise the event on. PointerEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source PointerDown(IElement, Int64, Double, Double, Double, Double, Int64, Int64, Boolean, Boolean, Boolean, Boolean, String, Int64, Single, Single, Single, Single, Single, String, Boolean) Raises the @onpointerdown event on element , passing the provided properties to the event handler via a object. Declaration public static void PointerDown(this IElement element, long detail = 0L, double screenX = 0, double screenY = 0, double clientX = 0, double clientY = 0, long button = 0L, long buttons = 0L, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null, long pointerId = 0L, float width = 0F, float height = 0F, float pressure = 0F, float tiltX = 0F, float tiltY = 0F, string pointerType = null, bool isPrimary = false) Parameters Type Name Description IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. System.Double screenX The X coordinate of the mouse pointer in global (screen) coordinates. System.Double screenY The Y coordinate of the mouse pointer in global (screen) coordinates. System.Double clientX The X coordinate of the mouse pointer in local (DOM content) coordinates. System.Double clientY The Y coordinate of the mouse pointer in local (DOM content) coordinates. System.Int64 button The button number that was pressed when the mouse event was fired: Left button=0, middle button=1 (if present), right button=2. For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left. System.Int64 buttons The buttons being pressed when the mouse event was fired: Left button=1, Right button=2, Middle (wheel) button=4, 4th button (typically, \"Browser Back\" button)=8, 5th button (typically, \"Browser Forward\" button)=16. If two or more buttons are pressed, returns the logical sum of the values. E.g., if Left button and Right button are pressed, returns 3 (=1 | 2). System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. System.Int64 pointerId A unique identifier for the pointer causing the event. System.Single width The width (magnitude on the X axis), in CSS pixels, of the contact geometry of the pointer. System.Single height The height (magnitude on the Y axis), in CSS pixels, of the contact geometry of the pointer. System.Single pressure The normalized pressure of the pointer input in the range of 0 to 1, where 0 and 1 represent the minimum and maximum pressure the hardware is capable of detecting, respectively. System.Single tiltX The plane angle (in degrees, in the range of -90 to 90) between the Y-Z plane and the plane containing both the transducer (e.g. pen stylus) axis and the Y axis. System.Single tiltY The plane angle (in degrees, in the range of -90 to 90) between the X-Z plane and the plane containing both the transducer (e.g. pen stylus) axis and the X axis. System.String pointerType Indicates the device type that caused the event. Must be one of the strings mouse, pen or touch, or an empty string. System.Boolean isPrimary Indicates if the pointer represents the primary pointer of this pointer type. | Improve this Doc View Source PointerDownAsync(IElement, PointerEventArgs) Raises the @onpointerdown event on element , passing the provided eventArgs to the event handler. Declaration public static Task PointerDownAsync(this IElement element, PointerEventArgs eventArgs) Parameters Type Name Description IElement element PointerEventArgs eventArgs Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source PointerEnter(IElement, PointerEventArgs) Raises the @onpointerenter event on element , passing the provided eventArgs to the event handler. Declaration public static void PointerEnter(this IElement element, PointerEventArgs eventArgs) Parameters Type Name Description IElement element The element to raise the event on. PointerEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source PointerEnter(IElement, Int64, Double, Double, Double, Double, Int64, Int64, Boolean, Boolean, Boolean, Boolean, String, Int64, Single, Single, Single, Single, Single, String, Boolean) Raises the @onpointerenter event on element , passing the provided properties to the event handler via a object. Declaration public static void PointerEnter(this IElement element, long detail = 0L, double screenX = 0, double screenY = 0, double clientX = 0, double clientY = 0, long button = 0L, long buttons = 0L, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null, long pointerId = 0L, float width = 0F, float height = 0F, float pressure = 0F, float tiltX = 0F, float tiltY = 0F, string pointerType = null, bool isPrimary = false) Parameters Type Name Description IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. System.Double screenX The X coordinate of the mouse pointer in global (screen) coordinates. System.Double screenY The Y coordinate of the mouse pointer in global (screen) coordinates. System.Double clientX The X coordinate of the mouse pointer in local (DOM content) coordinates. System.Double clientY The Y coordinate of the mouse pointer in local (DOM content) coordinates. System.Int64 button The button number that was pressed when the mouse event was fired: Left button=0, middle button=1 (if present), right button=2. For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left. System.Int64 buttons The buttons being pressed when the mouse event was fired: Left button=1, Right button=2, Middle (wheel) button=4, 4th button (typically, \"Browser Back\" button)=8, 5th button (typically, \"Browser Forward\" button)=16. If two or more buttons are pressed, returns the logical sum of the values. E.g., if Left button and Right button are pressed, returns 3 (=1 | 2). System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. System.Int64 pointerId A unique identifier for the pointer causing the event. System.Single width The width (magnitude on the X axis), in CSS pixels, of the contact geometry of the pointer. System.Single height The height (magnitude on the Y axis), in CSS pixels, of the contact geometry of the pointer. System.Single pressure The normalized pressure of the pointer input in the range of 0 to 1, where 0 and 1 represent the minimum and maximum pressure the hardware is capable of detecting, respectively. System.Single tiltX The plane angle (in degrees, in the range of -90 to 90) between the Y-Z plane and the plane containing both the transducer (e.g. pen stylus) axis and the Y axis. System.Single tiltY The plane angle (in degrees, in the range of -90 to 90) between the X-Z plane and the plane containing both the transducer (e.g. pen stylus) axis and the X axis. System.String pointerType Indicates the device type that caused the event. Must be one of the strings mouse, pen or touch, or an empty string. System.Boolean isPrimary Indicates if the pointer represents the primary pointer of this pointer type. | Improve this Doc View Source PointerEnterAsync(IElement, PointerEventArgs) Raises the @onpointerenter event on element , passing the provided eventArgs to the event handler. Declaration public static Task PointerEnterAsync(this IElement element, PointerEventArgs eventArgs) Parameters Type Name Description IElement element PointerEventArgs eventArgs Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source PointerLeave(IElement, PointerEventArgs) Raises the @onpointerleave event on element , passing the provided eventArgs to the event handler. Declaration public static void PointerLeave(this IElement element, PointerEventArgs eventArgs) Parameters Type Name Description IElement element The element to raise the event on. PointerEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source PointerLeave(IElement, Int64, Double, Double, Double, Double, Int64, Int64, Boolean, Boolean, Boolean, Boolean, String, Int64, Single, Single, Single, Single, Single, String, Boolean) Raises the @onpointerleave event on element , passing the provided properties to the event handler via a object. Declaration public static void PointerLeave(this IElement element, long detail = 0L, double screenX = 0, double screenY = 0, double clientX = 0, double clientY = 0, long button = 0L, long buttons = 0L, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null, long pointerId = 0L, float width = 0F, float height = 0F, float pressure = 0F, float tiltX = 0F, float tiltY = 0F, string pointerType = null, bool isPrimary = false) Parameters Type Name Description IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. System.Double screenX The X coordinate of the mouse pointer in global (screen) coordinates. System.Double screenY The Y coordinate of the mouse pointer in global (screen) coordinates. System.Double clientX The X coordinate of the mouse pointer in local (DOM content) coordinates. System.Double clientY The Y coordinate of the mouse pointer in local (DOM content) coordinates. System.Int64 button The button number that was pressed when the mouse event was fired: Left button=0, middle button=1 (if present), right button=2. For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left. System.Int64 buttons The buttons being pressed when the mouse event was fired: Left button=1, Right button=2, Middle (wheel) button=4, 4th button (typically, \"Browser Back\" button)=8, 5th button (typically, \"Browser Forward\" button)=16. If two or more buttons are pressed, returns the logical sum of the values. E.g., if Left button and Right button are pressed, returns 3 (=1 | 2). System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. System.Int64 pointerId A unique identifier for the pointer causing the event. System.Single width The width (magnitude on the X axis), in CSS pixels, of the contact geometry of the pointer. System.Single height The height (magnitude on the Y axis), in CSS pixels, of the contact geometry of the pointer. System.Single pressure The normalized pressure of the pointer input in the range of 0 to 1, where 0 and 1 represent the minimum and maximum pressure the hardware is capable of detecting, respectively. System.Single tiltX The plane angle (in degrees, in the range of -90 to 90) between the Y-Z plane and the plane containing both the transducer (e.g. pen stylus) axis and the Y axis. System.Single tiltY The plane angle (in degrees, in the range of -90 to 90) between the X-Z plane and the plane containing both the transducer (e.g. pen stylus) axis and the X axis. System.String pointerType Indicates the device type that caused the event. Must be one of the strings mouse, pen or touch, or an empty string. System.Boolean isPrimary Indicates if the pointer represents the primary pointer of this pointer type. | Improve this Doc View Source PointerLeaveAsync(IElement, PointerEventArgs) Raises the @onpointerleave event on element , passing the provided eventArgs to the event handler. Declaration public static Task PointerLeaveAsync(this IElement element, PointerEventArgs eventArgs) Parameters Type Name Description IElement element PointerEventArgs eventArgs Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source PointerMove(IElement, PointerEventArgs) Raises the @onpointermove event on element , passing the provided eventArgs to the event handler. Declaration public static void PointerMove(this IElement element, PointerEventArgs eventArgs) Parameters Type Name Description IElement element The element to raise the event on. PointerEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source PointerMove(IElement, Int64, Double, Double, Double, Double, Int64, Int64, Boolean, Boolean, Boolean, Boolean, String, Int64, Single, Single, Single, Single, Single, String, Boolean) Raises the @onpointermove event on element , passing the provided properties to the event handler via a object. Declaration public static void PointerMove(this IElement element, long detail = 0L, double screenX = 0, double screenY = 0, double clientX = 0, double clientY = 0, long button = 0L, long buttons = 0L, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null, long pointerId = 0L, float width = 0F, float height = 0F, float pressure = 0F, float tiltX = 0F, float tiltY = 0F, string pointerType = null, bool isPrimary = false) Parameters Type Name Description IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. System.Double screenX The X coordinate of the mouse pointer in global (screen) coordinates. System.Double screenY The Y coordinate of the mouse pointer in global (screen) coordinates. System.Double clientX The X coordinate of the mouse pointer in local (DOM content) coordinates. System.Double clientY The Y coordinate of the mouse pointer in local (DOM content) coordinates. System.Int64 button The button number that was pressed when the mouse event was fired: Left button=0, middle button=1 (if present), right button=2. For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left. System.Int64 buttons The buttons being pressed when the mouse event was fired: Left button=1, Right button=2, Middle (wheel) button=4, 4th button (typically, \"Browser Back\" button)=8, 5th button (typically, \"Browser Forward\" button)=16. If two or more buttons are pressed, returns the logical sum of the values. E.g., if Left button and Right button are pressed, returns 3 (=1 | 2). System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. System.Int64 pointerId A unique identifier for the pointer causing the event. System.Single width The width (magnitude on the X axis), in CSS pixels, of the contact geometry of the pointer. System.Single height The height (magnitude on the Y axis), in CSS pixels, of the contact geometry of the pointer. System.Single pressure The normalized pressure of the pointer input in the range of 0 to 1, where 0 and 1 represent the minimum and maximum pressure the hardware is capable of detecting, respectively. System.Single tiltX The plane angle (in degrees, in the range of -90 to 90) between the Y-Z plane and the plane containing both the transducer (e.g. pen stylus) axis and the Y axis. System.Single tiltY The plane angle (in degrees, in the range of -90 to 90) between the X-Z plane and the plane containing both the transducer (e.g. pen stylus) axis and the X axis. System.String pointerType Indicates the device type that caused the event. Must be one of the strings mouse, pen or touch, or an empty string. System.Boolean isPrimary Indicates if the pointer represents the primary pointer of this pointer type. | Improve this Doc View Source PointerMoveAsync(IElement, PointerEventArgs) Raises the @onpointermove event on element , passing the provided eventArgs to the event handler. Declaration public static Task PointerMoveAsync(this IElement element, PointerEventArgs eventArgs) Parameters Type Name Description IElement element PointerEventArgs eventArgs Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source PointerOut(IElement, PointerEventArgs) Raises the @onpointerout event on element , passing the provided eventArgs to the event handler. Declaration public static void PointerOut(this IElement element, PointerEventArgs eventArgs) Parameters Type Name Description IElement element The element to raise the event on. PointerEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source PointerOut(IElement, Int64, Double, Double, Double, Double, Int64, Int64, Boolean, Boolean, Boolean, Boolean, String, Int64, Single, Single, Single, Single, Single, String, Boolean) Raises the @onpointerout event on element , passing the provided properties to the event handler via a object. Declaration public static void PointerOut(this IElement element, long detail = 0L, double screenX = 0, double screenY = 0, double clientX = 0, double clientY = 0, long button = 0L, long buttons = 0L, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null, long pointerId = 0L, float width = 0F, float height = 0F, float pressure = 0F, float tiltX = 0F, float tiltY = 0F, string pointerType = null, bool isPrimary = false) Parameters Type Name Description IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. System.Double screenX The X coordinate of the mouse pointer in global (screen) coordinates. System.Double screenY The Y coordinate of the mouse pointer in global (screen) coordinates. System.Double clientX The X coordinate of the mouse pointer in local (DOM content) coordinates. System.Double clientY The Y coordinate of the mouse pointer in local (DOM content) coordinates. System.Int64 button The button number that was pressed when the mouse event was fired: Left button=0, middle button=1 (if present), right button=2. For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left. System.Int64 buttons The buttons being pressed when the mouse event was fired: Left button=1, Right button=2, Middle (wheel) button=4, 4th button (typically, \"Browser Back\" button)=8, 5th button (typically, \"Browser Forward\" button)=16. If two or more buttons are pressed, returns the logical sum of the values. E.g., if Left button and Right button are pressed, returns 3 (=1 | 2). System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. System.Int64 pointerId A unique identifier for the pointer causing the event. System.Single width The width (magnitude on the X axis), in CSS pixels, of the contact geometry of the pointer. System.Single height The height (magnitude on the Y axis), in CSS pixels, of the contact geometry of the pointer. System.Single pressure The normalized pressure of the pointer input in the range of 0 to 1, where 0 and 1 represent the minimum and maximum pressure the hardware is capable of detecting, respectively. System.Single tiltX The plane angle (in degrees, in the range of -90 to 90) between the Y-Z plane and the plane containing both the transducer (e.g. pen stylus) axis and the Y axis. System.Single tiltY The plane angle (in degrees, in the range of -90 to 90) between the X-Z plane and the plane containing both the transducer (e.g. pen stylus) axis and the X axis. System.String pointerType Indicates the device type that caused the event. Must be one of the strings mouse, pen or touch, or an empty string. System.Boolean isPrimary Indicates if the pointer represents the primary pointer of this pointer type. | Improve this Doc View Source PointerOutAsync(IElement, PointerEventArgs) Raises the @onpointerout event on element , passing the provided eventArgs to the event handler. Declaration public static Task PointerOutAsync(this IElement element, PointerEventArgs eventArgs) Parameters Type Name Description IElement element PointerEventArgs eventArgs Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source PointerOver(IElement, PointerEventArgs) Raises the @onpointerover event on element , passing the provided eventArgs to the event handler. Declaration public static void PointerOver(this IElement element, PointerEventArgs eventArgs) Parameters Type Name Description IElement element The element to raise the event on. PointerEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source PointerOver(IElement, Int64, Double, Double, Double, Double, Int64, Int64, Boolean, Boolean, Boolean, Boolean, String, Int64, Single, Single, Single, Single, Single, String, Boolean) Raises the @onpointerover event on element , passing the provided properties to the event handler via a object. Declaration public static void PointerOver(this IElement element, long detail = 0L, double screenX = 0, double screenY = 0, double clientX = 0, double clientY = 0, long button = 0L, long buttons = 0L, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null, long pointerId = 0L, float width = 0F, float height = 0F, float pressure = 0F, float tiltX = 0F, float tiltY = 0F, string pointerType = null, bool isPrimary = false) Parameters Type Name Description IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. System.Double screenX The X coordinate of the mouse pointer in global (screen) coordinates. System.Double screenY The Y coordinate of the mouse pointer in global (screen) coordinates. System.Double clientX The X coordinate of the mouse pointer in local (DOM content) coordinates. System.Double clientY The Y coordinate of the mouse pointer in local (DOM content) coordinates. System.Int64 button The button number that was pressed when the mouse event was fired: Left button=0, middle button=1 (if present), right button=2. For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left. System.Int64 buttons The buttons being pressed when the mouse event was fired: Left button=1, Right button=2, Middle (wheel) button=4, 4th button (typically, \"Browser Back\" button)=8, 5th button (typically, \"Browser Forward\" button)=16. If two or more buttons are pressed, returns the logical sum of the values. E.g., if Left button and Right button are pressed, returns 3 (=1 | 2). System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. System.Int64 pointerId A unique identifier for the pointer causing the event. System.Single width The width (magnitude on the X axis), in CSS pixels, of the contact geometry of the pointer. System.Single height The height (magnitude on the Y axis), in CSS pixels, of the contact geometry of the pointer. System.Single pressure The normalized pressure of the pointer input in the range of 0 to 1, where 0 and 1 represent the minimum and maximum pressure the hardware is capable of detecting, respectively. System.Single tiltX The plane angle (in degrees, in the range of -90 to 90) between the Y-Z plane and the plane containing both the transducer (e.g. pen stylus) axis and the Y axis. System.Single tiltY The plane angle (in degrees, in the range of -90 to 90) between the X-Z plane and the plane containing both the transducer (e.g. pen stylus) axis and the X axis. System.String pointerType Indicates the device type that caused the event. Must be one of the strings mouse, pen or touch, or an empty string. System.Boolean isPrimary Indicates if the pointer represents the primary pointer of this pointer type. | Improve this Doc View Source PointerOverAsync(IElement, PointerEventArgs) Raises the @onpointerover event on element , passing the provided eventArgs to the event handler. Declaration public static Task PointerOverAsync(this IElement element, PointerEventArgs eventArgs) Parameters Type Name Description IElement element PointerEventArgs eventArgs Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source PointerUp(IElement, PointerEventArgs) Raises the @onpointerup event on element , passing the provided eventArgs to the event handler. Declaration public static void PointerUp(this IElement element, PointerEventArgs eventArgs) Parameters Type Name Description IElement element The element to raise the event on. PointerEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source PointerUp(IElement, Int64, Double, Double, Double, Double, Int64, Int64, Boolean, Boolean, Boolean, Boolean, String, Int64, Single, Single, Single, Single, Single, String, Boolean) Raises the @onpointerup event on element , passing the provided properties to the event handler via a object. Declaration public static void PointerUp(this IElement element, long detail = 0L, double screenX = 0, double screenY = 0, double clientX = 0, double clientY = 0, long button = 0L, long buttons = 0L, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null, long pointerId = 0L, float width = 0F, float height = 0F, float pressure = 0F, float tiltX = 0F, float tiltY = 0F, string pointerType = null, bool isPrimary = false) Parameters Type Name Description IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. System.Double screenX The X coordinate of the mouse pointer in global (screen) coordinates. System.Double screenY The Y coordinate of the mouse pointer in global (screen) coordinates. System.Double clientX The X coordinate of the mouse pointer in local (DOM content) coordinates. System.Double clientY The Y coordinate of the mouse pointer in local (DOM content) coordinates. System.Int64 button The button number that was pressed when the mouse event was fired: Left button=0, middle button=1 (if present), right button=2. For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left. System.Int64 buttons The buttons being pressed when the mouse event was fired: Left button=1, Right button=2, Middle (wheel) button=4, 4th button (typically, \"Browser Back\" button)=8, 5th button (typically, \"Browser Forward\" button)=16. If two or more buttons are pressed, returns the logical sum of the values. E.g., if Left button and Right button are pressed, returns 3 (=1 | 2). System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. System.Int64 pointerId A unique identifier for the pointer causing the event. System.Single width The width (magnitude on the X axis), in CSS pixels, of the contact geometry of the pointer. System.Single height The height (magnitude on the Y axis), in CSS pixels, of the contact geometry of the pointer. System.Single pressure The normalized pressure of the pointer input in the range of 0 to 1, where 0 and 1 represent the minimum and maximum pressure the hardware is capable of detecting, respectively. System.Single tiltX The plane angle (in degrees, in the range of -90 to 90) between the Y-Z plane and the plane containing both the transducer (e.g. pen stylus) axis and the Y axis. System.Single tiltY The plane angle (in degrees, in the range of -90 to 90) between the X-Z plane and the plane containing both the transducer (e.g. pen stylus) axis and the X axis. System.String pointerType Indicates the device type that caused the event. Must be one of the strings mouse, pen or touch, or an empty string. System.Boolean isPrimary Indicates if the pointer represents the primary pointer of this pointer type. | Improve this Doc View Source PointerUpAsync(IElement, PointerEventArgs) Raises the @onpointerup event on element , passing the provided eventArgs to the event handler. Declaration public static Task PointerUpAsync(this IElement element, PointerEventArgs eventArgs) Parameters Type Name Description IElement element PointerEventArgs eventArgs Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done."
  },
  "api/Bunit.ProgressEventDispatchExtensions.html": {
    "href": "api/Bunit.ProgressEventDispatchExtensions.html",
    "title": "Class ProgressEventDispatchExtensions | bUnit",
    "keywords": "Class ProgressEventDispatchExtensions Pointer event dispatch helper extension methods. Inheritance System.Object ProgressEventDispatchExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.dll Syntax public static class ProgressEventDispatchExtensions Methods | Improve this Doc View Source Abort(IElement, ProgressEventArgs) Raises the @onabort event on element , passing the provided eventArgs to the event handler. Declaration public static void Abort(this IElement element, ProgressEventArgs eventArgs) Parameters Type Name Description IElement element The element to raise the event on. ProgressEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source Abort(IElement, Boolean, Int64, Int64, String) Raises the @onabort event on element , passing the provided properties to the event handler via a object. Declaration public static void Abort(this IElement element, bool lengthComputable = false, long loaded = 0L, long total = 0L, string type = null) Parameters Type Name Description IElement element The element to raise the event on. System.Boolean lengthComputable Whether or not the total size of the transfer is known. System.Int64 loaded The number of bytes transferred since the beginning of the operation. This doesn't include headers and other overhead, but only the content itself. System.Int64 total The total number of bytes of content that will be transferred during the operation. If the total size is unknown, this value is zero. System.String type Gets or sets the type of the event. | Improve this Doc View Source AbortAsync(IElement, ProgressEventArgs) Raises the @onabort event on element , passing the provided eventArgs to the event handler. Declaration public static Task AbortAsync(this IElement element, ProgressEventArgs eventArgs) Parameters Type Name Description IElement element ProgressEventArgs eventArgs Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source Error(IElement, ProgressEventArgs) Raises the @onerror event on element , passing the provided eventArgs to the event handler. Declaration public static void Error(this IElement element, ProgressEventArgs eventArgs) Parameters Type Name Description IElement element The element to raise the event on. ProgressEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source Error(IElement, Boolean, Int64, Int64, String) Raises the @onerror event on element , passing the provided properties to the event handler via a object. Declaration public static void Error(this IElement element, bool lengthComputable = false, long loaded = 0L, long total = 0L, string type = null) Parameters Type Name Description IElement element The element to raise the event on. System.Boolean lengthComputable Whether or not the total size of the transfer is known. System.Int64 loaded The number of bytes transferred since the beginning of the operation. This doesn't include headers and other overhead, but only the content itself. System.Int64 total The total number of bytes of content that will be transferred during the operation. If the total size is unknown, this value is zero. System.String type Gets or sets the type of the event. | Improve this Doc View Source ErrorAsync(IElement, ProgressEventArgs) Raises the @onerror event on element , passing the provided eventArgs to the event handler. Declaration public static Task ErrorAsync(this IElement element, ProgressEventArgs eventArgs) Parameters Type Name Description IElement element ProgressEventArgs eventArgs Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source Load(IElement, ProgressEventArgs) Raises the @onload event on element , passing the provided eventArgs to the event handler. Declaration public static void Load(this IElement element, ProgressEventArgs eventArgs) Parameters Type Name Description IElement element The element to raise the event on. ProgressEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source Load(IElement, Boolean, Int64, Int64, String) Raises the @onload event on element , passing the provided properties to the event handler via a object. Declaration public static void Load(this IElement element, bool lengthComputable = false, long loaded = 0L, long total = 0L, string type = null) Parameters Type Name Description IElement element The element to raise the event on. System.Boolean lengthComputable Whether or not the total size of the transfer is known. System.Int64 loaded The number of bytes transferred since the beginning of the operation. This doesn't include headers and other overhead, but only the content itself. System.Int64 total The total number of bytes of content that will be transferred during the operation. If the total size is unknown, this value is zero. System.String type Gets or sets the type of the event. | Improve this Doc View Source LoadAsync(IElement, ProgressEventArgs) Raises the @onload event on element , passing the provided eventArgs to the event handler. Declaration public static Task LoadAsync(this IElement element, ProgressEventArgs eventArgs) Parameters Type Name Description IElement element ProgressEventArgs eventArgs Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source LoadEnd(IElement, ProgressEventArgs) Raises the @onloadend event on element , passing the provided eventArgs to the event handler. Declaration public static void LoadEnd(this IElement element, ProgressEventArgs eventArgs) Parameters Type Name Description IElement element The element to raise the event on. ProgressEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source LoadEnd(IElement, Boolean, Int64, Int64, String) Raises the @onloadend event on element , passing the provided properties to the event handler via a object. Declaration public static void LoadEnd(this IElement element, bool lengthComputable = false, long loaded = 0L, long total = 0L, string type = null) Parameters Type Name Description IElement element The element to raise the event on. System.Boolean lengthComputable Whether or not the total size of the transfer is known. System.Int64 loaded The number of bytes transferred since the beginning of the operation. This doesn't include headers and other overhead, but only the content itself. System.Int64 total The total number of bytes of content that will be transferred during the operation. If the total size is unknown, this value is zero. System.String type Gets or sets the type of the event. | Improve this Doc View Source LoadEndAsync(IElement, ProgressEventArgs) Raises the @onloadend event on element , passing the provided eventArgs to the event handler. Declaration public static Task LoadEndAsync(this IElement element, ProgressEventArgs eventArgs) Parameters Type Name Description IElement element ProgressEventArgs eventArgs Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source LoadStart(IElement, ProgressEventArgs) Raises the @onloadstart event on element , passing the provided eventArgs to the event handler. Declaration public static void LoadStart(this IElement element, ProgressEventArgs eventArgs) Parameters Type Name Description IElement element The element to raise the event on. ProgressEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source LoadStart(IElement, Boolean, Int64, Int64, String) Raises the @onloadstart event on element , passing the provided properties to the event handler via a object. Declaration public static void LoadStart(this IElement element, bool lengthComputable = false, long loaded = 0L, long total = 0L, string type = null) Parameters Type Name Description IElement element The element to raise the event on. System.Boolean lengthComputable Whether or not the total size of the transfer is known. System.Int64 loaded The number of bytes transferred since the beginning of the operation. This doesn't include headers and other overhead, but only the content itself. System.Int64 total The total number of bytes of content that will be transferred during the operation. If the total size is unknown, this value is zero. System.String type Gets or sets the type of the event. | Improve this Doc View Source LoadStartAsync(IElement, ProgressEventArgs) Raises the @onloadstart event on element , passing the provided eventArgs to the event handler. Declaration public static Task LoadStartAsync(this IElement element, ProgressEventArgs eventArgs) Parameters Type Name Description IElement element ProgressEventArgs eventArgs Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source Progress(IElement, ProgressEventArgs) Raises the @onprogress event on element , passing the provided eventArgs to the event handler. Declaration public static void Progress(this IElement element, ProgressEventArgs eventArgs) Parameters Type Name Description IElement element The element to raise the event on. ProgressEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source Progress(IElement, Boolean, Int64, Int64, String) Raises the @onprogress event on element , passing the provided properties to the event handler via a object. Declaration public static void Progress(this IElement element, bool lengthComputable = false, long loaded = 0L, long total = 0L, string type = null) Parameters Type Name Description IElement element The element to raise the event on. System.Boolean lengthComputable Whether or not the total size of the transfer is known. System.Int64 loaded The number of bytes transferred since the beginning of the operation. This doesn't include headers and other overhead, but only the content itself. System.Int64 total The total number of bytes of content that will be transferred during the operation. If the total size is unknown, this value is zero. System.String type Gets or sets the type of the event. | Improve this Doc View Source ProgressAsync(IElement, ProgressEventArgs) Raises the @onprogress event on element , passing the provided eventArgs to the event handler. Declaration public static Task ProgressAsync(this IElement element, ProgressEventArgs eventArgs) Parameters Type Name Description IElement element ProgressEventArgs eventArgs Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source Timeout(IElement, ProgressEventArgs) Raises the @ontimeout event on element , passing the provided eventArgs to the event handler. Declaration public static void Timeout(this IElement element, ProgressEventArgs eventArgs) Parameters Type Name Description IElement element The element to raise the event on. ProgressEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source Timeout(IElement, Boolean, Int64, Int64, String) Raises the @ontimeout event on element , passing the provided properties to the event handler via a object. Declaration public static void Timeout(this IElement element, bool lengthComputable = false, long loaded = 0L, long total = 0L, string type = null) Parameters Type Name Description IElement element The element to raise the event on. System.Boolean lengthComputable Whether or not the total size of the transfer is known. System.Int64 loaded The number of bytes transferred since the beginning of the operation. This doesn't include headers and other overhead, but only the content itself. System.Int64 total The total number of bytes of content that will be transferred during the operation. If the total size is unknown, this value is zero. System.String type Gets or sets the type of the event. | Improve this Doc View Source TimeoutAsync(IElement, ProgressEventArgs) Raises the @ontimeout event on element , passing the provided eventArgs to the event handler. Declaration public static Task TimeoutAsync(this IElement element, ProgressEventArgs eventArgs) Parameters Type Name Description IElement element ProgressEventArgs eventArgs Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done."
  },
  "api/Bunit.RazorTestContext.html": {
    "href": "api/Bunit.RazorTestContext.html",
    "title": "Class RazorTestContext | bUnit",
    "keywords": "Class RazorTestContext A razor test context is a factory that makes it possible to create components under tests, either directly or through components declared in razor code. Inheritance System.Object TestContext RazorTestContext Implements IRazorTestContext ITestContext System.IDisposable Inherited Members TestContext.Renderer TestContext.Services TestContext.CreateNodes(String) TestContext.RenderComponent<TComponent>(ComponentParameter[]) TestContext.Dispose(Boolean) TestContext.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.dll Syntax public class RazorTestContext : TestContext, IRazorTestContext, ITestContext, IDisposable Constructors | Improve this Doc View Source RazorTestContext(IReadOnlyList<FragmentBase>) Creates an instance of the RazorTestContext that has access the fragments defined in the associated <Fixture> element. Declaration public RazorTestContext(IReadOnlyList<FragmentBase> testData) Parameters Type Name Description System.Collections.Generic.IReadOnlyList < FragmentBase > testData Methods | Improve this Doc View Source GetComponentUnderTest() Gets (and renders) the markup/component defined in the <Fixture><ComponentUnderTest>...<ComponentUnderTest/><Fixture/> element. The HTML/component is only rendered the first this method is called. Declaration public IRenderedFragment GetComponentUnderTest() Returns Type Description IRenderedFragment A IRenderedFragment | Improve this Doc View Source GetComponentUnderTest<TComponent>() Gets (and renders) the component of type TComponent defined in the <Fixture><ComponentUnderTest>...<ComponentUnderTest/><Fixture/> element. The HTML/component is only rendered the first this method is called. Declaration public IRenderedComponent<TComponent> GetComponentUnderTest<TComponent>() where TComponent : class, IComponent Returns Type Description IRenderedComponent <TComponent> A IRenderedComponent<TComponent> Type Parameters Name Description TComponent The type of component to render | Improve this Doc View Source GetFragment(String) Gets (and renders) the markup/component defined in the <Fixture><Fragment id=\" id \" >...<Fragment/><Fixture/> element. If id is null/not provided, the component defined in the first <Fragment/> in the <Fixture/> element is returned. The HTML/component is only rendered the first this method is called. Declaration public IRenderedFragment GetFragment(string id = null) Parameters Type Name Description System.String id The id of the fragment where the HTML/component is defined in Razor syntax. Returns Type Description IRenderedFragment A IRenderedFragment | Improve this Doc View Source GetFragment<TComponent>(String) Gets (and renders) the component of type TComponent defined in the <Fixture><Fragment id=\" id \" >...<Fragment/><Fixture/> element. If id is null/not provided, the component defined in the first <Fragment/> in the <Fixture/> element is returned. The HTML/component is only rendered the first this method is called. Declaration public IRenderedComponent<TComponent> GetFragment<TComponent>(string id = null) where TComponent : class, IComponent Parameters Type Name Description System.String id The id of the fragment where the component is defined in Razor syntax. Returns Type Description IRenderedComponent <TComponent> A IRenderedComponent<TComponent> Type Parameters Name Description TComponent The type of component to render Implements IRazorTestContext ITestContext System.IDisposable Extension Methods RenderWaitingHelperExtensions.WaitForNextRender(ITestContext, Action, Nullable<TimeSpan>) RenderWaitingHelperExtensions.WaitForState(ITestContext, Func<Boolean>, Nullable<TimeSpan>) RenderWaitingHelperExtensions.WaitForAssertion(ITestContext, Action, Nullable<TimeSpan>) JsRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.RenderedFragment.html": {
    "href": "api/Bunit.RenderedFragment.html",
    "title": "Class RenderedFragment | bUnit",
    "keywords": "Class RenderedFragment Represents a rendered fragment. Inheritance System.Object RenderedFragmentBase RenderedFragment Implements IRenderedFragment Inherited Members RenderedFragmentBase.Container RenderedFragmentBase.TestContext RenderedFragmentBase.Markup RenderedFragmentBase.Nodes RenderedFragmentBase.RenderEvents RenderedFragmentBase.FindComponent<T>() RenderedFragmentBase.FindComponents<T>() RenderedFragmentBase.SaveSnapshot() RenderedFragmentBase.GetChangesSinceSnapshot() RenderedFragmentBase.GetChangesSinceFirstRender() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.dll Syntax public class RenderedFragment : RenderedFragmentBase, IRenderedFragment Constructors | Improve this Doc View Source RenderedFragment(ITestContext, RenderFragment) Instantiates a RenderedFragment which will render the renderFragment passed to it. Declaration public RenderedFragment(ITestContext testContext, RenderFragment renderFragment) Parameters Type Name Description ITestContext testContext RenderFragment renderFragment Properties | Improve this Doc View Source ComponentId Gets the id of the rendered component or fragment. Declaration public override int ComponentId { get; } Property Value Type Description System.Int32 Overrides RenderedFragmentBase.ComponentId | Improve this Doc View Source FirstRenderMarkup Gets the first rendered markup. Declaration protected override string FirstRenderMarkup { get; } Property Value Type Description System.String Overrides RenderedFragmentBase.FirstRenderMarkup Implements IRenderedFragment Extension Methods CompareToExtensions.CompareTo(IRenderedFragment, String) CompareToExtensions.CompareTo(IRenderedFragment, IRenderedFragment) MarkupMatchesAssertExtensions.MarkupMatches(IRenderedFragment, String, String) MarkupMatchesAssertExtensions.MarkupMatches(IRenderedFragment, IRenderedFragment, String) RenderedFragmentQueryExtensions.Find(IRenderedFragment, String) RenderedFragmentQueryExtensions.FindAll(IRenderedFragment, String, Boolean) RenderWaitingHelperExtensions.WaitForState(IRenderedFragment, Func<Boolean>, Nullable<TimeSpan>) RenderWaitingHelperExtensions.WaitForAssertion(IRenderedFragment, Action, Nullable<TimeSpan>) JsRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.RenderedFragmentBase.html": {
    "href": "api/Bunit.RenderedFragmentBase.html",
    "title": "Class RenderedFragmentBase | bUnit",
    "keywords": "Class RenderedFragmentBase Represents an abstract IRenderedFragment with base functionality. Inheritance System.Object RenderedFragmentBase RenderedFragment Implements IRenderedFragment Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.dll Syntax public abstract class RenderedFragmentBase : IRenderedFragment Constructors | Improve this Doc View Source RenderedFragmentBase(ITestContext, ContainerComponent) Creates an instance of the RenderedFragmentBase class. Declaration protected RenderedFragmentBase(ITestContext testContext, ContainerComponent container) Parameters Type Name Description ITestContext testContext ContainerComponent container | Improve this Doc View Source RenderedFragmentBase(ITestContext, RenderFragment) Creates an instance of the RenderedFragmentBase class. Declaration protected RenderedFragmentBase(ITestContext testContext, RenderFragment renderFragment) Parameters Type Name Description ITestContext testContext RenderFragment renderFragment Properties | Improve this Doc View Source ComponentId Gets the id of the rendered component or fragment. Declaration public abstract int ComponentId { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Container Gets the container that handles the (re)rendering of the fragment. Declaration protected ContainerComponent Container { get; } Property Value Type Description ContainerComponent | Improve this Doc View Source FirstRenderMarkup Gets the first rendered markup. Declaration protected abstract string FirstRenderMarkup { get; } Property Value Type Description System.String | Improve this Doc View Source Markup Gets the HTML markup from the rendered fragment/component. Declaration public string Markup { get; } Property Value Type Description System.String | Improve this Doc View Source Nodes Gets the AngleSharp based on the HTML markup from the rendered fragment/component. Declaration public INodeList Nodes { get; } Property Value Type Description INodeList | Improve this Doc View Source RenderEvents Gets an System.IObservable<T> which will provide subscribers with RenderEvent s whenever the IRenderedFragment is rendered. Declaration public IObservable<RenderEvent> RenderEvents { get; } Property Value Type Description System.IObservable < RenderEvent > | Improve this Doc View Source TestContext Gets the ITestContext which this rendered fragment belongs to. Declaration public ITestContext TestContext { get; } Property Value Type Description ITestContext Methods | Improve this Doc View Source FindComponent<T>() Finds the first component of type TComponent in the render tree of this IRenderedFragment . Declaration public IRenderedComponent<T> FindComponent<T>() where T : class, IComponent Returns Type Description IRenderedComponent <T> The IRenderedComponent<TComponent> . Type Parameters Name Description T Exceptions Type Condition ComponentNotFoundException Thrown if a component of type TComponent was not found in the render tree. | Improve this Doc View Source FindComponents<T>() Finds all components of type TComponent in the render tree of this IRenderedFragment . Declaration public IReadOnlyList<IRenderedComponent<T>> FindComponents<T>() where T : class, IComponent Returns Type Description System.Collections.Generic.IReadOnlyList < IRenderedComponent <T>> The IRenderedComponent<TComponent> s Type Parameters Name Description T | Improve this Doc View Source GetChangesSinceFirstRender() Performs a comparison of the markup produced by the initial rendering of the fragment or component under test with the current rendering of the fragment or component under test. Declaration public IReadOnlyList<IDiff> GetChangesSinceFirstRender() Returns Type Description System.Collections.Generic.IReadOnlyList < IDiff > A list of differences found. | Improve this Doc View Source GetChangesSinceSnapshot() Performs a comparison of the markup produced by the rendering of the fragment or component under test at the time the SaveSnapshot() was called with the current rendering of the fragment or component under test. Declaration public IReadOnlyList<IDiff> GetChangesSinceSnapshot() Returns Type Description System.Collections.Generic.IReadOnlyList < IDiff > A list of differences found. | Improve this Doc View Source SaveSnapshot() Saves the markup from the current rendering of the fragment or component under test. Use the method GetChangesSinceSnapshot() later to get the difference between the snapshot and the rendered markup at that time. Declaration public void SaveSnapshot() Implements IRenderedFragment Extension Methods CompareToExtensions.CompareTo(IRenderedFragment, String) CompareToExtensions.CompareTo(IRenderedFragment, IRenderedFragment) MarkupMatchesAssertExtensions.MarkupMatches(IRenderedFragment, String, String) MarkupMatchesAssertExtensions.MarkupMatches(IRenderedFragment, IRenderedFragment, String) RenderedFragmentQueryExtensions.Find(IRenderedFragment, String) RenderedFragmentQueryExtensions.FindAll(IRenderedFragment, String, Boolean) RenderWaitingHelperExtensions.WaitForState(IRenderedFragment, Func<Boolean>, Nullable<TimeSpan>) RenderWaitingHelperExtensions.WaitForAssertion(IRenderedFragment, Action, Nullable<TimeSpan>) JsRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.RenderedFragmentQueryExtensions.html": {
    "href": "api/Bunit.RenderedFragmentQueryExtensions.html",
    "title": "Class RenderedFragmentQueryExtensions | bUnit",
    "keywords": "Class RenderedFragmentQueryExtensions Helper methods for querying IRenderedFragment . Inheritance System.Object RenderedFragmentQueryExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.dll Syntax public static class RenderedFragmentQueryExtensions Methods | Improve this Doc View Source Find(IRenderedFragment, String) Returns the first element from the rendered fragment or component under test, using the provided cssSelector , in a depth-first pre-order traversal of the rendered nodes. Declaration public static IElement Find(this IRenderedFragment renderedFragment, string cssSelector) Parameters Type Name Description IRenderedFragment renderedFragment The rendered fragment to search. System.String cssSelector The group of selectors to use. Returns Type Description IElement | Improve this Doc View Source FindAll(IRenderedFragment, String, Boolean) Returns a refreshable collection of s from the rendered fragment or component under test, using the provided cssSelector , in a depth-first pre-order traversal of the rendered nodes. Declaration public static IRefreshableElementCollection<IElement> FindAll(this IRenderedFragment renderedFragment, string cssSelector, bool enableAutoRefresh = false) Parameters Type Name Description IRenderedFragment renderedFragment The rendered fragment to search. System.String cssSelector The group of selectors to use. System.Boolean enableAutoRefresh If true, the returned IRefreshableElementCollection<T> will automatically refresh its s whenever the renderedFragment changes. Returns Type Description IRefreshableElementCollection < IElement > An IRefreshableElementCollection<T> , that can be refreshed to execute the search again."
  },
  "api/Bunit.RenderEvent.html": {
    "href": "api/Bunit.RenderEvent.html",
    "title": "Class RenderEvent | bUnit",
    "keywords": "Class RenderEvent Represents a render event for a IRenderedFragment or generally from the TestRenderer . Inheritance System.Object RenderEvent Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.dll Syntax public sealed class RenderEvent Constructors | Improve this Doc View Source RenderEvent(RenderBatch, TestRenderer) Creates an instance of the RenderEvent type. Declaration public RenderEvent(in RenderBatch renderBatch, TestRenderer renderer) Parameters Type Name Description RenderBatch renderBatch TestRenderer renderer Properties | Improve this Doc View Source RenderBatch Gets the related RenderBatch from the render. Declaration public RenderBatch RenderBatch { get; } Property Value Type Description RenderBatch Methods | Improve this Doc View Source DidComponentRender(IRenderedFragment) Checks whether the renderedFragment or one or more of its sub components was rendered during the RenderEvent . Declaration public bool DidComponentRender(IRenderedFragment renderedFragment) Parameters Type Name Description IRenderedFragment renderedFragment Component to check if rendered. Returns Type Description System.Boolean True if the component or a sub component rendered, false otherwise. | Improve this Doc View Source HasChangesTo(IRenderedFragment) Checks whether the renderedFragment or one or more of its sub components was changed during the RenderEvent . Declaration public bool HasChangesTo(IRenderedFragment renderedFragment) Parameters Type Name Description IRenderedFragment renderedFragment Component to check for updates to. Returns Type Description System.Boolean True if RenderEvent contains updates to component, false otherwise. Extension Methods JsRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.RenderWaitingHelperExtensions.html": {
    "href": "api/Bunit.RenderWaitingHelperExtensions.html",
    "title": "Class RenderWaitingHelperExtensions | bUnit",
    "keywords": "Class RenderWaitingHelperExtensions Helper methods dealing with async rendering during testing. Inheritance System.Object RenderWaitingHelperExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.dll Syntax public static class RenderWaitingHelperExtensions Methods | Improve this Doc View Source WaitForAssertion(IRenderedFragment, Action, Nullable<TimeSpan>) Wait until the provided assertion action passes (i.e. does not throw an assertion exception), or the timeout is reached (default is one second). The assertion is attempted initially, and then each time the renderedFragment renders. Declaration public static void WaitForAssertion(this IRenderedFragment renderedFragment, Action assertion, TimeSpan? timeout = default(TimeSpan? )) Parameters Type Name Description IRenderedFragment renderedFragment The rendered fragment to wait for renders from. System.Action assertion The verification or assertion to perform. System.Nullable < System.TimeSpan > timeout The maximum time to attempt the verification. Exceptions Type Condition System.ArgumentNullException Thrown if renderedFragment is null. WaitForAssertionFailedException Thrown if the timeout has been reached. See the inner exception to see the captured assertion exception. | Improve this Doc View Source WaitForAssertion(ITestContext, Action, Nullable<TimeSpan>) Wait until the provided assertion action passes (i.e. does not throw an assertion exception), or the timeout is reached (default is one second). The assertion is attempted initially, and then each time the renderer in the testContext renders. Declaration public static void WaitForAssertion(this ITestContext testContext, Action assertion, TimeSpan? timeout = default(TimeSpan? )) Parameters Type Name Description ITestContext testContext The test context to wait for renders from. System.Action assertion The verification or assertion to perform. System.Nullable < System.TimeSpan > timeout The maximum time to attempt the verification. Exceptions Type Condition System.ArgumentNullException Thrown if testContext is null. WaitForAssertionFailedException Thrown if the timeout has been reached. See the inner exception to see the captured assertion exception. | Improve this Doc View Source WaitForNextRender(ITestContext, Action, Nullable<TimeSpan>) Wait for the next render to happen, or the timeout is reached (default is one second). If a renderTrigger action is provided, it is invoked before the waiting. Declaration [Obsolete(\"Use either the WaitForState or WaitForAssertion method instead. It will make your test more resilient to insignificant changes, as they will wait across multiple renders instead of just one. To make the change, run any render trigger first, then call either WaitForState or WaitForAssertion with the appropriate input. This method will be removed before the 1.0.0 release.\", false)] public static void WaitForNextRender(this ITestContext testContext, Action renderTrigger = null, TimeSpan? timeout = default(TimeSpan? )) Parameters Type Name Description ITestContext testContext The test context to wait for renders from. System.Action renderTrigger The action that somehow causes one or more components to render. System.Nullable < System.TimeSpan > timeout The maximum time to wait for the next render. If not provided the default is 1 second. During debugging, the timeout is automatically set to infinite. Exceptions Type Condition System.ArgumentNullException Thrown if testContext is null. WaitForRenderFailedException Thrown if no render happens within the specified timeout , or the default of 1 second, if non is specified. | Improve this Doc View Source WaitForState(IRenderedFragment, Func<Boolean>, Nullable<TimeSpan>) Wait until the provided statePredicate action returns true, or the timeout is reached (default is one second). The statePredicate is evaluated initially, and then each time the renderedFragment renders. Declaration public static void WaitForState(this IRenderedFragment renderedFragment, Func<bool> statePredicate, TimeSpan? timeout = default(TimeSpan? )) Parameters Type Name Description IRenderedFragment renderedFragment The rendered fragment to wait for renders from. System.Func < System.Boolean > statePredicate The predicate to invoke after each render, which returns true when the desired state has been reached. System.Nullable < System.TimeSpan > timeout The maximum time to wait for the desired state. Exceptions Type Condition System.ArgumentNullException Thrown if renderedFragment is null. WaitForStateFailedException Thrown if the statePredicate throw an exception during invocation, or if the timeout has been reached. See the inner exception for details. | Improve this Doc View Source WaitForState(ITestContext, Func<Boolean>, Nullable<TimeSpan>) Wait until the provided statePredicate action returns true, or the timeout is reached (default is one second). The statePredicate is evaluated initially, and then each time the renderer in the testContext renders. Declaration public static void WaitForState(this ITestContext testContext, Func<bool> statePredicate, TimeSpan? timeout = default(TimeSpan? )) Parameters Type Name Description ITestContext testContext The test context to wait for renders from. System.Func < System.Boolean > statePredicate The predicate to invoke after each render, which returns true when the desired state has been reached. System.Nullable < System.TimeSpan > timeout The maximum time to wait for the desired state. Exceptions Type Condition System.ArgumentNullException Thrown if testContext is null. WaitForStateFailedException Thrown if the statePredicate throw an exception during invocation, or if the timeout has been reached. See the inner exception for details."
  },
  "api/Bunit.ShouldBeAdditionAssertExtensions.html": {
    "href": "api/Bunit.ShouldBeAdditionAssertExtensions.html",
    "title": "Class ShouldBeAdditionAssertExtensions | bUnit",
    "keywords": "Class ShouldBeAdditionAssertExtensions A set of addition diff assert extensions Inheritance System.Object ShouldBeAdditionAssertExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.dll Syntax public static class ShouldBeAdditionAssertExtensions Methods | Improve this Doc View Source ShouldBeAddition(IDiff, IRenderedFragment, String) Verifies that the actualChange is an addition, i.e. that one or more nodes have been added, and verifies that the additions are equal to the rendered markup from the expectedChange IRenderedFragment . Declaration public static void ShouldBeAddition(this IDiff actualChange, IRenderedFragment expectedChange, string userMessage = null) Parameters Type Name Description IDiff actualChange The change to verify IRenderedFragment expectedChange The expected additions to verify against System.String userMessage A custom user message to display in case the verification fails. | Improve this Doc View Source ShouldBeAddition(IDiff, INodeList, String) Verifies that the actualChange is an addition, i.e. that one or more nodes have been added, and verifies that the additions are equal to the expectedChange nodes. Declaration public static void ShouldBeAddition(this IDiff actualChange, INodeList expectedChange, string userMessage = null) Parameters Type Name Description IDiff actualChange The change to verify INodeList expectedChange The expected additions to verify against System.String userMessage A custom user message to display in case the verification fails. | Improve this Doc View Source ShouldBeAddition(IDiff, String, String) Verifies that the actualChange is an addition, i.e. that one or more nodes have been added, and verifies that the additions are equal to the markup specified in the expectedChange input. Declaration public static void ShouldBeAddition(this IDiff actualChange, string expectedChange, string userMessage = null) Parameters Type Name Description IDiff actualChange The change to verify System.String expectedChange The expected additions to verify against System.String userMessage A custom user message to display in case the verification fails."
  },
  "api/Bunit.ShouldBeRemovalAssertExtensions.html": {
    "href": "api/Bunit.ShouldBeRemovalAssertExtensions.html",
    "title": "Class ShouldBeRemovalAssertExtensions | bUnit",
    "keywords": "Class ShouldBeRemovalAssertExtensions A set of removal diff assert extensions Inheritance System.Object ShouldBeRemovalAssertExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.dll Syntax public static class ShouldBeRemovalAssertExtensions Methods | Improve this Doc View Source ShouldBeRemoval(IDiff, IRenderedFragment, String) Verifies that the actualChange is an removal, i.e. that one or more nodes have been removed, and verifies that the removed nodes are equal to the rendered markup from the expectedChange IRenderedFragment . Declaration public static void ShouldBeRemoval(this IDiff actualChange, IRenderedFragment expectedChange, string userMessage = null) Parameters Type Name Description IDiff actualChange The change to verify IRenderedFragment expectedChange The expected removal to verify against System.String userMessage A custom user message to display in case the verification fails. | Improve this Doc View Source ShouldBeRemoval(IDiff, INodeList, String) Verifies that the actualChange is an removal, i.e. that one or more nodes have been removed, and verifies that the removed nodes are equal to the expectedChange nodes. Declaration public static void ShouldBeRemoval(this IDiff actualChange, INodeList expectedChange, string userMessage = null) Parameters Type Name Description IDiff actualChange The change to verify INodeList expectedChange The expected removal to verify against System.String userMessage A custom user message to display in case the verification fails. | Improve this Doc View Source ShouldBeRemoval(IDiff, String, String) Verifies that the actualChange is an removal, i.e. that one or more nodes have been removed, and verifies that the removed nodes are equal to the markup specified in the expectedChange input. Declaration public static void ShouldBeRemoval(this IDiff actualChange, string expectedChange, string userMessage = null) Parameters Type Name Description IDiff actualChange The change to verify System.String expectedChange The expected removal to verify against System.String userMessage A custom user message to display in case the verification fails."
  },
  "api/Bunit.ShouldBeTextChangeAssertExtensions.html": {
    "href": "api/Bunit.ShouldBeTextChangeAssertExtensions.html",
    "title": "Class ShouldBeTextChangeAssertExtensions | bUnit",
    "keywords": "Class ShouldBeTextChangeAssertExtensions Verification helpers for text Inheritance System.Object ShouldBeTextChangeAssertExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.dll Syntax public static class ShouldBeTextChangeAssertExtensions Methods | Improve this Doc View Source ShouldBeAttributeChange(IDiff, String, String, String) Verifies that the actualChange diff is a change to the value of the specific attribute ( expectedAttrName ). Declaration public static void ShouldBeAttributeChange(this IDiff actualChange, string expectedAttrName, string expectedAttrValue, string userMessage = null) Parameters Type Name Description IDiff actualChange The actual change that has happened. System.String expectedAttrName The expected name of the changed attribute. System.String expectedAttrValue The expected value of the changed attribute. System.String userMessage A custom user message to show when the verification fails. | Improve this Doc View Source ShouldBeTextChange(IDiff, IRenderedFragment, String) Verifies that a diff is a change to a text node. Declaration public static void ShouldBeTextChange(this IDiff actualChange, IRenderedFragment expectedChange, string userMessage = null) Parameters Type Name Description IDiff actualChange The diff to verify. IRenderedFragment expectedChange The rendered fragment containing the expected text change. System.String userMessage A custom error message to show if the verification fails. | Improve this Doc View Source ShouldBeTextChange(IDiff, INodeList, String) Verifies that a diff is a change to a text node. Declaration public static void ShouldBeTextChange(this IDiff actualChange, INodeList expectedChange, string userMessage = null) Parameters Type Name Description IDiff actualChange The diff to verify. INodeList expectedChange The node list containing the expected text change. System.String userMessage A custom error message to show if the verification fails. | Improve this Doc View Source ShouldBeTextChange(IDiff, String, String) Verifies that a diff is a change to a text node. Declaration public static void ShouldBeTextChange(this IDiff actualChange, string expectedChange, string userMessage = null) Parameters Type Name Description IDiff actualChange The diff to verify. System.String expectedChange The expected text change. System.String userMessage A custom error message to show if the verification fails. | Improve this Doc View Source ShouldHaveSingleTextChange(IReadOnlyList<IDiff>, String, String) Verifies that a list of diffs contains only a single change, and that change is a change to a text node. Declaration public static void ShouldHaveSingleTextChange(this IReadOnlyList<IDiff> diffs, string expectedChange, string userMessage = null) Parameters Type Name Description System.Collections.Generic.IReadOnlyList < IDiff > diffs The list of diffs to verify against. System.String expectedChange The expected text change. System.String userMessage A custom error message to show if the verification fails."
  },
  "api/Bunit.SnapshotTest.html": {
    "href": "api/Bunit.SnapshotTest.html",
    "title": "Class SnapshotTest | bUnit",
    "keywords": "Class SnapshotTest A component used to create snapshot tests. Snapshot tests takes two sets of child components, a TestInput component for declaring the test input, and an ExpectedOutput component for declaring the expected output, the test input should produce. Inheritance System.Object FragmentBase SnapshotTest Inherited Members FragmentBase.ChildContent FragmentBase.Attach(RenderHandle) FragmentBase.SetParametersAsync(ParameterView) Namespace : Bunit Assembly : Bunit.dll Syntax public class SnapshotTest : FragmentBase Properties | Improve this Doc View Source Description A description or name for the test that will be displayed if the test fails. Declaration public string Description { get; set; } Property Value Type Description System.String | Improve this Doc View Source Setup Gets or sets the setup action to perform before the TestInput and ExpectedOutput is rendered and compared. Declaration public Action Setup { get; set; } Property Value Type Description System.Action | Improve this Doc View Source SetupAsync Gets or sets the setup action to perform before the TestInput and ExpectedOutput is rendered and compared. Declaration public Func<Task> SetupAsync { get; set; } Property Value Type Description System.Func < System.Threading.Tasks.Task > Extension Methods JsRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.SnapshotTestContext.html": {
    "href": "api/Bunit.SnapshotTestContext.html",
    "title": "Class SnapshotTestContext | bUnit",
    "keywords": "Class SnapshotTestContext Represents a test context used in snapshot testing. Inheritance System.Object TestContext SnapshotTestContext Implements ITestContext System.IDisposable Inherited Members TestContext.Renderer TestContext.Services TestContext.CreateNodes(String) TestContext.RenderComponent<TComponent>(ComponentParameter[]) TestContext.Dispose(Boolean) TestContext.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.dll Syntax public class SnapshotTestContext : TestContext, ITestContext, IDisposable Constructors | Improve this Doc View Source SnapshotTestContext(IReadOnlyList<FragmentBase>) Declaration public SnapshotTestContext(IReadOnlyList<FragmentBase> testData) Parameters Type Name Description System.Collections.Generic.IReadOnlyList < FragmentBase > testData Methods | Improve this Doc View Source RenderExpectedOutput() Renders the expected output. Declaration public IRenderedFragment RenderExpectedOutput() Returns Type Description IRenderedFragment | Improve this Doc View Source RenderTestInput() Renders the test input. Declaration public IRenderedFragment RenderTestInput() Returns Type Description IRenderedFragment Implements ITestContext System.IDisposable Extension Methods RenderWaitingHelperExtensions.WaitForNextRender(ITestContext, Action, Nullable<TimeSpan>) RenderWaitingHelperExtensions.WaitForState(ITestContext, Func<Boolean>, Nullable<TimeSpan>) RenderWaitingHelperExtensions.WaitForAssertion(ITestContext, Action, Nullable<TimeSpan>) JsRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.TestComponentBase.html": {
    "href": "api/Bunit.TestComponentBase.html",
    "title": "Class TestComponentBase | bUnit",
    "keywords": "Class TestComponentBase Base test class/test runner, that runs Fixtures defined in razor files. Inheritance System.Object TestContext ComponentTestFixture TestComponentBase Implements IRazorTestContext ITestContext System.IDisposable Inherited Members ComponentTestFixture.WaitForNextRender(Action, Nullable<TimeSpan>) ComponentTestFixture.WaitForState(Func<Boolean>, Nullable<TimeSpan>) ComponentTestFixture.WaitForAssertion(Action, Nullable<TimeSpan>) ComponentTestFixture.EventCallback(String, Action) ComponentTestFixture.EventCallback(String, Action<Object>) ComponentTestFixture.EventCallback(String, Func<Task>) ComponentTestFixture.EventCallback(String, Func<Object, Task>) ComponentTestFixture.EventCallback<TValue>(String, Action) ComponentTestFixture.EventCallback<TValue>(String, Action<TValue>) ComponentTestFixture.EventCallback<TValue>(String, Func<Task>) ComponentTestFixture.EventCallback<TValue>(String, Func<TValue, Task>) ComponentTestFixture.Parameter(String, Object) ComponentTestFixture.CascadingValue(String, Object) ComponentTestFixture.CascadingValue(Object) ComponentTestFixture.ChildContent(String) ComponentTestFixture.ChildContent<TComponent>(ComponentParameter[]) ComponentTestFixture.RenderFragment(String, String) ComponentTestFixture.RenderFragment<TComponent>(String, ComponentParameter[]) ComponentTestFixture.Template<TValue>(String, RenderFragment<TValue>) ComponentTestFixture.Template<TValue>(String, Func<TValue, String>) TestContext.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.dll Syntax public abstract class TestComponentBase : ComponentTestFixture, IRazorTestContext, ITestContext, IDisposable Constructors | Improve this Doc View Source TestComponentBase() Declaration public TestComponentBase() Properties | Improve this Doc View Source Renderer Gets the renderer used to render the components and fragments in this test context. Declaration public override TestRenderer Renderer { get; } Property Value Type Description TestRenderer Overrides TestContext.Renderer | Improve this Doc View Source Services Gets the service collection and service provider that is used when a component is rendered by the test context. Declaration public override TestServiceProvider Services { get; } Property Value Type Description TestServiceProvider Overrides TestContext.Services Methods | Improve this Doc View Source BuildRenderTree(RenderTreeBuilder) Declaration protected virtual void BuildRenderTree(RenderTreeBuilder builder) Parameters Type Name Description RenderTreeBuilder builder | Improve this Doc View Source CreateNodes(String) Parses a markup HTML string using the AngleSharps HTML5 parser and returns a list of nodes. Declaration public override INodeList CreateNodes(string markup) Parameters Type Name Description System.String markup The markup to parse. Returns Type Description INodeList The . Overrides TestContext.CreateNodes(String) | Improve this Doc View Source Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides TestContext.Dispose(Boolean) | Improve this Doc View Source GetComponentUnderTest() Gets (and renders) the markup/component defined in the <Fixture><ComponentUnderTest>...<ComponentUnderTest/><Fixture/> element. The HTML/component is only rendered the first this method is called. Declaration public IRenderedFragment GetComponentUnderTest() Returns Type Description IRenderedFragment A IRenderedFragment | Improve this Doc View Source GetComponentUnderTest<TComponent>() Gets (and renders) the component of type TComponent defined in the <Fixture><ComponentUnderTest>...<ComponentUnderTest/><Fixture/> element. The HTML/component is only rendered the first this method is called. Declaration public IRenderedComponent<TComponent> GetComponentUnderTest<TComponent>() where TComponent : class, IComponent Returns Type Description IRenderedComponent <TComponent> A IRenderedComponent<TComponent> Type Parameters Name Description TComponent The type of component to render | Improve this Doc View Source GetFragment(String) Gets (and renders) the markup/component defined in the <Fixture><Fragment id=\" id \" >...<Fragment/><Fixture/> element. If id is null/not provided, the component defined in the first <Fragment/> in the <Fixture/> element is returned. The HTML/component is only rendered the first this method is called. Declaration public IRenderedFragment GetFragment(string id = null) Parameters Type Name Description System.String id The id of the fragment where the HTML/component is defined in Razor syntax. Returns Type Description IRenderedFragment A IRenderedFragment | Improve this Doc View Source GetFragment<TComponent>(String) Gets (and renders) the component of type TComponent defined in the <Fixture><Fragment id=\" id \" >...<Fragment/><Fixture/> element. If id is null/not provided, the component defined in the first <Fragment/> in the <Fixture/> element is returned. The HTML/component is only rendered the first this method is called. Declaration public IRenderedComponent<TComponent> GetFragment<TComponent>(string id = null) where TComponent : class, IComponent Parameters Type Name Description System.String id The id of the fragment where the component is defined in Razor syntax. Returns Type Description IRenderedComponent <TComponent> A IRenderedComponent<TComponent> Type Parameters Name Description TComponent The type of component to render | Improve this Doc View Source RazorTest() Called by the XUnit test runner. Finds all Fixture components in the file and runs their associated tests. Declaration public Task RazorTest() Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source RenderComponent<TComponent>(ComponentParameter[]) Instantiates and performs a first render of a component of type TComponent . Declaration public override IRenderedComponent<TComponent> RenderComponent<TComponent>(params ComponentParameter[] parameters) where TComponent : class, IComponent Parameters Type Name Description ComponentParameter [] parameters Parameters to pass to the component when it is rendered Returns Type Description IRenderedComponent <TComponent> The rendered TComponent Type Parameters Name Description TComponent Type of the component to render Overrides TestContext.RenderComponent<TComponent>(ComponentParameter[]) Implements IRazorTestContext ITestContext System.IDisposable Extension Methods RenderWaitingHelperExtensions.WaitForNextRender(ITestContext, Action, Nullable<TimeSpan>) RenderWaitingHelperExtensions.WaitForState(ITestContext, Func<Boolean>, Nullable<TimeSpan>) RenderWaitingHelperExtensions.WaitForAssertion(ITestContext, Action, Nullable<TimeSpan>) JsRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.TestContext.html": {
    "href": "api/Bunit.TestContext.html",
    "title": "Class TestContext | bUnit",
    "keywords": "Class TestContext A test context is a factory that makes it possible to create components under tests. Inheritance System.Object TestContext ComponentTestFixture RazorTestContext SnapshotTestContext Implements ITestContext System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.dll Syntax public class TestContext : ITestContext, IDisposable Constructors | Improve this Doc View Source TestContext() Creates a new instance of the TestContext class. Declaration public TestContext() Properties | Improve this Doc View Source Renderer Gets the renderer used to render the components and fragments in this test context. Declaration public virtual TestRenderer Renderer { get; } Property Value Type Description TestRenderer | Improve this Doc View Source Services Gets the service collection and service provider that is used when a component is rendered by the test context. Declaration public virtual TestServiceProvider Services { get; } Property Value Type Description TestServiceProvider Methods | Improve this Doc View Source CreateNodes(String) Parses a markup HTML string using the AngleSharps HTML5 parser and returns a list of nodes. Declaration public virtual INodeList CreateNodes(string markup) Parameters Type Name Description System.String markup The markup to parse. Returns Type Description INodeList The . | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing | Improve this Doc View Source RenderComponent<TComponent>(ComponentParameter[]) Instantiates and performs a first render of a component of type TComponent . Declaration public virtual IRenderedComponent<TComponent> RenderComponent<TComponent>(params ComponentParameter[] parameters) where TComponent : class, IComponent Parameters Type Name Description ComponentParameter [] parameters Parameters to pass to the component when it is rendered Returns Type Description IRenderedComponent <TComponent> The rendered TComponent Type Parameters Name Description TComponent Type of the component to render Implements ITestContext System.IDisposable Extension Methods RenderWaitingHelperExtensions.WaitForNextRender(ITestContext, Action, Nullable<TimeSpan>) RenderWaitingHelperExtensions.WaitForState(ITestContext, Func<Boolean>, Nullable<TimeSpan>) RenderWaitingHelperExtensions.WaitForAssertion(ITestContext, Action, Nullable<TimeSpan>) JsRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.TestInput.html": {
    "href": "api/Bunit.TestInput.html",
    "title": "Class TestInput | bUnit",
    "keywords": "Class TestInput Represents the test input in a snapshot test ( SnapshotTest ). Inheritance System.Object FragmentBase TestInput Inherited Members FragmentBase.ChildContent FragmentBase.Attach(RenderHandle) FragmentBase.SetParametersAsync(ParameterView) Namespace : Bunit Assembly : Bunit.dll Syntax public class TestInput : FragmentBase Extension Methods JsRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.TestRenderer.html": {
    "href": "api/Bunit.TestRenderer.html",
    "title": "Class TestRenderer | bUnit",
    "keywords": "Class TestRenderer A custom Blazor renderer used when testing Blazor components. Inheritance System.Object TestRenderer Namespace : Bunit Assembly : Bunit.dll Syntax public class TestRenderer : Renderer Constructors | Improve this Doc View Source TestRenderer(IServiceProvider, ILoggerFactory) Declaration public TestRenderer(IServiceProvider serviceProvider, ILoggerFactory loggerFactory) Parameters Type Name Description System.IServiceProvider serviceProvider ILoggerFactory loggerFactory Properties | Improve this Doc View Source Dispatcher Declaration public override Dispatcher Dispatcher { get; } Property Value Type Description Dispatcher | Improve this Doc View Source RenderEvents Gets an System.IObservable<T> which will provide subscribers with RenderEvent s from the TestRenderer during its life time. Declaration public IObservable<RenderEvent> RenderEvents { get; } Property Value Type Description System.IObservable < RenderEvent > Methods | Improve this Doc View Source AttachTestRootComponent(IComponent) Declaration public int AttachTestRootComponent(IComponent testRootComponent) Parameters Type Name Description IComponent testRootComponent Returns Type Description System.Int32 | Improve this Doc View Source DispatchAndAssertNoSynchronousErrors(Action) Dispatches an callback in the context of the renderer synchronously and asserts no errors happened during dispatch Declaration public void DispatchAndAssertNoSynchronousErrors(Action callback) Parameters Type Name Description System.Action callback | Improve this Doc View Source DispatchEventAsync(UInt64, EventFieldInfo, EventArgs) Declaration public Task DispatchEventAsync(ulong eventHandlerId, EventFieldInfo fieldInfo, EventArgs eventArgs) Parameters Type Name Description System.UInt64 eventHandlerId EventFieldInfo fieldInfo System.EventArgs eventArgs Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing | Improve this Doc View Source GetCurrentRenderTreeFrames(Int32) Declaration public ArrayRange<RenderTreeFrame> GetCurrentRenderTreeFrames(int componentId) Parameters Type Name Description System.Int32 componentId Returns Type Description ArrayRange < RenderTreeFrame > | Improve this Doc View Source HandleException(Exception) Declaration protected override void HandleException(Exception exception) Parameters Type Name Description System.Exception exception | Improve this Doc View Source UpdateDisplayAsync(RenderBatch) Declaration protected override Task UpdateDisplayAsync(in RenderBatch renderBatch) Parameters Type Name Description RenderBatch renderBatch Returns Type Description System.Threading.Tasks.Task Extension Methods JsRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.TestServiceProvider.html": {
    "href": "api/Bunit.TestServiceProvider.html",
    "title": "Class TestServiceProvider | bUnit",
    "keywords": "Class TestServiceProvider Represents a System.IServiceProvider and as a single type used for test purposes. Inheritance System.Object TestServiceProvider Implements System.IServiceProvider IServiceCollection System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.dll Syntax public sealed class TestServiceProvider : IServiceProvider, IServiceCollection, IDisposable Constructors | Improve this Doc View Source TestServiceProvider(Nullable<IServiceCollection>) Creates an instance of the TestServiceProvider and sets its service collection to the provided initialServiceCollection , if any. Declaration public TestServiceProvider(IServiceCollection? initialServiceCollection = default(IServiceCollection? )) Parameters Type Name Description System.Nullable < IServiceCollection > initialServiceCollection Fields | Improve this Doc View Source Default Gets a reusable default test service provider. Declaration public static readonly IServiceProvider Default Field Value Type Description System.IServiceProvider Properties | Improve this Doc View Source Count Declaration public int Count { get; } Property Value Type Description System.Int32 | Improve this Doc View Source IsProviderInitialized Gets whether this TestServiceProvider has been initialized, and no longer will accept calls to the AddService 's methods. Declaration public bool IsProviderInitialized { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsReadOnly Declaration public bool IsReadOnly { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Item[Int32] Declaration public ServiceDescriptor this[int index] { get; set; } Parameters Type Name Description System.Int32 index Property Value Type Description ServiceDescriptor Methods | Improve this Doc View Source Add(ServiceDescriptor) Declaration public void Add(ServiceDescriptor item) Parameters Type Name Description ServiceDescriptor item | Improve this Doc View Source Clear() Declaration public void Clear() | Improve this Doc View Source Contains(ServiceDescriptor) Declaration public bool Contains(ServiceDescriptor item) Parameters Type Name Description ServiceDescriptor item Returns Type Description System.Boolean | Improve this Doc View Source CopyTo(ServiceDescriptor[], Int32) Declaration public void CopyTo(ServiceDescriptor[] array, int arrayIndex) Parameters Type Name Description ServiceDescriptor [] array System.Int32 arrayIndex | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source GetEnumerator() Declaration public IEnumerator<ServiceDescriptor> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < ServiceDescriptor > | Improve this Doc View Source GetService(Type) Declaration public object GetService(Type serviceType) Parameters Type Name Description System.Type serviceType Returns Type Description System.Object | Improve this Doc View Source GetService<TService>() Get service of type T from the test provider. Declaration public TService GetService<TService>() Returns Type Description TService A service object of type T or null if there is no such service. Type Parameters Name Description TService The type of service object to get. | Improve this Doc View Source IndexOf(ServiceDescriptor) Declaration public int IndexOf(ServiceDescriptor item) Parameters Type Name Description ServiceDescriptor item Returns Type Description System.Int32 | Improve this Doc View Source Insert(Int32, ServiceDescriptor) Declaration public void Insert(int index, ServiceDescriptor item) Parameters Type Name Description System.Int32 index ServiceDescriptor item | Improve this Doc View Source Remove(ServiceDescriptor) Declaration public bool Remove(ServiceDescriptor item) Parameters Type Name Description ServiceDescriptor item Returns Type Description System.Boolean | Improve this Doc View Source RemoveAt(Int32) Declaration public void RemoveAt(int index) Parameters Type Name Description System.Int32 index Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.IServiceProvider IServiceCollection System.IDisposable Extension Methods JsRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement) MockJsRuntimeExtensions.AddMockJsRuntime(TestServiceProvider, JsRuntimeMockMode)"
  },
  "api/Bunit.TouchEventDispatchExtensions.html": {
    "href": "api/Bunit.TouchEventDispatchExtensions.html",
    "title": "Class TouchEventDispatchExtensions | bUnit",
    "keywords": "Class TouchEventDispatchExtensions Pointer event dispatch helper extension methods. Inheritance System.Object TouchEventDispatchExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.dll Syntax public static class TouchEventDispatchExtensions Methods | Improve this Doc View Source TouchCancel(IElement, Int64, TouchPoint[], TouchPoint[], TouchPoint[], Boolean, Boolean, Boolean, Boolean, String) Raises the @ontouchcancel event on element , passing the provided properties to the event handler via a object. Declaration public static void TouchCancel(this IElement element, long detail = 0L, TouchPoint[] touches = null, TouchPoint[] targetTouches = null, TouchPoint[] changedTouches = null, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null) Parameters Type Name Description IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. TouchPoint [] touches A list of for every point of contact currently touching the surface. TouchPoint [] targetTouches A list of for every point of contact that is touching the surface and started on the element that is the target of the current event. TouchPoint [] changedTouches A list of Touches for every point of contact which contributed to the event. For the touchstart event this must be a list of the touch points that just became active with the current event. For the touchmove event this must be a list of the touch points that have moved since the last event. For the touchend and touchcancel events this must be a list of the touch points that have just been removed from the surface. System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. | Improve this Doc View Source TouchCancel(IElement, TouchEventArgs) Raises the @ontouchcancel event on element , passing the provided eventArgs to the event handler. Declaration public static void TouchCancel(this IElement element, TouchEventArgs eventArgs) Parameters Type Name Description IElement element The element to raise the event on. TouchEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source TouchCancelAsync(IElement, TouchEventArgs) Raises the @ontouchcancel event on element , passing the provided eventArgs to the event handler. Declaration public static Task TouchCancelAsync(this IElement element, TouchEventArgs eventArgs) Parameters Type Name Description IElement element TouchEventArgs eventArgs Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source TouchEnd(IElement, Int64, TouchPoint[], TouchPoint[], TouchPoint[], Boolean, Boolean, Boolean, Boolean, String) Raises the @ontouchend event on element , passing the provided properties to the event handler via a object. Declaration public static void TouchEnd(this IElement element, long detail = 0L, TouchPoint[] touches = null, TouchPoint[] targetTouches = null, TouchPoint[] changedTouches = null, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null) Parameters Type Name Description IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. TouchPoint [] touches A list of for every point of contact currently touching the surface. TouchPoint [] targetTouches A list of for every point of contact that is touching the surface and started on the element that is the target of the current event. TouchPoint [] changedTouches A list of Touches for every point of contact which contributed to the event. For the touchstart event this must be a list of the touch points that just became active with the current event. For the touchmove event this must be a list of the touch points that have moved since the last event. For the touchend and touchcancel events this must be a list of the touch points that have just been removed from the surface. System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. | Improve this Doc View Source TouchEnd(IElement, TouchEventArgs) Raises the @ontouchend event on element , passing the provided eventArgs to the event handler. Declaration public static void TouchEnd(this IElement element, TouchEventArgs eventArgs) Parameters Type Name Description IElement element The element to raise the event on. TouchEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source TouchEndAsync(IElement, TouchEventArgs) Raises the @ontouchend event on element , passing the provided eventArgs to the event handler. Declaration public static Task TouchEndAsync(this IElement element, TouchEventArgs eventArgs) Parameters Type Name Description IElement element TouchEventArgs eventArgs Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source TouchEnter(IElement, Int64, TouchPoint[], TouchPoint[], TouchPoint[], Boolean, Boolean, Boolean, Boolean, String) Raises the @ontouchenter event on element , passing the provided properties to the event handler via a object. Declaration public static void TouchEnter(this IElement element, long detail = 0L, TouchPoint[] touches = null, TouchPoint[] targetTouches = null, TouchPoint[] changedTouches = null, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null) Parameters Type Name Description IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. TouchPoint [] touches A list of for every point of contact currently touching the surface. TouchPoint [] targetTouches A list of for every point of contact that is touching the surface and started on the element that is the target of the current event. TouchPoint [] changedTouches A list of Touches for every point of contact which contributed to the event. For the touchstart event this must be a list of the touch points that just became active with the current event. For the touchmove event this must be a list of the touch points that have moved since the last event. For the touchend and touchcancel events this must be a list of the touch points that have just been removed from the surface. System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. | Improve this Doc View Source TouchEnter(IElement, TouchEventArgs) Raises the @ontouchenter event on element , passing the provided eventArgs to the event handler. Declaration public static void TouchEnter(this IElement element, TouchEventArgs eventArgs) Parameters Type Name Description IElement element The element to raise the event on. TouchEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source TouchEnterAsync(IElement, TouchEventArgs) Raises the @ontouchenter event on element , passing the provided eventArgs to the event handler. Declaration public static Task TouchEnterAsync(this IElement element, TouchEventArgs eventArgs) Parameters Type Name Description IElement element TouchEventArgs eventArgs Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source TouchLeave(IElement, Int64, TouchPoint[], TouchPoint[], TouchPoint[], Boolean, Boolean, Boolean, Boolean, String) Raises the @ontouchleave event on element , passing the provided properties to the event handler via a object. Declaration public static void TouchLeave(this IElement element, long detail = 0L, TouchPoint[] touches = null, TouchPoint[] targetTouches = null, TouchPoint[] changedTouches = null, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null) Parameters Type Name Description IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. TouchPoint [] touches A list of for every point of contact currently touching the surface. TouchPoint [] targetTouches A list of for every point of contact that is touching the surface and started on the element that is the target of the current event. TouchPoint [] changedTouches A list of Touches for every point of contact which contributed to the event. For the touchstart event this must be a list of the touch points that just became active with the current event. For the touchmove event this must be a list of the touch points that have moved since the last event. For the touchend and touchcancel events this must be a list of the touch points that have just been removed from the surface. System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. | Improve this Doc View Source TouchLeave(IElement, TouchEventArgs) Raises the @ontouchleave event on element , passing the provided eventArgs to the event handler. Declaration public static void TouchLeave(this IElement element, TouchEventArgs eventArgs) Parameters Type Name Description IElement element The element to raise the event on. TouchEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source TouchLeaveAsync(IElement, TouchEventArgs) Raises the @ontouchleave event on element , passing the provided eventArgs to the event handler. Declaration public static Task TouchLeaveAsync(this IElement element, TouchEventArgs eventArgs) Parameters Type Name Description IElement element TouchEventArgs eventArgs Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source TouchMove(IElement, Int64, TouchPoint[], TouchPoint[], TouchPoint[], Boolean, Boolean, Boolean, Boolean, String) Raises the @ontouchmove event on element , passing the provided properties to the event handler via a object. Declaration public static void TouchMove(this IElement element, long detail = 0L, TouchPoint[] touches = null, TouchPoint[] targetTouches = null, TouchPoint[] changedTouches = null, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null) Parameters Type Name Description IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. TouchPoint [] touches A list of for every point of contact currently touching the surface. TouchPoint [] targetTouches A list of for every point of contact that is touching the surface and started on the element that is the target of the current event. TouchPoint [] changedTouches A list of Touches for every point of contact which contributed to the event. For the touchstart event this must be a list of the touch points that just became active with the current event. For the touchmove event this must be a list of the touch points that have moved since the last event. For the touchend and touchcancel events this must be a list of the touch points that have just been removed from the surface. System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. | Improve this Doc View Source TouchMove(IElement, TouchEventArgs) Raises the @ontouchmove event on element , passing the provided eventArgs to the event handler. Declaration public static void TouchMove(this IElement element, TouchEventArgs eventArgs) Parameters Type Name Description IElement element The element to raise the event on. TouchEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source TouchMoveAsync(IElement, TouchEventArgs) Raises the @ontouchmove event on element , passing the provided eventArgs to the event handler. Declaration public static Task TouchMoveAsync(this IElement element, TouchEventArgs eventArgs) Parameters Type Name Description IElement element TouchEventArgs eventArgs Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done. | Improve this Doc View Source TouchStart(IElement, Int64, TouchPoint[], TouchPoint[], TouchPoint[], Boolean, Boolean, Boolean, Boolean, String) Raises the @ontouchstart event on element , passing the provided properties to the event handler via a object. Declaration public static void TouchStart(this IElement element, long detail = 0L, TouchPoint[] touches = null, TouchPoint[] targetTouches = null, TouchPoint[] changedTouches = null, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null) Parameters Type Name Description IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. TouchPoint [] touches A list of for every point of contact currently touching the surface. TouchPoint [] targetTouches A list of for every point of contact that is touching the surface and started on the element that is the target of the current event. TouchPoint [] changedTouches A list of Touches for every point of contact which contributed to the event. For the touchstart event this must be a list of the touch points that just became active with the current event. For the touchmove event this must be a list of the touch points that have moved since the last event. For the touchend and touchcancel events this must be a list of the touch points that have just been removed from the surface. System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. | Improve this Doc View Source TouchStart(IElement, TouchEventArgs) Raises the @ontouchstart event on element , passing the provided eventArgs to the event handler. Declaration public static void TouchStart(this IElement element, TouchEventArgs eventArgs) Parameters Type Name Description IElement element The element to raise the event on. TouchEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source TouchStartAsync(IElement, TouchEventArgs) Raises the @ontouchstart event on element , passing the provided eventArgs to the event handler. Declaration public static Task TouchStartAsync(this IElement element, TouchEventArgs eventArgs) Parameters Type Name Description IElement element TouchEventArgs eventArgs Returns Type Description System.Threading.Tasks.Task A task that completes when the event handler is done."
  },
  "api/Bunit.WaitForAssertionFailedException.html": {
    "href": "api/Bunit.WaitForAssertionFailedException.html",
    "title": "Class WaitForAssertionFailedException | bUnit",
    "keywords": "Class WaitForAssertionFailedException Represents an exception thrown when the awaited assertion does not pass. Inheritance System.Object System.Exception WaitForAssertionFailedException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Bunit Assembly : Bunit.dll Syntax public class WaitForAssertionFailedException : Exception, ISerializable Implements System.Runtime.Serialization.ISerializable Extension Methods JsRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.WaitForRenderFailedException.html": {
    "href": "api/Bunit.WaitForRenderFailedException.html",
    "title": "Class WaitForRenderFailedException | bUnit",
    "keywords": "Class WaitForRenderFailedException Represents an exception that is thrown when a render does not happen within the specified wait period. Inheritance System.Object System.Exception WaitForRenderFailedException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Bunit Assembly : Bunit.dll Syntax public class WaitForRenderFailedException : Exception, ISerializable Properties | Improve this Doc View Source Message Declaration public override string Message { get; } Property Value Type Description System.String Overrides System.Exception.Message Implements System.Runtime.Serialization.ISerializable Extension Methods JsRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.WaitForStateFailedException.html": {
    "href": "api/Bunit.WaitForStateFailedException.html",
    "title": "Class WaitForStateFailedException | bUnit",
    "keywords": "Class WaitForStateFailedException Represents an exception thrown when the state predicate does not pass or if it throws itself. Inheritance System.Object System.Exception WaitForStateFailedException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Bunit Assembly : Bunit.dll Syntax public class WaitForStateFailedException : Exception, ISerializable Implements System.Runtime.Serialization.ISerializable Extension Methods JsRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.XunitLoggerExtensions.html": {
    "href": "api/Bunit.XunitLoggerExtensions.html",
    "title": "Class XunitLoggerExtensions | bUnit",
    "keywords": "Class XunitLoggerExtensions Helper method for registering the xUnit test logger. Inheritance System.Object XunitLoggerExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.dll Syntax public static class XunitLoggerExtensions Methods | Improve this Doc View Source AddXunitLogger(IServiceCollection, ITestOutputHelper, LogLevel) Adds the xUnit Logger to the service collection. All log statements logged during a test, matching the specified (default ), will be available in the output from each unit tests. Declaration public static IServiceCollection AddXunitLogger(this IServiceCollection services, ITestOutputHelper testOutput, LogLevel minimumLogLevel = null) Parameters Type Name Description IServiceCollection services ITestOutputHelper testOutput LogLevel minimumLogLevel Returns Type Description IServiceCollection"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "PLACEHOLDER | bUnit",
    "keywords": "PLACEHOLDER TODO: Add .NET projects to the src folder and run docfx to generate REAL API Documentation !"
  },
  "api/Xunit.Sdk.FixtureFailedException.html": {
    "href": "api/Xunit.Sdk.FixtureFailedException.html",
    "title": "Class FixtureFailedException | bUnit",
    "keywords": "Class FixtureFailedException Exception thrown when an Fixture in a Razor based test fails. Inheritance System.Object FixtureFailedException Namespace : Xunit.Sdk Assembly : Bunit.dll Syntax public class FixtureFailedException : XunitException Constructors | Improve this Doc View Source FixtureFailedException(String, Exception) Creates an instance of the FixtureFailedException class. Declaration public FixtureFailedException(string message, Exception assertFailureException) Parameters Type Name Description System.String message System.Exception assertFailureException Extension Methods JsRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Xunit.Sdk.html": {
    "href": "api/Xunit.Sdk.html",
    "title": "Namespace Xunit.Sdk | bUnit",
    "keywords": "Namespace Xunit.Sdk Classes FixtureFailedException Exception thrown when an Fixture in a Razor based test fails. HtmlEqualException Represents an differences between pieces of markup. JsInvokeCountExpectedException Represents a number of unexpected invocation to a MockJsRuntimeInvokeHandler . MissingMockJsRuntimeException Exception use to indicate that a MockJsRuntime is required by a test but was not provided. UnplannedJsInvocationException Exception use to indicate that an unplanned invocation was received by the MockJsRuntimeInvokeHandler running in Strict ."
  },
  "api/Xunit.Sdk.HtmlEqualException.html": {
    "href": "api/Xunit.Sdk.HtmlEqualException.html",
    "title": "Class HtmlEqualException | bUnit",
    "keywords": "Class HtmlEqualException Represents an differences between pieces of markup. Inheritance System.Object HtmlEqualException Namespace : Xunit.Sdk Assembly : Bunit.dll Syntax public class HtmlEqualException : AssertActualExpectedException Constructors | Improve this Doc View Source HtmlEqualException(IEnumerable<IDiff>, IMarkupFormattable, IMarkupFormattable, String) Creates an instance of the HtmlEqualException type. Declaration public HtmlEqualException(IEnumerable<IDiff> diffs, IMarkupFormattable expected, IMarkupFormattable actual, string userMessage) Parameters Type Name Description System.Collections.Generic.IEnumerable < IDiff > diffs IMarkupFormattable expected IMarkupFormattable actual System.String userMessage Extension Methods JsRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Xunit.Sdk.JsInvokeCountExpectedException.html": {
    "href": "api/Xunit.Sdk.JsInvokeCountExpectedException.html",
    "title": "Class JsInvokeCountExpectedException | bUnit",
    "keywords": "Class JsInvokeCountExpectedException Represents a number of unexpected invocation to a MockJsRuntimeInvokeHandler . Inheritance System.Object JsInvokeCountExpectedException Namespace : Xunit.Sdk Assembly : Bunit.dll Syntax public class JsInvokeCountExpectedException : AssertActualExpectedException Constructors | Improve this Doc View Source JsInvokeCountExpectedException(String, Int32, Int32, String, String) Creates an instance of the JsInvokeCountExpectedException . Declaration public JsInvokeCountExpectedException(string identifier, int expectedCount, int actualCount, string assertMethod, string userMessage = null) Parameters Type Name Description System.String identifier System.Int32 expectedCount System.Int32 actualCount System.String assertMethod System.String userMessage Properties | Improve this Doc View Source ActualInvocationCount Gets the actual invocation count. Declaration public int ActualInvocationCount { get; } Property Value Type Description System.Int32 | Improve this Doc View Source ExpectedInvocationCount Gets the expected invocation count. Declaration public int ExpectedInvocationCount { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Identifier Gets the identifier. Declaration public string Identifier { get; } Property Value Type Description System.String Extension Methods JsRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Xunit.Sdk.MissingMockJsRuntimeException.html": {
    "href": "api/Xunit.Sdk.MissingMockJsRuntimeException.html",
    "title": "Class MissingMockJsRuntimeException | bUnit",
    "keywords": "Class MissingMockJsRuntimeException Exception use to indicate that a MockJsRuntime is required by a test but was not provided. Inheritance System.Object System.Exception MissingMockJsRuntimeException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Xunit.Sdk Assembly : Bunit.dll Syntax public class MissingMockJsRuntimeException : Exception, ISerializable Constructors | Improve this Doc View Source MissingMockJsRuntimeException(String, Object[]) Creates a new instance of the MissingMockJsRuntimeException with the arguments used in the invocation. Declaration public MissingMockJsRuntimeException(string identifier, object[] arguments) Parameters Type Name Description System.String identifier The identifer used in the invocation. System.Object [] arguments The args used in the invocation, if any Properties | Improve this Doc View Source Arguments Arguments passed to the JSInvoke method. Declaration public IReadOnlyList<object> Arguments { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < System.Object > | Improve this Doc View Source Identifier Identifer string used in the JSInvoke method. Declaration public string Identifier { get; } Property Value Type Description System.String Implements System.Runtime.Serialization.ISerializable Extension Methods JsRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Xunit.Sdk.UnplannedJsInvocationException.html": {
    "href": "api/Xunit.Sdk.UnplannedJsInvocationException.html",
    "title": "Class UnplannedJsInvocationException | bUnit",
    "keywords": "Class UnplannedJsInvocationException Exception use to indicate that an unplanned invocation was received by the MockJsRuntimeInvokeHandler running in Strict . Inheritance System.Object System.Exception UnplannedJsInvocationException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Xunit.Sdk Assembly : Bunit.dll Syntax public class UnplannedJsInvocationException : Exception, ISerializable Constructors | Improve this Doc View Source UnplannedJsInvocationException(JsRuntimeInvocation) Creates a new instance of the UnplannedJsInvocationException with the provided Invocation attached. Declaration public UnplannedJsInvocationException(JsRuntimeInvocation invocation) Parameters Type Name Description JsRuntimeInvocation invocation The unplanned invocation. Properties | Improve this Doc View Source Invocation Gets the unplanned invocation. Declaration public JsRuntimeInvocation Invocation { get; } Property Value Type Description JsRuntimeInvocation Implements System.Runtime.Serialization.ISerializable Extension Methods JsRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "docs/basics-of-blazor-component-testing.html": {
    "href": "docs/basics-of-blazor-component-testing.html",
    "title": "Basics of Blazor component testing | bUnit",
    "keywords": "Basics of Blazor component testing To test a component, you first have to render it with parameters, cascading values, and services passed into it. Then, you need access to the component's instance and the markup it has produced, so you can inspect and interact with both. There are three different ways of doing this in the library: C# based tests With C# based tests, you write all your testing logic in C# files, i.e. like regular unit tests. Razor based tests (EXPERIMENTAL FEATURE) With Razor based tests, you write tests in .razor files, which allows you to declare, in Razor syntax, the component under test and other markup fragments you need. You still write your assertions via C# in the .razor file, inside @code {...} blocks. Snapshot tests (EXPERIMENTAL FEATURE) Snapshot tests are written in .razor files. A test contains a definition of an input markup/component and the expected output markup. The library will then automatically perform an semantic HTML comparison. Very little C# is needed in this, usually only to configure services. In Snapshot testing , the rendering and verification is automatic. For C# based tests and Razor based tests , we have the following concepts to help us render our components and markup fragments: ITestContext for rendering using the RenderComponent method. The test context also allows you to configure services that should be available during rendering of components. IRazorTestContext extends ITestContext with methods for getting the declared components under test and any (markup) fragments in Razor based tests. And the following concepts to help us access the rendered markup and component: IRenderedFragment is returned when a fragment is rendered. It has query methods ( Find and FindAll ) for querying the rendered markup using CSS selectors. It also provides access to the raw markup via the Markup property and to a DOM tree representation of the rendered markup via the Nodes property. The library also provides extension methods attached to elements in the DOM tree, that allow you to trigger attached Razor event handlers, e.g. an @onclick event handler on a <button @onclick=\"...\"> . NOTE: The DOM tree implementation is provided by the AngleSharp library, which provides a full HTML5 compatible implementation of DOM APIs. That means you can use all the DOM APIs you know from the browser to inspect the rendered nodes. IRenderedComponent<TComponent> extends IRenderedFragment with methods for rendering a component again with new parameters if needed, and a property for accessing the instance of the component. The diagram below shows the four interfaces, their relationships to each other, and available methods. This is the basics of how components and markup is rendered and afterword's accessed for verification and further inspection."
  },
  "docs/contribute.html": {
    "href": "docs/contribute.html",
    "title": "Contribute | bUnit",
    "keywords": "Contribute To get in touch, ask questions or provide feedback, you can: Create a new issue . Join the library's Gitter channel Ping me on Twitter: @egilhansen There are a few ways you can help improve this library. Tell me if a certain type of component/scenario is hard to test. Create an issue with a minimal example of the component and the kind of assertions you would like to perform. Suggest tweaks to the library's API or assertion helpers (create issue). Find a bug or mistake in the library, create an issue, or even better, send in a pull request. Help with documentation and/or good examples. If you figured out a elegant way to test a scenario, share it through an issue, or add it to the samples project (pull request), or add it to the documentation (pull request)."
  },
  "docs/creating-a-new-test-project.html": {
    "href": "docs/creating-a-new-test-project.html",
    "title": "Creating a new test project | bUnit",
    "keywords": "Creating a new test project To create a project for testing you Blazor components, first install the bUnit Project Template from NuGet, using this command: dotnet new --install bunit.template::1.0.0-beta-6 Then to create a new project, use the following command: dotnet new bunit -o <NAME OF PROJECT> where -o <NAME OF PROJECT> is used to name the test project. Creating a new Blazor test project manually If you do not want to use the Blazor test project template, you can create an empty class library and the modify the .csproj to match the following: <Project Sdk=\"Microsoft.NET.Sdk.Razor\"> <PropertyGroup> <TargetFramework>netcoreapp3.1</TargetFramework> <RazorLangVersion>3.0</RazorLangVersion> </PropertyGroup> <ItemGroup> <PackageReference Include=\"Microsoft.AspNetCore.Components\" Version=\"3.1.0\" /> <PackageReference Include=\"Microsoft.AspNetCore.Components.Web\" Version=\"3.1.0\" /> <PackageReference Include=\"bunit\" Version=\"1.0.0-beta-6\" /> <PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"16.4.0\" /> <PackageReference Include=\"xunit\" Version=\"2.4.1\" /> <PackageReference Include=\"xunit.runner.visualstudio\" Version=\"2.4.1\"> <PrivateAssets>all</PrivateAssets> <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets> </PackageReference> </ItemGroup> </Project> Projects structure and tips and tricks The recommended solution/project structure for a test and production code project set-up is: src | MyComponentLib.csproj (namespace e.g. \"Company.MyComponentLib\") | _Imports.razor | Component1.razor | SubFolder | SubComponent1.razor test | MyComponentLibTests.csproj (with project reference to MyComponentLib.csproj) | _Imports.razor | Component1Test.cs | SubFolder | SubComponent1Test.cs Use same root namespace and folder structure in both test- and production project A neat trick, which will limit the import statements needed in your test project, is to set the root namespace to the same as that of the production code project, AND use the same folder structure as shown above. Following the example above, the MyComponentLibTests.csproj file should contain: <PropertyGroup> <RootNamespace>Company.MyComponentLib</RootNamespace> </PropertyGroup> Make copy/paste of HTML easier When writing C# based tests, you sometime want to copy/paste some HTML into C# strings from e.g. a Razor file. This is tedious to do manually as you have to escape the quotes and other special characters. The extension, SmartPaster2019 , allows us to copy strings where any character that needs to be escaped will be automatically."
  },
  "docs/csharp-based-testing.html": {
    "href": "docs/csharp-based-testing.html",
    "title": "C# based testing | bUnit",
    "keywords": "C# based testing This pages documents how to do Blazor/Razor component testing using just C#. Before you get started, make sure you have read the Getting started page and in particular the Basics of Blazor component testing section. It wont take long, and it will ensure you get a good start at component testing. NOTE: You are currently required to write your tests using the xUnit framework. If popular demand requires it, this library can be made test framework independent in the future. TIP: Working with and asserting against the rendered component and its output is covered on the Working with rendered components and fragments page. Content: Creating an new test class Executing test cases Rendering components during tests Passing parameters and services to components during render Registering and injecting services into components during render Further reading: Working with rendered components and fragments Semantic HTML markup comparison Mocking JsRuntime C# test examples Creating an new test class All test classes are expected to inherit from ComponentTestFixture , which implements the ITestContext interface. The example below includes the needed using statements as well: using System; using Bunit; using Bunit.Mocking.JSInterop; using Microsoft.Extensions.DependencyInjection; using Xunit; public class MyComponentTest : ComponentTestFixture { [Fact] public void MyFirstTest() { // ... } } The ComponentTestFixture contains all the logic for rendering components and correctly dispose of renderers, components, and HTML parsers after each test. Executing test cases Since Blazor component tests are just regular xUnit test/facts, you execute them in exactly the same way as you would normal tests, i.e. by running dotnet test from the console or running the tests through the Test Explorer in Visual Studio. Rendering components during tests To render a component, we use the RenderComponent<TComponent>(params ComponentParameter[] parameters) method. It will take the component ( TComponent ) through its usual life-cycle from OnInitialized to OnAfterRender . For example: public class ComponentTest : ComponentTestFixture // implements the ITestContext interface { [Fact] public void Test1() { // Renders a MyComponent component and assigns the result to // a cut variable. CUT is short for Component Under Test. IRenderedComponent<MyComponent> cut = RenderComponent<MyComponent>(); } } The RenderComponent<TComponent>(params ComponentParameter[] parameters) : IRenderedComponent<MyComponent> method has these parts: TComponent is the type of component you want to render. ComponentParameter[] parameters represents parameters that will be passed to the component during render. IRenderedComponent<TComponent> is the representation of the rendered component. Working with the rendered component and its output is covered on the Working with rendered components and fragments page. Passing parameters to components during render There are four types of parameters you can pass to a component being rendered through the RenderComponent() method: Cascading values (normally provided by the <CascadingValue> component in .razor files). Event callbacks (of type EventCallback<T> or EventCallback ). Child content, render fragments, or templates (of type RenderFragment and RenderFragment<T> ). All other normal parameters, including unmatched parameters. In addition to parameters, services can also be registered in the ITestContext and injected during component render. To show how, let us look at a few examples that correctly pass parameters and services to the following AllTypesOfParams<TItem> component: @typeparam TItem @inject IJSRuntime jsRuntime @code { [Parameter(CaptureUnmatchedValues = true)] public IReadOnlyDictionary<string, object> Attributes { get; set; } [Parameter] public string RegularParam { get; set; } [CascadingParameter] public int UnnamedCascadingValue { get; set; } [CascadingParameter(Name = \"Named\")] public int NamedCascadingValue { get; set; } [Parameter] public EventCallback NonGenericCallback { get; set; } [Parameter] public EventCallback<EventArgs> GenericCallback { get; set; } [Parameter] public RenderFragment ChildContent { get; set; } [Parameter] public RenderFragment OtherContent { get; set; } [Parameter] public RenderFragment<TItem> ItemTemplate { get; set; } } And to render the AllTypesOfParams<TItem> component with all possible parameters set, use the following code: var cut = RenderComponent<AllTypesOfParams<string>>( // pass name-value attribute to be captured by the Attributes parameter (\"some-unmatched-attribute\", \"unmatched value\"), // pass value to the RegularParam parameter (\"RegularParam\", \"some value\"), // pass value to the UnnamedCascadingValue cascading parameter CascadingValue(42), // pass value to the NamedCascadingValue cascading parameter CascadingValue(\"Named\", 1337), // pass action callback to the NonGenericCallback parameter EventCallback(\"NonGenericCallback\", () => { /* logic here */ }), // pass action callback to the GenericCallback parameter EventCallback(\"GenericCallback\", (EventArgs args) => { /* logic here */ }), // pass render fragment to the ChildContent parameter ChildContent(\"<h1>hello world</h1>\"), // paas render fragment to the OtherContent parameter RenderFragment(\"OtherContent\", \"<h1>hello world</h1>\"), // pass an template render fragment to the ItemTemplate parameter Template<string>(\"ItemTemplate\", (item) => (builder) => { }) ); Regular parameters can easily be passed as (string name, object? value) pairs (they are automatically converted to a ComponentParameter). We see two examples of that with the \"RegularParam\" and the unmatched attribute \"some-unmatched-attribute\" . Cascading values can be passed both as named and unnamed via the CascadingValue helper method, as we see in the example above with \"UnnamedCascadingValue\" and \"NamedCascadingValue\" . Event callbacks can be passed as Func and Action types with and without input and return types, using the EventCallback helper method. The example above shows two examples in \"NonGenericCallback\" and \"GenericCallback\" Child content and general Render fragments is passed to a component using the ChildContent or RenderFragment helper methods. The ChildContent and RenderFragment methods has two overloads, one that takes a (markup) string and a generic version, e.g. for child content, ChildContent<TComponent>(params ComponentParameter[] parameters) , which will generate the necessary render fragment to render a component as the child content. Note that the methods takes the same input arguments as the RenderComponent method, which means it too can be passed all the types of parameters shown in the example above. Templates render fragments can be passed via the Template<TValue> method, which takes the name of the parameter and a RenderFragment<TValue> as input. Unfortunately, you will have to turn to the RenderTreeBuilder API to create templates at the moment. TIP: Use the nameof(Component.Parameter) method to get parameter names in a refactor-safe way. For example, if we have a component MyComponent with a parameter named RegularParam , then use this when rendering: var cut = RenderComponent<MyComponent>( (nameof(MyComponent.RegularParam), \"some value\") ); Registering and injecting services into components during render When testing components that require services to be injected into them, i.e. @inject IJsRuntime jsRuntime , you must register the services or a mock thereof before you render your component. This is done via the ITestContext.Services property. Once a component has been rendered, no more services can be added to the service collection. If for example we want to render the with a dependency on an IMyService , we first have to call one of the AddSingleton methods on the service collection and register it. All the normal AddSingleton ServiceCollection overloads are available. In the case if a IJsRuntime dependency, we can however use the built-in Mocking JsRuntime . For example: public class ComponentTest : ComponentTestFixture // implements the ITestContext interface { [Fact] public void Test1() { // Add an custom service to the services collection Services.AddSingleton<IMyService>(new MyService()); // Add the Mock JsRuntime service Services.AddMockJsRuntime(); // Renders a MyComponent component and assigns the result to // a cut variable. CUT is short for Component Under Test. IRenderedComponent<MyComponent> cut = RenderComponent<MyComponent>(); } } See the page Mocking JsRuntime for more details mock."
  },
  "docs/csharp-test-examples.html": {
    "href": "docs/csharp-test-examples.html",
    "title": "C# test examples | bUnit",
    "keywords": "C# test examples In the following examples, the terminology component under test (abbreviated CUT) is used to mean the component that is the target of the test. The examples below use the Shouldly assertion library as well. If you prefer not to use that just replace the assertions with the ones from your own favorite assertion library. All examples can be found in the Tests folder in the Sample project . Content: Testing components without parameters Testing components with parameters 2.1. Passing new parameters to an already rendered component Testing components with child content Testing components with EventCallback parameters Testing components with cascading-value parameters Testing components that use on IJsRuntime 7.1 Verifying element references passed to InvokeAsync Testing components with injected dependencies Dispatching @on-events from tests Testing components without parameters The following unit-tests verifies that the Counter.razor component behaves correctly. Here is the source for the Counter component: @page \"/counter\" <h1>Counter</h1> <p> Current count: @currentCount </p> <button class=\"btn btn-primary\" @onclick=\"IncrementCount\">Click me</button> @code { int currentCount = 0; void IncrementCount() { currentCount++; } } The CounterTest.cs looks like this: public class CounterTest : ComponentTestFixture { [Fact] public void InitialHtmlIsCorrect() { // Arrange - renders the Counter component var cut = RenderComponent<Counter>(); // Assert // Here we specify expected HTML from CUT. var expectedHtml = @\"<h1>Counter</h1> <p>Current count: 0</p> <button class=\"\"btn-primary btn\"\">Click me</button>\"; // Here we use the HTML diffing library to assert that the rendered HTML // from CUT is semantically the same as the expected HTML string above. cut.MarkupMatches(expectedHtml); } [Fact] public void ClickingButtonIncreasesCountStrict() { // Arrange - renders the Counter component var cut = RenderComponent<Counter>(); // Act // Use a Find to query the rendered DOM tree and find the button element // and trigger the @onclick event handler by calling Click cut.Find(\"button\").Click(); // Assert // GetChangesSinceFirstRender returns list of differences since the first render, // in which we assert that there should only be one change, a text change where // the new value is provided to the ShouldHaveSingleTextChange assert method. cut.GetChangesSinceFirstRender().ShouldHaveSingleTextChange(\"Current count: 1\"); // Repeat the above steps to ensure that counter works for multiple clicks cut.Find(\"button\").Click(); cut.GetChangesSinceFirstRender().ShouldHaveSingleTextChange(\"Current count: 2\"); } [Fact] public void ClickingButtonIncreasesCountTargeted() { // Arrange - renders the Counter component var cut = RenderComponent<Counter>(); // Act // Use a Find to query the rendered DOM tree and find the button element // and trigger the @onclick event handler by calling Click cut.Find(\"button\").Click(); // Assert // Use a Find to query the rendered DOM tree and find the paragraph element // and assert that its text content is the expected (calling Trim first to remove insignificant whitespace) cut.Find(\"p\").TextContent.Trim().ShouldBe(\"Current count: 1\"); // Repeat the above steps to ensure that counter works for multiple clicks cut.Find(\"button\").Click(); cut.Find(\"p\").TextContent.Trim().ShouldBe(\"Current count: 2\"); } } A few things worth noting about the tests above: InitialHtmlIsCorrect uses the ShouldBe method that performs a semantic comparison of the generated HTML from CUT and the expected HTML string. That ensures that insignificant whitespace doesn't give false positives, among other things. The \" strict \" test ( ClickingButtonIncreasesCountStrict ) and the \" targeted \" test ( ClickingButtonIncreasesCountTargeted ) takes two different approaches to verifying CUT renders the expected output: The strict version generates a diff between the initial rendered HTML and the rendered HTML after the button click, and then asserts that the compare result only contains the expected change. The targeted version finds the <p> element expect to have changed, and asserts against its text content. With the targeted version, we cannot guarantee that there are not other changes in other places of the rendered HTML, if that is a concern, use the strict style. If it is not, then the targeted style can lead to simpler test. Testing components with parameters In the following tests we will pass regular parameters to a component under test, e.g. [Parameter] public SomeType PropName { get; set; } style properties, where SomeType is not a RenderFragment or a EventCallback type. The component under test will be the Aside.razor component, which looks like this: <aside @attributes=\"Attributes\"> @if (Header is { }) { <header>@Header</header> } @ChildContent </aside> @code { [Parameter(CaptureUnmatchedValues = true)] public IReadOnlyDictionary<string, object>? Attributes { get; set; } [Parameter] public string? Header { get; set; } [Parameter] public RenderFragment? ChildContent { get; set; } } The AsideTest.cs looks like this: public class AsideTest : ComponentTestFixture { [Fact(DisplayName = \"Aside should render header and additional parameters correctly\")] public void Test001() { // Arrange var header = \"Hello testers\"; var cssClass = \"some-class\"; // Act - render the Aside component with two parameters (passed as pairs of name, value tuples). // Note the use of the nameof operator to get the name of the Header parameter. This // helps keeps the test passing if the name of the parameter is refactored. // // This is equivalent to the follow Razor code: // // <Aside Header=\"Hello testers\" class=\"some-class\"> // </Aside> var cut = RenderComponent<Aside>( (nameof(Aside.Header), header), (\"class\", cssClass) ); // Assert - verify that the rendered HTML from the Aside component matches the expected output. cut.MarkupMatches($@\"<aside class=\"\"{cssClass}\"\"><header>{header}</header></aside>\"); } } In the test above, we use an overload of the RenderComponent<TComponent>() method, that allow us to pass regular parameters as pairs of (string name, object? value) . As highlighted in the code, I recommend using the nameof to get the name of declared parameters from the component, so any changes to the name through refactoring automatically updates the test. The second parameter, class is explicitly declared in the Aside class. It is instead Attributes parameter, that captures all unmatched parameters. Passing new parameters to an already rendered component Sometimes we want to test what happens when a component is re-rendered, possible with new parameters. This can be done using the cut.Render() and the cut.SetParametersAndRender() methods, for example: [Fact(DisplayName = \"Passing new parameters to Aside updates the rendered HTML correctly\")] public void Test002() { // Arrange - initial render of Aside var cut = RenderComponent<Aside>(); // Act - set the Header parameter and re-render the CUT cut.SetParametersAndRender((nameof(Aside.Header), \"HEADER\")); // Assert - Check that we have exactly one change since the first render, // and that it is an addition to the DOM tree cut.GetChangesSinceFirstRender() .ShouldHaveSingleChange() .ShouldBeAddition(\"<header>HEADER</header>\"); // Arrange - Create a snapshot of the current rendered HTML for later comparisons cut.SaveSnapshot(); // Act - Set the Header parameter to null again and re-render cut.SetParametersAndRender((nameof(Aside.Header), null)); // Assert - Check that we have exactly one change since compared with the snapshot we took, // and that it is an addition to the DOM tree. cut.GetChangesSinceSnapshot() .ShouldHaveSingleChange() .ShouldBeRemoval(\"<header>HEADER</header>\"); } Some notes on Test002 above: The cut.SetParametersAndRender() method has the same overloads as the RenderComponent() method. The ShouldHaveSingleChange() method asserts that only a single difference is found by the compare method, and returns that diff object. The ShouldBeAddition() method verifies that a difference is an addition with the specified content (doing a semantic HTML comparison). The cut.TakeSnapshot() method saves the current rendered HTML for later comparisons. The cut.GetChangesSinceSnapshot() compares the current rendered HTML with the one saved by the TakeSnapshot() method. Testing components with child content The Aside.razor component listed in the previous section also has a ChildContent parameter, so lets add a few tests that passes markup and components to it through that. public class AsideTest : ComponentTestFixture { [Fact(DisplayName = \"Aside should render child markup content correctly\")] public void Test003() { // Arrange var content = \"<p>I like simple tests and I cannot lie</p>\"; // Act // Act - render the Aside component with a child content parameter, // which is constructed through the ChildContent helper method. // // This is equivalent to the follow Razor code: // // <Aside> // <p>I like simple tests and I cannot lie</p> // </Aside> var cut = RenderComponent<Aside>( ChildContent(content) ); // Assert - verify that the rendered HTML from the Aside component matches the expected output. cut.MarkupMatches($@\"<aside>{content}</aside>\"); } [Fact(DisplayName = \"Aside should render a child component correctly\")] public void Test004() { // Arrange - set up test data var outerAsideHeader = \"Hello outside\"; var nestedAsideHeader = \"Hello inside\"; // Act - render the Aside component, passing a header to it // and a component to its child content. The ChildContent helper // method will pass the parameters it is given to the nested Aside // component. // // This is equivalent to the follow Razor code: // // <Aside Header=\"Hello outside\"> // <Aside Header=\"Hello inside\"></Aside> // </Aside> var cut = RenderComponent<Aside>( (nameof(Aside.Header), outerAsideHeader), ChildContent<Aside>( (nameof(Aside.Header), nestedAsideHeader) ) ); // Assert - verify that the rendered HTML from the Aside component matches the expected output. cut.MarkupMatches($@\"<aside> <header>{outerAsideHeader}</header> <aside> <header>{nestedAsideHeader}</header> </aside> </aside>\"); } } In Test003 above we use the ChildContent(...) helper method to create a ChildContent parameter and pass that to the Aside component. The overload, ChildContent<TComponent>(...) , used in Test004 , allows us to create a render fragment that will render a component (of type TComponent ) with the specified parameters. The ChildContent<TComponent>(...) has the same parameter options as the RenderComponent<TComponent> method has. Testing components with EventCallback parameters To show how to pass an EventCallback to a component under test, we will use the ThemedButton.razor , which looks like this: <button @onclick=\"HandleOnClick\" class=@Theme?.Value title=@Title?.Value @attributes=\"Attributes\"> @ChildContent </button> @code { [Parameter(CaptureUnmatchedValues = true)] public IReadOnlyDictionary<string, object>? Attributes { get; set; } [CascadingParameter] public ThemeInfo? Theme { get; set; } [CascadingParameter(Name = nameof(Title))] public ThemeInfo? Title { get; set; } [Parameter] public RenderFragment? ChildContent { get; set; } [Parameter] public EventCallback<MouseEventArgs> OnClick { get; set; } private Task HandleOnClick(MouseEventArgs args) => OnClick.InvokeAsync(args); } The relevant part of ThemedButtonTest.cs looks like this: public class ThemedButtonTest : ComponentTestFixture { [Fact(DisplayName = \"When button is clicked, the OnClick event callback is triggered\")] public void Test001() { var wasCalled = false; // Arrange - pass a lambda in as parameter to the OnClick parameter. // // This is equivalent to the follow Razor code: // // <ThemedButton OnClick=\"(_) => wasCalled = true\"></ThemedButton> var cut = RenderComponent<ThemedButton>( EventCallback(nameof(ThemedButton.OnClick), (MouseEventArgs _) => wasCalled = true) ); // Act - click the button in CUT cut.Find(\"button\").Click(); // Assert - check if callback was triggered wasCalled.ShouldBeTrue(); } } Test001 above uses the EventCallback(parammeterName, callback) helper method the generate a proper EventCallback object. There are many overloads, that should enable all the normal scenarios that is possible via Razor code. Testing components with cascading-value parameters If a component under test accepts cascading values, like ThemedButton.razor listed above, we can pass one or more cascading values to it like so: public class ThemedButtonTest : ComponentTestFixture { [Fact(DisplayName = \"Themed button uses provided theme info to set class attribute\")] public void Test002() { // Arrange - create an instance of the ThemeInfo class to passs to the ThemedButton var theme = new ThemeInfo() { Value = \"BUTTON\" }; // Act - Render the ThemedButton component, passing in the instance of ThemeInfo // as an _unnamed_ cascading value. // // This is equivalent to the follow Razor code: // // <CascadingValue Value=\"theme\"> // <ThemedButton></ThemedButton> // </CascadingValue> var cut = RenderComponent<ThemedButton>( CascadingValue(theme) ); // Assert - check that the class specified in the cascading value was indeed used. cut.Find(\"button\").ClassList.ShouldContain(theme.Value); } [Fact(DisplayName = \"Named cascading values are passed to components\")] public void Test003() { // Arrange - create two instances of the ThemeInfo class to passs to the ThemedButton var theme = new ThemeInfo() { Value = \"BUTTON\" }; var titleTheme = new ThemeInfo() { Value = \"BAR\" }; // Act - Render the ThemedButton component, passing in the instances of ThemeInfo // as an _unnamed_ and a _named_ cascading value. // // This is equivalent to the follow Razor code: // // <CascadingValue Value=\"theme\"> // <CascadingValue Name=\"Title\" Value=\"titleTheme\"> // <ThemedButton></ThemedButton> // </CascadingValue> // </CascadingValue> var cut = RenderComponent<ThemedButton>( CascadingValue(theme), CascadingValue(nameof(ThemedButton.Title), titleTheme) ); // Assert - check that the class and title specified in the cascading values was indeed used. var elm = cut.Find(\"button\"); elm.ClassList.ShouldContain(theme.Value); elm.GetAttribute(\"title\").ShouldContain(titleTheme.Value); } } Test002 above uses the CascadingValue(object value) helper method to pass an unnamed cascading value to the CUT. Test003 above demonstrates how multiple (named) cascading values can be passed to a component under test. Testing components that use on IJsRuntime It is not uncommon to have components use Blazor's JSInterop functionality to call JavaScript, e.g. after first render. To make it easy to mock calls to JavaScript, the library comes with a IJsRuntime mocking helper, that allows you to specify return how JSInterop calls should be handled, and to verify that they have happened. If you have more complex mocking needs, you could look to frameworks like Moq . To help us test the Mock JSRuntime, we have the WikiSearch.razor component, which looks like this: @inject IJSRuntime jsRuntime <p>@searchResult</p> @code { string searchResult = string.Empty; // Assumes the following function is available in the DOM // <script> // function queryWiki(query) { // return fetch('https://en.wikipedia.org/w/api.php?origin=*&action=opensearch&search=' + query) // .then(x => x.text()); // } // </script> protected override async Task OnAfterRenderAsync(bool firstRender) { if (firstRender) { searchResult = await jsRuntime.InvokeAsync<string>(\"queryWiki\", \"blazor\"); StateHasChanged(); } } } The WikiSearchTest.cs looks like this: public class WikiSearchTest : ComponentTestFixture { [Fact(DisplayName = \"WikiSearch renders an empty P element initially\")] public void Test001() { // Arrange // Registered the MockJsRuntime in \"Loose\" mode with the service provider used when rendering components. // JsRuntimeMockMode.Loose is the default. It configures the mock to just return the default // value for whatever is requested in a InvokeAsync call if no call has explicitly been set up. var jsMock = Services.AddMockJsRuntime(); // Act - render the WikiSearch component var cut = RenderComponent<WikiSearch>(); // Assert // Check that the components initial HTML is as expected // and that the mock was called with the expected JS identifier and arguments. cut.MarkupMatches(\"<p></p>\"); jsMock.VerifyInvoke(\"queryWiki\").Arguments.Single().ShouldBe(\"blazor\"); } [Fact(DisplayName = \"On first render WikiSearch uses JSInterop to query wiki and display the result\")] public void Test002() { // Arrange // Registered the MockJsRuntime in \"strict\" mode with the service provider used when rendering components. // JsRuntimeMockMode.Strict mode configures the mock to throw an error if it receives an InvokeAsync call // it has not been set up to handle. var jsMock = Services.AddMockJsRuntime(JsRuntimeMockMode.Strict); // Set up the mock to handle the expected call var expectedSearchResult = \"SEARCH RESULT\"; var plannedInvocation = jsMock.Setup<string>(\"queryWiki\", \"blazor\"); // Render the WikiSearch and verify that there is no content in the paragraph element var cut = RenderComponent<WikiSearch>(); cut.Find(\"p\").InnerHtml.ShouldBeEmpty(); // Act // Use the WaitForNextRender to block until the component has finished re-rendered. // The plannedInvocation.SetResult will return the result to the component is waiting // for in its OnAfterRender from the await jsRuntime.InvokeAsync<string>(\"queryWiki\", \"blazor\") call. WaitForNextRender(() => plannedInvocation.SetResult(expectedSearchResult)); // Assert // Verify that the result was received and correct placed in the paragraph element. cut.Find(\"p\").InnerHtml.ShouldBe(expectedSearchResult); } } Test001 just injects the mock in \"Loose\" mode. It means it will only returns a default(TValue) for calls to InvokeAsync<TValue>(...) it receives. This allows us to test components that expects a IJsRuntime to be injected, but where the test we want to perform isn't dependent on it providing any specific return value. In \"Loose\" mode it is still possible to call VerifyInvoke(identifier) and assert against the expected invocation. Test002 injects and configures the mock in strict mode. That requires us to configure all the expected calls the mock should handle. If it receives a call it has not been configured for, an exception is thrown and the test fails. The WaitForNextRender(Action) helper method is used to block until a (async) render completes, that the action passed to it has triggered. In Test002 we trigger a render by setting the result on the planned invocation, which causes the await jsRuntime.InvokeAsync<string>(\"queryWiki\", \"blazor\") call in the CUT to complete, and the component to trigger a re-render by calling the StateHasChanged() method. Verifying element references passed to InvokeAsync If you want to verify that a element reference ( ElementReference ) passed to a IJsRuntime.InvokeAsync call is references the expected DOM element, you can do so with the ShouldBeElementReferenceTo() assert helper. For example, consider the FocussingInput.razor component, which looks like this: @inject IJSRuntime jsRuntime <input @ref=\"_inputRef\" @attributes=\"Attributes\" /> @code { private ElementReference _inputRef; [Parameter(CaptureUnmatchedValues = true)] public IReadOnlyDictionary<string, object>? Attributes { get; set; } protected override async Task OnAfterRenderAsync(bool firstRender) { if (firstRender) { await jsRuntime.InvokeVoidAsync(\"document.body.focus.call\", _inputRef); } } } The the FocussingInputTest.cs looks like this: public class FocussingInputTest : ComponentTestFixture { [Fact(DisplayName = \"After first render, the new input field has focus\")] public void Test001() { // Arrange - add the IJsRuntime mock var jsRtMock = Services.AddMockJsRuntime(); // Act - render the FocussingInput component, causing // the OnAfterRender(firstRender: true) to be called var cut = RenderComponent<FocussingInput>(); // Assert // that there is a single call to document.body.focus.call var invocation = jsRtMock.VerifyInvoke(\"document.body.focus.call\"); // Assert that the invocation received a single argument // and that it was a reference to the input element. var expectedReferencedElement = cut.Find(\"input\"); invocation.Arguments.Single().ShouldBeElementReferenceTo(expectedReferencedElement); } } The last line verifies that there was a single argument to the invocation, and via the ShouldBeElementReferenceTo checks, that the <input /> was indeed the referenced element. Testing components with injected dependencies The demonstrate service injection, lets refactor the FetchData.razor component that comes with the default Razor app template, to make it more testable: Extract an interface from WeatherForecastService , name it IWeatherForecastService , and have FetchData take a dependency on it. Extract the <table> inside the else branch in the FetchData.razor component into its own component. Lets name it ForecastDataTable . In the FetchData.razor , pass the variable forecasts to the ForecastDataTable component. Now we just need a MockForecastService.cs . It looks like this: internal class MockForecastService : IWeatherForecastService { public TaskCompletionSource<WeatherForecast[]> Task { get; } = new TaskCompletionSource<WeatherForecast[]>(); public Task<WeatherForecast[]> GetForecastAsync(DateTime startDate) => Task.Task; } With the mock in place, we can write the FetchDataTest.cs , which looks like this: public class FetchDataTest : ComponentTestFixture { [Fact(DisplayName = \"Fetch data component renders expected initial markup\")] public void Test001() { // Arrange - add the mock forecast service Services.AddSingleton<IWeatherForecastService, MockForecastService>(); // Act - render the FetchData component var cut = RenderComponent<FetchData>(); // Assert that it renders the initial loading message var initialExpectedHtml = @\"<h1>Weather forecast</h1> <p>This component demonstrates fetching data from a service.</p> <p><em>Loading...</em></p>\"; cut.MarkupMatches(initialExpectedHtml); } [Fact(DisplayName = \"After data loads it is displayed in a ForecastTable component\")] public void Test002() { // Setup the mock forecast service var forecasts = new[] { new WeatherForecast { Date = DateTime.Now, Summary = \"Testy\", TemperatureC = 42 } }; var mockForecastService = new MockForecastService(); Services.AddSingleton<IWeatherForecastService>(mockForecastService); // Arrange - render the FetchData component var cut = RenderComponent<FetchData>(); // Act - pass the test forecasts to the component via the mock services WaitForNextRender(() => mockForecastService.Task.SetResult(forecasts)); // Assert // Render an new instance of the ForecastDataTable, passing in the test data var expectedDataTable = RenderComponent<ForecastDataTable>((nameof(ForecastDataTable.Forecasts), forecasts)); // Assert that the CUT has two changes, one removal of the loading message and one addition which matched the // rendered HTML from the expectedDataTable. cut.GetChangesSinceFirstRender().ShouldHaveChanges( diff => diff.ShouldBeRemoval(\"<p><em>Loading...</em></p>\"), diff => diff.ShouldBeAddition(expectedDataTable) ); } } In Test001 we use the Services.AddSingleton method to register the dependency and the performs a regular \"initial render\" verification. Test002 creates a new instance of the mock service and registers that with the the service provider. It then renders the CUT and uses WaitForNextRender to pass the test data to the mock services task, which then completes and the CUT gets the data. In the assert step we expect the CUT to use a ForecastDataTable to render the forecast data. Thus, to make our assertion more simple and stable to changes, we render an instance of the ForecastDataTable use that to verify that the expected addition after the CUT receives the forecast data is as it should be. Dispatching @on-events during testing In the previous sections we have seen a few examples of method calls that trigger @on-event handlers, e.g. cut.Find(selector).Click() that triggers the @onclick event handler attached to the element that matches the search query. The following triggers are currently available in PascalCase, without the @on -prefix. E.g. the @onbeforeactivate event is available as BeforeActivate() in various overloads."
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting started | bUnit",
    "keywords": "Getting started Testing Blazor components is not the same as testing a regular class. It basically boils down to that Blazor components are not instantiated directly by you, using the new keyword, they are instead rendered, and their output is not directly available. Thus, for first time Blazor component testers, the recommended reading is (5-10 minutes): Basics of Blazor component testing Creating a new test project If you prefer a video based tutorial , check out: Testing Blazor Components - session from .NET Conf - Focus on Blazor After you know the basics, pick one of the following testing styles to start with: C# based testing Razor based testing Snapshot testing If you are unsure, go with C# based testing , as it is more stable and resembles the structure of normal unit tests. If you want a more Razor-native feel when declaring your tests, the Razor based testing or Snapshot testing approach is worth a look. But be warned, the API is likely to change."
  },
  "docs/index.html": {
    "href": "docs/index.html",
    "title": "Introductions | bUnit",
    "keywords": "Introductions Before you start writing your first test, it is highly recommended that you go read the Getting started page, which will explain the difference between testing normal classes and Blazor/Razor components."
  },
  "docs/mocking-jsruntime.html": {
    "href": "docs/mocking-jsruntime.html",
    "title": "Mocking IJsRuntime | bUnit",
    "keywords": "Mocking IJsRuntime This page is on the todo list. To see examples of how to mock the JsRuntime, go to the C# test examples page."
  },
  "docs/razor-based-testing.html": {
    "href": "docs/razor-based-testing.html",
    "title": "Razor-based testing | bUnit",
    "keywords": "Razor-based testing This pages documents how to do Blazor/Razor component testing from .razor files. Before you get started, make sure you have read the Getting started page and in particular the Basics of Blazor component testing section. It wont take long, and it will ensure you get a good start at component testing. NOTE: This feature is EXPERIMENTAL and syntax and API will likely changed. Here are a few limitations to be aware of at the moment: The xUnit test runner can detect and execute tests in Razor test components, but is not able to distinguish the individual <Fixture> 's from each other. They are all executed together, one at the time. The solution is planned, see the related issue for details. Go to the Contribute page for info on how to provide feedback and suggestions. TIP: Working with and asserting against the rendered component and its output is covered on the Working with rendered components and fragments page. Content: Creating a new Razor test component Defining tests/fixtures in test components Executing test cases Further reading: Working with rendered components and fragments Semantic HTML markup comparison Mocking JsRuntime Razor test examples Creating a new Razor test component To create Razor based tests, we need to create test components. All test components must inherit from TestComponentBase , e.g. by adding @inherits TestComponentBase to the top of your .razor file. The TestComponentBase contains all the logic for rendering components and correctly dispose of renderers, components, and HTML parsers after each test. For example: @inherits TestComponentBase <Fixture Test=\"Test1\"> <ComponentUnderTest> <MyComponent /> </ComponentUnderTest> </Fixture> @code { void Test1() { // assert and verification } } You will also need to import a few namespaces to make asserting and mocking possible. They are best placed in an _Imports.razor file next to your Razor test components, e.g.: @using Microsoft.AspNetCore.Components.Web @using Microsoft.Extensions.DependencyInjection @using Bunit @using Bunit.Mocking.JSInterop @using Xunit NOTE: The _Imports.razor has already been created for you if you are using the Blazor test project template . Defining tests/fixtures in test components When you have a Razor test component created, its time to add test cases/fixtures to it. This is done via the <Fixture> component and related test methods and child components. Lets look at what options we have by setting up an empty test case, first the code: <Fixture Description=\"MyComponent renders as expected\" @* Optional - description is shown in error message if test fails *@ Setup=\"Setup\" @* Optional - method called first *@ SetupAsync=\"SetupAsync\" @* Optional - method called after Setup *@ Test=\"Test1\" @* Optional - method called after Setup/SetupAsync *@ TestAsync=\"Test1Async\" @* Optional - method called after Test *@ Tests=\"new Action[]{ Test2, Test3 }\"> @* Optional - methods are called after Test/TestAsync, one at the time *@ TestsAsync=\"new Func<Task>[]{ Test2Async, Test3Async }\"> @* Optional - methods are called after Tests, one at the time *@ <ComponentUnderTest> <MyComponent /> </ComponentUnderTest> <Fragment id=\"first\"> <h1>First Fragment</h1> </Fragment> <Fragment id=\"second\"> <MyOtherComponent /> </Fragment> </Fixture> @code { // Called first if present when added to the Setup parameter // on a <Fixture> component (can be named anything) void Setup() { // Add services and do other setup work in this method. Services.AddMockJsRuntime(); } // Called after Setup if present when added to the Setup parameter // on a <Fixture> component (can be named anything) Task SetupAsync() => Task.CompletedTask; // Called after Setup when added to the Test parameter to a // <Fixture> component (can be named anything) void Test1() { // Renders a MyComponent component and assigns the result to // a cut variable. CUT is short for Component Under Test. IRenderedComponent<MyComponent> cut = GetComponentUnderTest<MyComponent>(); // Renders the markup in the \"first\" fragment by calling GetFragment without an id. IRenderedFragment firstFragment = GetFragment(); // Renders the markup in the \"first\" fragment by calling GetFragment with an id. IRenderedFragment alsoFirstFragment = GetFragment(\"first\"); // Both first fragments refers to the same instance. Assert.Equal(firstFragment, alsoFirstFragment); // Renders a MyOtherComponent component defined in the second fragment. IRenderedComponent<MyOtherComponent> myOtherComponent = GetFragment<MyOtherComponent>(\"second\"); } Task Test1Async() => Task.CompletedTask; // Called after Test when added to the Tests parameter to a // <Fixture> component (can be named anything). Methods in // the Tests parameter is called in the order they are present in the // array. void Test2() { // do more testing on CUT, f1 and f2 by retriving them. } void Test3() { // do more testing on CUT, f1 and f2 by retriving them. } Task Test2Async() => Task.CompletedTask; Task Test3Async() => Task.CompletedTask; } The code above works as follows: All the <Fixture> components defined in the test component is found by the TestComponentBase 's test method. For each Fixture , it calls the related methods in the following order (if they are present): Setup SetupAsync Test TestAsync Tests , one at the time, in the order they appear in the array. TestsAsync , one at the time, in the order they appear in the array. The Description parameter on the <Fixture> element is displayed in the test runners error window if the test fails. It is inside child component <ComponentUnderTest> where you declare the component under test. Any markup or component fragments that is needed for the test can be declared inside the optional <Fragment> components. The Id parameter is optional, and only needed if you have more than one. To render and get the component under test or any of the fragments, use the GetComponentUnderTest<TComponent>() method, where TComponent is the type of the component you have defined under the <ComponentUnderTest> element. GetFragment() can be called both with and without a TComponent , e.g. if its just markup defined in it. If an id is not provided to the GetFragment method, the first declared <Fragment> is returned. Inside the test methods you can do all the things you can in C#-based tests, e.g. assert against the CUT. Executing test cases Since Blazor test component use xUnit under the hood as a test runner, you execute your tests them in exactly the same way as you would normal xUnit unit tests, i.e. by running dotnet test from the console or running the tests through the Test Explorer in Visual Studio. Do note the current limitations mentioned at the top of the page."
  },
  "docs/razor-test-examples.html": {
    "href": "docs/razor-test-examples.html",
    "title": "Razor test examples | bUnit",
    "keywords": "Razor test examples In the following examples, the terminology component under test (abbreviated CUT) is used to mean the component that is the target of the test. The examples below use the Shouldly assertion library as well. If you prefer not to use that just replace the assertions with the ones from your own favorite assertion library. All examples can be found in the Tests folder in the Sample project . Examples Here is a few examples that demonstrate how Razor test components can be used. More can be found in the sample/tests/RazorComponentTests samples folder. <Fixture Test=\"ThemedButtonUsesNamedCascadingValue\"> <ComponentUnderTest> <CascadingValue Name=@nameof(ThemedElement.Class) Value=@(new ThemeInfo { Value = \"FOO\" })> <CascadingValue Name=@nameof(ThemedElement.Title) Value=@(new ThemeInfo { Value = \"BAR\" })> <ThemedElement /> </CascadingValue> </CascadingValue> </ComponentUnderTest> </Fixture> @code { void ThemedButtonUsesNamedCascadingValue() { var cut = GetComponentUnderTest(); var elm = cut.Find(\"div\"); elm.ClassList.ShouldContain(\"FOO\"); elm.GetAttribute(\"title\").ShouldContain(\"BAR\"); } } This example shows how ThemedElement.razor can be tested with cascading values. <Fixture Test=MarkupPassedViaChildContent> <ComponentUnderTest> <ThemedButton> <h1>Foo bar button</h1> </ThemedButton> </ComponentUnderTest> <Fragment><h1>Foo bar button</h1></Fragment> </Fixture> @code { void MarkupPassedViaChildContent() { var expectedChildContent = GetFragment(); var cut = GetComponentUnderTest(); cut.Find(\"button\").ChildNodes.MarkupMatches(expectedChildContent); } } This example shows how ThemedButton.razor can be tested with with child content, and how a <Fragment> can be used to specify the expected output. Lets look at a more complex example, a test of the TodoList.razor component: <Fixture Setup=\"() => Services.AddMockJsRuntime()\" Test=\"EmptyTodoList\" Tests=\"new Action[]{ SettingLabel, TaskListRendersItemsUsingItemTemplate }\"> <ComponentUnderTest> <TodoList> <ItemsTemplate> <TodoItem Todo=@context /> </ItemsTemplate> </TodoList> </ComponentUnderTest> <Fragment Id=\"EmptyTodoListRender\"> <form> <div class=\"input-group\"> <input value=\"\" type=\"text\" class=\"form-control\" placeholder=\"Task description\" aria-label=\"Task description\" /> <div class=\"input-group-append\"> <button class=\"btn btn-secondary\" type=\"submit\">Add task</button> </div> </div> </form> <ol class=\"list-group\"></ol> </Fragment> <Fragment Id=\"TodoItemRender\"> <TodoItem Todo=\"@TestItems[0]\" /> </Fragment> </Fixture> @code { Todo[] TestItems { get; } = new[] { new Todo { Id = 42 } }; void EmptyTodoList() { // Act - get the CUT var cut = GetComponentUnderTest<TodoList>(); // Assert - get the expected initial rendered HTML from the fragment // and use it to verify the initial rendered HTML var expectedInitialRender = GetFragment(\"EmptyTodoListRender\"); cut.MarkupMatches(expectedInitialRender); } void SettingLabel() { // Arrange - get the CUT var cut = GetComponentUnderTest<TodoList>(); // Act - update label cut.SetParametersAndRender((nameof(TodoList.Label), \"LABEL\")); // Assert - verifiy that the placeholder and aria-label has changed cut.GetChangesSinceFirstRender().ShouldAllBe( diff => diff.ShouldBeAttributeChange(\"placeholder\", \"LABEL\"), diff => diff.ShouldBeAttributeChange(\"aria-label\", \"LABEL\") ); } void TaskListRendersItemsUsingItemTemplate() { // Arrange - get the cut and take a snapshot of the current render tree output var cut = GetComponentUnderTest<TodoList>(); cut.SaveSnapshot(); // Act - assign test todo items to the CUT cut.SetParametersAndRender((nameof(TodoList.Items), TestItems)); // Assert - get the diffs since the snapshot and compare to the expected. var diffs = cut.GetChangesSinceSnapshot(); var expected = GetFragment(\"TodoItemRender\"); diffs.ShouldHaveSingleChange().ShouldBeAddition(expected); } } A few things worth noting here: The Fixture methods are called in this order: Setup (inline) EmptyTodoList SettingLabel TaskListRendersItemsUsingItemTemplate The CUT is only initialized once, the first time GetComponentUnderTest<TodoList>() is called. Subsequent calls return the same instance. The follow test verifies some of the component logic around new todo creation and setting focus to the input field on first render: <Fixture Setup=\"Setup\" Tests=\"new Action[]{ OnFirstRenderInputFieldGetsFocus, AfterFirstRenderInputFieldDoesntGetFocusAfterRerenders, WhenAddTaskFormIsSubmittedWithNoTextOnAddingTodoIsNotCalled }\"> <ComponentUnderTest> <TodoList OnAddingTodo=\"OnAddingTodoHandler\"> <ItemsTemplate> <TodoItem Todo=@context /> </ItemsTemplate> </TodoList> </ComponentUnderTest> </Fixture> @code { MockJsRuntimeInvokeHandler jsRtMock = default!; Todo? createdTodo; void OnAddingTodoHandler(Todo todo) => createdTodo = todo; void Setup() { jsRtMock = Services.AddMockJsRuntime(); } void OnFirstRenderInputFieldGetsFocus() { // Act var cut = GetComponentUnderTest<TodoList>(); // Assert that there is a call to document.body.focus.call with a single argument, // a reference to the input element. jsRtMock.VerifyInvoke(\"document.body.focus.call\") .Arguments.Single().ShouldBeElementReferenceTo(cut.Find(\"input\")); } void AfterFirstRenderInputFieldDoesntGetFocusAfterRerenders() { // Arrange var cut = GetComponentUnderTest<TodoList>(); // Act cut.Render(); // second render cut.Render(); // thrid render cut.Render(); // ... cut.Render(); // Assert that focus logic only runs on first render (only called 1 time). jsRtMock.VerifyInvoke(\"document.body.focus.call\", calledTimes: 1); } void WhenAddTaskFormIsSubmittedWithNoTextOnAddingTodoIsNotCalled() { // Arrange var cut = GetComponentUnderTest<TodoList>(); // Act - submit the empty form cut.Find(\"form\").Submit(); // Assert - verify that no task was created Assert.Null(createdTodo); } void WhenAddTaskFormIsSubmittedWithTextOnAddingTodoIsCalled() { // Arrange - ensure createdTask is null createdTodo = null; var cut = GetComponentUnderTest<TodoList>(); var taskValue = \"HELLO WORLD TASK\"; // Act - find input field and change its value, then submit the form cut.Find(\"input\").Change(taskValue); cut.Find(\"form\").Submit(); // Assert that a new task has been passed to the EventCallback listener and that the // new task has the expected value Assert.NotNull(createdTodo); Assert.Equal(taskValue, createdTodo?.Text); } } More examples to come."
  },
  "docs/semantic-html-markup-comparison.html": {
    "href": "docs/semantic-html-markup-comparison.html",
    "title": "Semantic HTML markup comparison | bUnit",
    "keywords": "Semantic HTML markup comparison This library includes comparison and assert helpers that uses the AngleSharp Diffing library to perform semantic HTML comparison. On this page we will go through how the comparison works, and what options you have to affect the comparison process. NOTE: The semantic HTML comparison is available in all three test types, but is always used in the Snapshot test type. Content: Why semantic comparison is needed for stable tests Customizing the comparison process Verifying output from components Different ways of getting the differences Why semantic comparison is needed for stable tests Just performing string comparison of two strings containing HTML markup can break quite easily, even if the two markup strings are semantically equivalent. Some changes that can cause a regular string comparison to fail are: Formatting of markup, e.g. with extra line breaks or indentions, changes to insignificant whitespace. Reordering of attributes. The order of attributes does not matter. Reordering of classes defined in the class=\"...\" attribute. The order of classes does not matter. Change of boolean attribute to be implicit or explicit, e.g. from required=\"required\" to required . Change to insignificant whitespace inside <style> tags. Changes to HTML comments and comments inside <style> tags. The AngleSharp Diffing library handles all those cases, so your tests are more stable. Customizing the comparison process The AngleSharp Diffing library also allows us to customize the comparison process, by added special attributes to the \"control\" markup , i.e. the expected markup we want to use in verification. There are the customization options you have available to you: Ignore comments (enabled by default): Comments in markup and inside <style> tags are automatically ignored and not part of the comparison process. Ignore element: Use the diff:ignore attribute to ignore an element, all it's attributes and child nodes. For example, to ignore the h1 element: <header> <h1 class=\"heading-1\" diff:ignore>Hello world</h1> </header> Ignore attribute: To ignore an attribute during comparison, add the :ignore modifier to the attribute (no value is needed). For example, to ignore the class attribute: <header> <h1 class:ignore=\"heading-1\">Hello world</h1> </header> Configure whitespace handling: By default all nodes and elements are compared using the Normalize whitespace handling option. The Normalize option will trim all text nodes and replace two or more whitespace characters with a single space character. The other options are Preserve , which will leave all whitespace unchanged, and RemoveWhitespaceNodes , which will only remove empty text nodes. To override the default option, use the diff:whitespace attribute, and pass one of the three options to it, for example: <header> <h1 diff:whitespace=\"preserve\">Hello <em> woooorld</em></h1> </header> NOTE: The default for <pre> and <script> elements is the Preserve option. To change that, use the diff:whitespace attribute, for example: <pre diff:whitespace=\"RemoveWhitespaceNodes\">...</pre> Perform case insensitive comparison: By default, all text comparison is case sensitive, but if you want to perform a case insensitive comparison of text inside elements or attributes, use the diff:ignoreCase attributes on elements and :ignoreCase modifier on attributes. For example, to do case insensitive comparison of the text in the h1 element: <h1 diff:ignoreCase>HellO WoRlD</h1> To do case insensitive comparison of the text inside the title attribute: <h1 title:ignoreCase=\"HeaDinG\">...</h1> Use RegEx during comparison: To use a regular expression when comparing the text inside an element or inside an attribute, use the diff:regex on elements and :regex modifier on attributes. For example, to use a regular expression during comparison of the text in the h1 element, add the diff:regex attribute to the element and place the regular expression in the body of the element: <h1 diff:regex diff:ignoreCase>Hello World \\d{4}</h1> To use a regular expression during comparison of the text inside the title attribute, add the :regex modifier to attribute and add the regular expression in the attributes value: <h1 title:regex=\"Heading-\\d{4}\">...</h1> NOTE: The attribute modifiers :ignoreCase and :regex can be combined, for example as: attr:ignoreCase:regex=\"FOO-\\d{4}\" Verifying output from components To verify the rendered output of a component (i.e. in the from of a IRenderedFragment ), we have the various MarkupMatches() methods we can use. If for example we have a component, <Heading> , that renders the following markup: <h3 id=\"heading-1337\" required> Heading text <small class=\"text-muted mark\">Secondary text</small> </h3> If we want to verify the markup is rendered correctly, and for example use RegEx to verify the id attribute (it might be generated) and ignore the <small> element, we can do it like this in C# based tests: [Fact] public void InitialHtmlIsCorrect() { // Arrange - renders the Heading component var cut = RenderComponent<Heading>(); // Assert // Here we specify expected HTML from CUT. var expectedHtml = @\"<h3 id:regex=\"\"heading-\\d{4}\"\" required> Heading text <small diff:ignore></small> </h3>\"; // Here we use the HTML diffing library to assert that the rendered HTML // from CUT is semantically the same as the expected HTML string above. cut.MarkupMatches(expectedHtml); } In a Razor based test, the example looks like this: <Fixture Test=\"Test1\"> <ComponentUnderTest> <Heading /> </ComponentUnderTest> </Fixture> @code { void Test1(IRazorTestContext context) { // Arrange - Gets the Heading component var cut = context.GetComponentUnderTest<Heading>(); // Assert // Here we specify expected HTML from CUT. var expectedHtml = @\"<h3 id:regex=\"\"heading-\\d{4}\"\" required> Heading text <small diff:ignore></small> </h3>\"; // Here we use the HTML diffing library to assert that the rendered HTML // from CUT is semantically the same as the expected HTML string above. cut.MarkupMatches(expectedHtml); } } In a Snapshot test, the example looks like this: <SnapshotTest Description=\"Helpful description of the test case\"> <TestInput> <Heading /> </TestInput> <ExpectedOutput> <h3 id:regex=\"heading-\\d{4}\" required> Heading text <small diff:ignore></small> </h3> </ExpectedOutput> </SnapshotTest> Different ways of getting the differences This section is coming soon. For now, see examples on the C# test examples page where the methods are demonstrated. Look for examples using these methods: CompareTo MarkupMatches GetChangesSinceFirstRender SaveSnapshot and GetChangesSinceSnapshot ShouldHaveSingleTextChange ShouldHaveSingleChange ShouldBeAddition ShouldBeRemoval"
  },
  "docs/snapshot-testing.html": {
    "href": "docs/snapshot-testing.html",
    "title": "Snapshot testing | bUnit",
    "keywords": "Snapshot testing The library has basic support for snapshot testing, declared via Razor syntax in Razor files. In snapshot testing, you declare your input (e.g. one or more component under test) and the expected output, and the library will automatically tell you if they do not match. Notable features that are missing at the moment is the ability to auto-generate the expected output and to trigger updates of expected output. NOTE: This feature is EXPERIMENTAL and syntax and API will likely changed. Here are a few limitations to be aware of at the moment: The xUnit test runner can detect and execute tests in Razor test components, but is not able to distinguish the individual <SnapshotTest> 's from each other. They are all executed together, one at the time. The solution is planned, see the related issue for details. Go to the Contribute page for info on how to provide feedback and suggestions. Content: Creating new snapshot test component Defining snapshot test cases Executing test cases Examples Further reading: Semantic HTML markup comparison Creating new snapshot test component To create Razor-based snapshot tests, we need to create snapshot Razor test components. All snapshot test components must inherit from TestComponentBase , e.g. by adding @inherits TestComponentBase to the top of your .razor file. For example: @inherits TestComponentBase <SnapshotTest Description=\"Test 1\"> <TestInput>...</TestInput> <ExpectedOutput>...</ExpectedOutput> </SnapshotTest> <SnapshotTest Description=\"Test 2\"> <TestInput>...</TestInput> <ExpectedOutput>...</ExpectedOutput> </SnapshotTest> Defining snapshot test cases All you need to define a snapshot test case is the <SnapshotTest> component added to a test component, e.g.: <SnapshotTest Description=\"Helpful description of the test case - displayed if test fails\" Setup=\"() => Services.AddMockJsRuntime()\" SetupAsync=\"() => Task.CompletedTask\"> <TestInput><!-- Declare your test input here, e.g. one or more components --></TestInput> <ExpectedOutput><!-- Declare your expected output here --></ExpectedOutput> </SnapshotTest> You can add as many <SnapshotTest> components to a test component as you want. Each <SnapshotTest> component will go through this life cycle: Call the Setup and SetupAsync methods, if specified. Use the Setup / SetupAsync method to e.g. configure services, like registering a mock IJsRuntime . Render the child content of the <TestInput> component and capture its output. Render the child content of the <ExpectedOutput> component and capture its output. Verify that the two outputs are equal. If they are not, the test will fail with an HtmlEqualException . Executing test cases Since Snapshot tests use xUnit under the hood as a test runner, you execute your tests them in exactly the same way as you would normal xUnit unit tests, i.e. by running dotnet test from the console or running the tests through the Test Explorer in Visual Studio. Do note the current limitations mentioned at the top of the page. Examples The following example shows how to test the the TodoList.razor component: @inherits TestComponentBase <SnapshotTest Description=\"A todolist with one todo added should render correctly\" Setup=\"() => Services.AddMockJsRuntime()\" SetupAsync=\"() => Task.CompletedTask\"> <TestInput> <TodoList Label=\"My label\" Items=@(new Todo[]{ new Todo{ Id=42, Text=\"Check out this new thing called Blazor\" } })> <ItemsTemplate Context=\"todo\"> <TodoItem Todo=\"todo\"></TodoItem> </ItemsTemplate> </TodoList> </TestInput> <ExpectedOutput> <form> <div class=\"input-group\"> <input type=\"text\" class=\"form-control\" placeholder=\"My label\" aria-label=\"My label\" value=\"\" /> <div class=\"input-group-append\"> <button class=\"btn btn-secondary\" type=\"submit\">Add task</button> </div> </div> </form> <ol class=\"list-group\"> <li id:regex=\"todo-42\" class=\"list-group-item list-group-item-action\"> <span>Check out this new thing called Blazor</span> <span class=\"float-right text-danger\">(click to complete)</span> </li> </ol> </ExpectedOutput> </SnapshotTest>"
  },
  "docs/tutorials-and-presentations.html": {
    "href": "docs/tutorials-and-presentations.html",
    "title": "Presentations, guides, and tutorials | bUnit",
    "keywords": "Presentations, guides, and tutorials Presentations Testing Blazor Components - session from .NET Conf - Focus on Blazor Twitch/Live coding Blazor StateHasChanged: Blazor Component Unit Testing with Egil Hansen"
  },
  "docs/working-with-rendered-components-and-fragments.html": {
    "href": "docs/working-with-rendered-components-and-fragments.html",
    "title": "Working with the rendered components and fragments | bUnit",
    "keywords": "Working with the rendered components and fragments This page is on the todo list. To see examples of how to work with rendered components and fragments, go to the following pages: C# test examples Razor test examples"
  },
  "index.html": {
    "href": "index.html",
    "title": "bUnit - a testing library for Blazor Components | bUnit",
    "keywords": "bUnit - a testing library for Blazor Components bUnit , previously known as Blazor Components Testing Library , is a unit testing library for Blazor Components. You can easily define components under test in C# or Razor syntax, and verify outcome using semantic HTML diffing/comparison logic. You can interact with and inspect components, trigger event handlers, provide cascading values, inject services, mock IJsRuntime, and perform snapshot testing. This library's goal is to make it easy to write comprehensive, stable unit tests for Blazor Components/Razor Components. To see how, go to the Documentation pages . To browse the source code and provide feedback, head to https://github.com/egil/bunit/ . Contributors Shout outs and a big thank you to the contributors to this library. Here they are, in alphabetically: Michael J Conrad (@Siphonophora) Rastislav Novotný (@duracellko)"
  }
}